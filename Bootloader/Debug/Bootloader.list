
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  000050c8  2**0
                  CONTENTS
  4 .ARM          00000000  08003e44  08003e44  000050c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e44  08003e44  000050c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00004e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08003e4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000c8  08003f14  000050c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08003f14  000052e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb9  00000000  00000000  000050f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c5  00000000  00000000  00011caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00004b2d  00000000  00000000  0001416f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  00018ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d1  00000000  00000000  000196a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018114  00000000  00000000  00019e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dad0  00000000  00000000  00031f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084c0a  00000000  00000000  0003fa55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c465f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022a0  00000000  00000000  000c46a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  000c6944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	080039f0 	.word	0x080039f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	080039f0 	.word	0x080039f0

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b530      	push	{r4, r5, lr}
 800014e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9404      	str	r4, [sp, #16]
 8000154:	9405      	str	r4, [sp, #20]
 8000156:	9406      	str	r4, [sp, #24]
 8000158:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015a:	4b18      	ldr	r3, [pc, #96]	@ (80001bc <MX_GPIO_Init+0x70>)
 800015c:	699a      	ldr	r2, [r3, #24]
 800015e:	f042 0210 	orr.w	r2, r2, #16
 8000162:	619a      	str	r2, [r3, #24]
 8000164:	699a      	ldr	r2, [r3, #24]
 8000166:	f002 0210 	and.w	r2, r2, #16
 800016a:	9201      	str	r2, [sp, #4]
 800016c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016e:	699a      	ldr	r2, [r3, #24]
 8000170:	f042 0208 	orr.w	r2, r2, #8
 8000174:	619a      	str	r2, [r3, #24]
 8000176:	699a      	ldr	r2, [r3, #24]
 8000178:	f002 0208 	and.w	r2, r2, #8
 800017c:	9202      	str	r2, [sp, #8]
 800017e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0204 	orr.w	r2, r2, #4
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0304 	and.w	r3, r3, #4
 800018e:	9303      	str	r3, [sp, #12]
 8000190:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000192:	4d0b      	ldr	r5, [pc, #44]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000194:	4622      	mov	r2, r4
 8000196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019a:	4628      	mov	r0, r5
 800019c:	f000 fed4 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a6:	2301      	movs	r3, #1
 80001a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ac:	2302      	movs	r3, #2
 80001ae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001b0:	a904      	add	r1, sp, #16
 80001b2:	4628      	mov	r0, r5
 80001b4:	f000 fdba 	bl	8000d2c <HAL_GPIO_Init>

}
 80001b8:	b009      	add	sp, #36	@ 0x24
 80001ba:	bd30      	pop	{r4, r5, pc}
 80001bc:	40021000 	.word	0x40021000
 80001c0:	40011000 	.word	0x40011000

080001c4 <UART_Write_Loop>:
  return ch;
}


static int UART_Write_Loop( void )
{
 80001c4:	b530      	push	{r4, r5, lr}
 80001c6:	b083      	sub	sp, #12
  char tx = 'g';
 80001c8:	2367      	movs	r3, #103	@ 0x67
 80001ca:	f88d 3007 	strb.w	r3, [sp, #7]
  char rx = '0';
 80001ce:	2330      	movs	r3, #48	@ 0x30
 80001d0:	f88d 3006 	strb.w	r3, [sp, #6]
  HAL_StatusTypeDef ex;
  int ret = 0;
  int count = 0;
 80001d4:	2500      	movs	r5, #0
 80001d6:	e005      	b.n	80001e4 <UART_Write_Loop+0x20>
      printf("Firmware Update Started\r\n");
      ret = 1;
      break;
    }

    if( count == 100 )
 80001d8:	2d64      	cmp	r5, #100	@ 0x64
 80001da:	d024      	beq.n	8000226 <UART_Write_Loop+0x62>
    {
      //received nothing
      printf("No Data Received for Firmware Update\r\n");
      break;
    }
    count++;
 80001dc:	3501      	adds	r5, #1
    HAL_Delay(20);              //20ms delay
 80001de:	2014      	movs	r0, #20
 80001e0:	f000 fbc2 	bl	8000968 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e8:	4811      	ldr	r0, [pc, #68]	@ (8000230 <UART_Write_Loop+0x6c>)
 80001ea:	f000 feb3 	bl	8000f54 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart3, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 80001ee:	4c11      	ldr	r4, [pc, #68]	@ (8000234 <UART_Write_Loop+0x70>)
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	2201      	movs	r2, #1
 80001f6:	f10d 0107 	add.w	r1, sp, #7
 80001fa:	4620      	mov	r0, r4
 80001fc:	f001 fa93 	bl	8001726 <HAL_UART_Transmit>
    ex = HAL_UART_Receive(&huart3, (uint8_t *)&rx, 1, 10);
 8000200:	230a      	movs	r3, #10
 8000202:	2201      	movs	r2, #1
 8000204:	f10d 0106 	add.w	r1, sp, #6
 8000208:	4620      	mov	r0, r4
 800020a:	f001 faf8 	bl	80017fe <HAL_UART_Receive>
    if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 800020e:	2800      	cmp	r0, #0
 8000210:	d1e2      	bne.n	80001d8 <UART_Write_Loop+0x14>
 8000212:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000216:	2b72      	cmp	r3, #114	@ 0x72
 8000218:	d1de      	bne.n	80001d8 <UART_Write_Loop+0x14>
      printf("Firmware Update Started\r\n");
 800021a:	4807      	ldr	r0, [pc, #28]	@ (8000238 <UART_Write_Loop+0x74>)
 800021c:	f002 fd6c 	bl	8002cf8 <puts>
      ret = 1;
 8000220:	2001      	movs	r0, #1
  }

  return ret;
}
 8000222:	b003      	add	sp, #12
 8000224:	bd30      	pop	{r4, r5, pc}
      printf("No Data Received for Firmware Update\r\n");
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <UART_Write_Loop+0x78>)
 8000228:	f002 fd66 	bl	8002cf8 <puts>
  int ret = 0;
 800022c:	2000      	movs	r0, #0
      break;
 800022e:	e7f8      	b.n	8000222 <UART_Write_Loop+0x5e>
 8000230:	40011000 	.word	0x40011000
 8000234:	200000e8 	.word	0x200000e8
 8000238:	08003a08 	.word	0x08003a08
 800023c:	08003a24 	.word	0x08003a24

08000240 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000242:	b087      	sub	sp, #28
 8000244:	4605      	mov	r5, r0
 8000246:	460e      	mov	r6, r1
 8000248:	4614      	mov	r4, r2
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 800024a:	f000 fc51 	bl	8000af0 <HAL_FLASH_Unlock>
    if( ret != HAL_OK )
 800024e:	4607      	mov	r7, r0
 8000250:	2800      	cmp	r0, #0
 8000252:	d134      	bne.n	80002be <write_data_to_flash_app+0x7e>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000254:	b9e4      	cbnz	r4, 8000290 <write_data_to_flash_app+0x50>
{
 8000256:	2400      	movs	r4, #0
        break;
      }
      application_write_idx = 0;
    }

    for(int i = 0; i < data_len/2; i++)
 8000258:	ebb4 0f56 	cmp.w	r4, r6, lsr #1
 800025c:	da2e      	bge.n	80002bc <write_data_to_flash_app+0x7c>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 800025e:	f815 3014 	ldrb.w	r3, [r5, r4, lsl #1]
 8000262:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 8000266:	7852      	ldrb	r2, [r2, #1]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 8000268:	4918      	ldr	r1, [pc, #96]	@ (80002cc <write_data_to_flash_app+0x8c>)
 800026a:	8809      	ldrh	r1, [r1, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 800026c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000270:	2300      	movs	r3, #0
 8000272:	f101 6100 	add.w	r1, r1, #134217728	@ 0x8000000
 8000276:	f501 4188 	add.w	r1, r1, #17408	@ 0x4400
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fc90 	bl	8000ba0 <HAL_FLASH_Program>
                               halfword_data
                             );
      if( ret == HAL_OK )
 8000280:	4607      	mov	r7, r0
 8000282:	b9c0      	cbnz	r0, 80002b6 <write_data_to_flash_app+0x76>
      {
        //update the data count
        application_write_idx += 2;
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <write_data_to_flash_app+0x8c>)
 8000286:	8813      	ldrh	r3, [r2, #0]
 8000288:	3302      	adds	r3, #2
 800028a:	8013      	strh	r3, [r2, #0]
    for(int i = 0; i < data_len/2; i++)
 800028c:	3401      	adds	r4, #1
 800028e:	e7e3      	b.n	8000258 <write_data_to_flash_app+0x18>
      printf("Erasing the Flash memory...\r\n");
 8000290:	480f      	ldr	r0, [pc, #60]	@ (80002d0 <write_data_to_flash_app+0x90>)
 8000292:	f002 fd31 	bl	8002cf8 <puts>
      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000296:	2300      	movs	r3, #0
 8000298:	9302      	str	r3, [sp, #8]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <write_data_to_flash_app+0x94>)
 800029c:	9304      	str	r3, [sp, #16]
      EraseInitStruct.NbPages       = 47;                     //47 Pages
 800029e:	232f      	movs	r3, #47	@ 0x2f
 80002a0:	9305      	str	r3, [sp, #20]
      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80002a2:	a901      	add	r1, sp, #4
 80002a4:	a802      	add	r0, sp, #8
 80002a6:	f000 fcef 	bl	8000c88 <HAL_FLASHEx_Erase>
      if( ret != HAL_OK )
 80002aa:	4607      	mov	r7, r0
 80002ac:	b938      	cbnz	r0, 80002be <write_data_to_flash_app+0x7e>
      application_write_idx = 0;
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <write_data_to_flash_app+0x8c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	801a      	strh	r2, [r3, #0]
 80002b4:	e7cf      	b.n	8000256 <write_data_to_flash_app+0x16>
      }
      else
      {
        printf("Flash Write Error...HALT!!!\r\n");
 80002b6:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <write_data_to_flash_app+0x98>)
 80002b8:	f002 fd1e 	bl	8002cf8 <puts>
        break;
      }
    }

    if( ret != HAL_OK )
 80002bc:	b117      	cbz	r7, 80002c4 <write_data_to_flash_app+0x84>
      break;
    }
  }while( false );

  return ret;
}
 80002be:	4638      	mov	r0, r7
 80002c0:	b007      	add	sp, #28
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = HAL_FLASH_Lock();
 80002c4:	f000 fc2e 	bl	8000b24 <HAL_FLASH_Lock>
 80002c8:	4607      	mov	r7, r0
    if( ret != HAL_OK )
 80002ca:	e7f8      	b.n	80002be <write_data_to_flash_app+0x7e>
 80002cc:	200000e4 	.word	0x200000e4
 80002d0:	08003a4c 	.word	0x08003a4c
 80002d4:	08004400 	.word	0x08004400
 80002d8:	08003a6c 	.word	0x08003a6c

080002dc <Firmware_Update>:
  */



static void Firmware_Update(void)
{
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	f2ad 4d0c 	subw	sp, sp, #1036	@ 0x40c
  uint8_t xx,yy;
  uint8_t x = 'x';
 80002e2:	2378      	movs	r3, #120	@ 0x78
 80002e4:	f88d 3405 	strb.w	r3, [sp, #1029]	@ 0x405
  uint8_t y = 'y';
 80002e8:	2379      	movs	r3, #121	@ 0x79
 80002ea:	f88d 3404 	strb.w	r3, [sp, #1028]	@ 0x404
  HAL_StatusTypeDef ex = HAL_OK;
  uint16_t current_app_size = 0;
  uint16_t i = 0;

  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 80002ee:	2100      	movs	r1, #0
 80002f0:	9101      	str	r1, [sp, #4]
 80002f2:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 80002f6:	a802      	add	r0, sp, #8
 80002f8:	f002 fdde 	bl	8002eb8 <memset>

  do
  {
    if( UART_Write_Loop() != 0 )
 80002fc:	f7ff ff62 	bl	80001c4 <UART_Write_Loop>
 8000300:	b910      	cbnz	r0, 8000308 <Firmware_Update+0x2c>

  if( ex != HAL_OK )
  {
    while(1);
  }
}
 8000302:	f20d 4d0c 	addw	sp, sp, #1036	@ 0x40c
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
      HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000308:	4c50      	ldr	r4, [pc, #320]	@ (800044c <Firmware_Update+0x170>)
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	2201      	movs	r2, #1
 8000310:	f20d 4104 	addw	r1, sp, #1028	@ 0x404
 8000314:	4620      	mov	r0, r4
 8000316:	f001 fa06 	bl	8001726 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 800031a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800031e:	2201      	movs	r2, #1
 8000320:	f20d 4106 	addw	r1, sp, #1030	@ 0x406
 8000324:	4620      	mov	r0, r4
 8000326:	f001 fa6a 	bl	80017fe <HAL_UART_Receive>
      if( ex != HAL_OK )
 800032a:	4607      	mov	r7, r0
 800032c:	b128      	cbz	r0, 800033a <Firmware_Update+0x5e>
        printf("Get application Size error (yy)...HALT!!!\r\n");
 800032e:	4848      	ldr	r0, [pc, #288]	@ (8000450 <Firmware_Update+0x174>)
 8000330:	f002 fce2 	bl	8002cf8 <puts>
  if( ex != HAL_OK )
 8000334:	2f00      	cmp	r7, #0
 8000336:	d0e4      	beq.n	8000302 <Firmware_Update+0x26>
    while(1);
 8000338:	e7fe      	b.n	8000338 <Firmware_Update+0x5c>
      HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 800033a:	4c44      	ldr	r4, [pc, #272]	@ (800044c <Firmware_Update+0x170>)
 800033c:	f04f 33ff 	mov.w	r3, #4294967295
 8000340:	2201      	movs	r2, #1
 8000342:	f20d 4105 	addw	r1, sp, #1029	@ 0x405
 8000346:	4620      	mov	r0, r4
 8000348:	f001 f9ed 	bl	8001726 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 800034c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000350:	2201      	movs	r2, #1
 8000352:	f20d 4107 	addw	r1, sp, #1031	@ 0x407
 8000356:	4620      	mov	r0, r4
 8000358:	f001 fa51 	bl	80017fe <HAL_UART_Receive>
      if( ex != HAL_OK )
 800035c:	4607      	mov	r7, r0
 800035e:	b118      	cbz	r0, 8000368 <Firmware_Update+0x8c>
        printf("Get application Size error(XX)...HALT!!!\r\n");
 8000360:	483c      	ldr	r0, [pc, #240]	@ (8000454 <Firmware_Update+0x178>)
 8000362:	f002 fcc9 	bl	8002cf8 <puts>
        break;
 8000366:	e7e5      	b.n	8000334 <Firmware_Update+0x58>
      application_size = yy | (xx << 8);
 8000368:	f89d 3407 	ldrb.w	r3, [sp, #1031]	@ 0x407
 800036c:	f89d 1406 	ldrb.w	r1, [sp, #1030]	@ 0x406
 8000370:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8000374:	4b38      	ldr	r3, [pc, #224]	@ (8000458 <Firmware_Update+0x17c>)
 8000376:	8019      	strh	r1, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 8000378:	4838      	ldr	r0, [pc, #224]	@ (800045c <Firmware_Update+0x180>)
 800037a:	f002 fc55 	bl	8002c28 <iprintf>
  uint16_t i = 0;
 800037e:	2400      	movs	r4, #0
  uint16_t current_app_size = 0;
 8000380:	4625      	mov	r5, r4
 8000382:	e04d      	b.n	8000420 <Firmware_Update+0x144>
          printf("Received Block[%d]\r\n", current_app_size/MAX_BLOCK_SIZE);
 8000384:	0aa9      	lsrs	r1, r5, #10
 8000386:	4836      	ldr	r0, [pc, #216]	@ (8000460 <Firmware_Update+0x184>)
 8000388:	f002 fc4e 	bl	8002c28 <iprintf>
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 800038c:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8000390:	bf8c      	ite	hi
 8000392:	2200      	movhi	r2, #0
 8000394:	2201      	movls	r2, #1
 8000396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039a:	a801      	add	r0, sp, #4
 800039c:	f7ff ff50 	bl	8000240 <write_data_to_flash_app>
          if( ex != HAL_OK )
 80003a0:	2800      	cmp	r0, #0
 80003a2:	d151      	bne.n	8000448 <Firmware_Update+0x16c>
          memset(block, 0,MAX_BLOCK_SIZE);
 80003a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003a8:	2100      	movs	r1, #0
 80003aa:	a801      	add	r0, sp, #4
 80003ac:	f002 fd84 	bl	8002eb8 <memset>
          i = 0;
 80003b0:	2400      	movs	r4, #0
        if( current_app_size >= application_size)
 80003b2:	4b29      	ldr	r3, [pc, #164]	@ (8000458 <Firmware_Update+0x17c>)
 80003b4:	881b      	ldrh	r3, [r3, #0]
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9bc      	bls.n	8000334 <Firmware_Update+0x58>
        HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 80003ba:	4e24      	ldr	r6, [pc, #144]	@ (800044c <Firmware_Update+0x170>)
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295
 80003c0:	2201      	movs	r2, #1
 80003c2:	f20d 4104 	addw	r1, sp, #1028	@ 0x404
 80003c6:	4630      	mov	r0, r6
 80003c8:	f001 f9ad 	bl	8001726 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 80003cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80003d0:	2201      	movs	r2, #1
 80003d2:	f20d 4106 	addw	r1, sp, #1030	@ 0x406
 80003d6:	4630      	mov	r0, r6
 80003d8:	f001 fa11 	bl	80017fe <HAL_UART_Receive>
        if( ex != HAL_OK )
 80003dc:	4606      	mov	r6, r0
 80003de:	bb38      	cbnz	r0, 8000430 <Firmware_Update+0x154>
        HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 80003e0:	4e1a      	ldr	r6, [pc, #104]	@ (800044c <Firmware_Update+0x170>)
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
 80003e6:	2201      	movs	r2, #1
 80003e8:	f20d 4105 	addw	r1, sp, #1029	@ 0x405
 80003ec:	4630      	mov	r0, r6
 80003ee:	f001 f99a 	bl	8001726 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 80003f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80003f6:	2201      	movs	r2, #1
 80003f8:	f20d 4107 	addw	r1, sp, #1031	@ 0x407
 80003fc:	4630      	mov	r0, r6
 80003fe:	f001 f9fe 	bl	80017fe <HAL_UART_Receive>
        if( ex != HAL_OK )
 8000402:	4606      	mov	r6, r0
 8000404:	b9d0      	cbnz	r0, 800043c <Firmware_Update+0x160>
        block[i++] = yy;
 8000406:	1c63      	adds	r3, r4, #1
 8000408:	b29b      	uxth	r3, r3
 800040a:	aa01      	add	r2, sp, #4
 800040c:	f89d 1406 	ldrb.w	r1, [sp, #1030]	@ 0x406
 8000410:	5511      	strb	r1, [r2, r4]
        block[i++] = xx;
 8000412:	3402      	adds	r4, #2
 8000414:	b2a4      	uxth	r4, r4
 8000416:	f89d 1407 	ldrb.w	r1, [sp, #1031]	@ 0x407
 800041a:	54d1      	strb	r1, [r2, r3]
        current_app_size += 2;
 800041c:	3502      	adds	r5, #2
 800041e:	b2ad      	uxth	r5, r5
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000420:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8000424:	d0ae      	beq.n	8000384 <Firmware_Update+0xa8>
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <Firmware_Update+0x17c>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	42ab      	cmp	r3, r5
 800042c:	d8c1      	bhi.n	80003b2 <Firmware_Update+0xd6>
 800042e:	e7a9      	b.n	8000384 <Firmware_Update+0xa8>
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000430:	4621      	mov	r1, r4
 8000432:	480c      	ldr	r0, [pc, #48]	@ (8000464 <Firmware_Update+0x188>)
 8000434:	f002 fbf8 	bl	8002c28 <iprintf>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000438:	4637      	mov	r7, r6
          break;
 800043a:	e77b      	b.n	8000334 <Firmware_Update+0x58>
          printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
 800043c:	4621      	mov	r1, r4
 800043e:	480a      	ldr	r0, [pc, #40]	@ (8000468 <Firmware_Update+0x18c>)
 8000440:	f002 fbf2 	bl	8002c28 <iprintf>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 8000444:	4637      	mov	r7, r6
          break;
 8000446:	e775      	b.n	8000334 <Firmware_Update+0x58>
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000448:	4607      	mov	r7, r0
 800044a:	e773      	b.n	8000334 <Firmware_Update+0x58>
 800044c:	200000e8 	.word	0x200000e8
 8000450:	08003a8c 	.word	0x08003a8c
 8000454:	08003ab8 	.word	0x08003ab8
 8000458:	200000e6 	.word	0x200000e6
 800045c:	08003ae4 	.word	0x08003ae4
 8000460:	08003b04 	.word	0x08003b04
 8000464:	08003b1c 	.word	0x08003b1c
 8000468:	08003b54 	.word	0x08003b54

0800046c <__io_putchar>:
{
 800046c:	b500      	push	{lr}
 800046e:	b083      	sub	sp, #12
 8000470:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	2201      	movs	r2, #1
 8000478:	a901      	add	r1, sp, #4
 800047a:	4803      	ldr	r0, [pc, #12]	@ (8000488 <__io_putchar+0x1c>)
 800047c:	f001 f953 	bl	8001726 <HAL_UART_Transmit>
}
 8000480:	9801      	ldr	r0, [sp, #4]
 8000482:	b003      	add	sp, #12
 8000484:	f85d fb04 	ldr.w	pc, [sp], #4
 8000488:	2000012c 	.word	0x2000012c

0800048c <verify_firmware_signature>:

/* USER CODE BEGIN 4 */
bool verify_firmware_signature(const uint8_t *data, size_t data_len, const uint8_t *signature, size_t sig_len)
{
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	b0b7      	sub	sp, #220	@ 0xdc
 8000490:	4606      	mov	r6, r0
 8000492:	460f      	mov	r7, r1
 8000494:	4615      	mov	r5, r2
    struct tc_sha256_state_struct sha256_ctx;
    uint8_t hash[TC_SHA256_DIGEST_SIZE];
    uint8_t pub_key[64]; // Raw public key (x and y coordinates)

    // Convert DER encoded public key to raw format (x and y coordinates)
    memcpy(pub_key, &public_key_der[26], 32); // x coordinate
 8000496:	4c1c      	ldr	r4, [pc, #112]	@ (8000508 <verify_firmware_signature+0x7c>)
 8000498:	f10d 0c08 	add.w	ip, sp, #8
 800049c:	6820      	ldr	r0, [r4, #0]
 800049e:	6861      	ldr	r1, [r4, #4]
 80004a0:	68a2      	ldr	r2, [r4, #8]
 80004a2:	68e3      	ldr	r3, [r4, #12]
 80004a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80004a8:	6920      	ldr	r0, [r4, #16]
 80004aa:	6961      	ldr	r1, [r4, #20]
 80004ac:	69a2      	ldr	r2, [r4, #24]
 80004ae:	69e3      	ldr	r3, [r4, #28]
 80004b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    memcpy(&pub_key[32], &public_key_der[58], 32); // y coordinate
 80004b4:	6a20      	ldr	r0, [r4, #32]
 80004b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80004b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80004ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80004bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80004c0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80004c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80004c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80004c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80004c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

    // Initialize the SHA-256 context
    tc_sha256_init(&sha256_ctx);
 80004cc:	a81a      	add	r0, sp, #104	@ 0x68
 80004ce:	f002 fa1f 	bl	8002910 <tc_sha256_init>

    // Compute the SHA-256 hash of the firmware
    tc_sha256_update(&sha256_ctx, data, data_len);
 80004d2:	463a      	mov	r2, r7
 80004d4:	4631      	mov	r1, r6
 80004d6:	a81a      	add	r0, sp, #104	@ 0x68
 80004d8:	f002 fa48 	bl	800296c <tc_sha256_update>
    tc_sha256_final(hash, &sha256_ctx);
 80004dc:	a91a      	add	r1, sp, #104	@ 0x68
 80004de:	a812      	add	r0, sp, #72	@ 0x48
 80004e0:	f002 fa6f 	bl	80029c2 <tc_sha256_final>

    // Verify the ECDSA signature
    int verified = uECC_verify(pub_key, hash, TC_SHA256_DIGEST_SIZE, signature, uECC_secp256r1());
 80004e4:	f001 feb8 	bl	8002258 <uECC_secp256r1>
 80004e8:	9000      	str	r0, [sp, #0]
 80004ea:	462b      	mov	r3, r5
 80004ec:	2220      	movs	r2, #32
 80004ee:	a912      	add	r1, sp, #72	@ 0x48
 80004f0:	a802      	add	r0, sp, #8
 80004f2:	f001 ffb7 	bl	8002464 <uECC_verify>

    if (verified == 0) {
 80004f6:	b110      	cbz	r0, 80004fe <verify_firmware_signature+0x72>
        printf("Signature verification failed\n");
        return false;
    }

    return true;
 80004f8:	2001      	movs	r0, #1
}
 80004fa:	b037      	add	sp, #220	@ 0xdc
 80004fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("Signature verification failed\n");
 80004fe:	4803      	ldr	r0, [pc, #12]	@ (800050c <verify_firmware_signature+0x80>)
 8000500:	f002 fbfa 	bl	8002cf8 <puts>
        return false;
 8000504:	2000      	movs	r0, #0
 8000506:	e7f8      	b.n	80004fa <verify_firmware_signature+0x6e>
 8000508:	2000001e 	.word	0x2000001e
 800050c:	08003b8c 	.word	0x08003b8c

08000510 <goto_application>:

static void goto_application(void)
{
 8000510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000514:	b090      	sub	sp, #64	@ 0x40
 8000516:	af00      	add	r7, sp, #0
    printf("Gonna Jump to Application...\n");
 8000518:	4826      	ldr	r0, [pc, #152]	@ (80005b4 <goto_application+0xa4>)
 800051a:	f002 fbed 	bl	8002cf8 <puts>

    uint8_t firmware[application_size];
 800051e:	4c26      	ldr	r4, [pc, #152]	@ (80005b8 <goto_application+0xa8>)
 8000520:	8822      	ldrh	r2, [r4, #0]
 8000522:	1dd3      	adds	r3, r2, #7
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	4669      	mov	r1, sp
 8000528:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800052c:	469d      	mov	sp, r3
 800052e:	46e8      	mov	r8, sp
    // Load firmware into the buffer
    memcpy(firmware, (void *)ETX_APP_START_ADDRESS, application_size);
 8000530:	4922      	ldr	r1, [pc, #136]	@ (80005bc <goto_application+0xac>)
 8000532:	4668      	mov	r0, sp
 8000534:	f002 fd3b 	bl	8002fae <memcpy>

    uint8_t signature[64]; // Example size for ECDSA P-256
    // Load signature from storage
    memcpy(signature, (void *)(ETX_APP_START_ADDRESS + application_size), sizeof(signature));
 8000538:	8826      	ldrh	r6, [r4, #0]
 800053a:	f106 6c00 	add.w	ip, r6, #134217728	@ 0x8000000
 800053e:	f50c 4c88 	add.w	ip, ip, #17408	@ 0x4400
 8000542:	463c      	mov	r4, r7
 8000544:	f10c 0540 	add.w	r5, ip, #64	@ 0x40
 8000548:	46a6      	mov	lr, r4
 800054a:	f8dc 0000 	ldr.w	r0, [ip]
 800054e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8000552:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8000556:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800055a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800055e:	f10c 0c10 	add.w	ip, ip, #16
 8000562:	4674      	mov	r4, lr
 8000564:	45ac      	cmp	ip, r5
 8000566:	d1ef      	bne.n	8000548 <goto_application+0x38>

    if (!verify_firmware_signature(firmware, application_size, signature, sizeof(signature)))
 8000568:	2340      	movs	r3, #64	@ 0x40
 800056a:	463a      	mov	r2, r7
 800056c:	4631      	mov	r1, r6
 800056e:	4640      	mov	r0, r8
 8000570:	f7ff ff8c 	bl	800048c <verify_firmware_signature>
 8000574:	b1a8      	cbz	r0, 80005a2 <goto_application+0x92>
    {
        printf("Invalid firmware signature... HALT!!!\r\n");
        while (1);
    }

    void (*app_reset_handler)(void) = (void *)(*((volatile uint32_t *)(ETX_APP_START_ADDRESS + 4U)));
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <goto_application+0xb0>)
 8000578:	f8d3 4404 	ldr.w	r4, [r3, #1028]	@ 0x404

    if (app_reset_handler == (void *)0xFFFFFFFF)
 800057c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000580:	d013      	beq.n	80005aa <goto_application+0x9a>
    {
        printf("Invalid Application... HALT!!!\r\n");
        while (1);
    }

    __set_MSP(*(volatile uint32_t *)ETX_APP_START_ADDRESS);
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <goto_application+0xb0>)
 8000584:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000588:	f383 8808 	msr	MSP, r3

    // Turn OFF the LED to tell the user that Bootloader is not running
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000592:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <goto_application+0xb4>)
 8000594:	f000 fcd8 	bl	8000f48 <HAL_GPIO_WritePin>

    app_reset_handler(); // call the app reset handler
 8000598:	47a0      	blx	r4
}
 800059a:	3740      	adds	r7, #64	@ 0x40
 800059c:	46bd      	mov	sp, r7
 800059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printf("Invalid firmware signature... HALT!!!\r\n");
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <goto_application+0xb8>)
 80005a4:	f002 fba8 	bl	8002cf8 <puts>
        while (1);
 80005a8:	e7fe      	b.n	80005a8 <goto_application+0x98>
        printf("Invalid Application... HALT!!!\r\n");
 80005aa:	4808      	ldr	r0, [pc, #32]	@ (80005cc <goto_application+0xbc>)
 80005ac:	f002 fba4 	bl	8002cf8 <puts>
        while (1);
 80005b0:	e7fe      	b.n	80005b0 <goto_application+0xa0>
 80005b2:	bf00      	nop
 80005b4:	08003bac 	.word	0x08003bac
 80005b8:	200000e6 	.word	0x200000e6
 80005bc:	08004400 	.word	0x08004400
 80005c0:	08004000 	.word	0x08004000
 80005c4:	40011000 	.word	0x40011000
 80005c8:	08003bcc 	.word	0x08003bcc
 80005cc:	08003bf4 	.word	0x08003bf4

080005d0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <Error_Handler+0x2>

080005d4 <MX_USART1_UART_Init>:
{
 80005d4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80005d6:	480a      	ldr	r0, [pc, #40]	@ (8000600 <MX_USART1_UART_Init+0x2c>)
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_USART1_UART_Init+0x30>)
 80005da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80005dc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80005e0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	2300      	movs	r3, #0
 80005e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ea:	220c      	movs	r2, #12
 80005ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	f001 f869 	bl	80016c8 <HAL_UART_Init>
 80005f6:	b900      	cbnz	r0, 80005fa <MX_USART1_UART_Init+0x26>
}
 80005f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005fa:	f7ff ffe9 	bl	80005d0 <Error_Handler>
 80005fe:	bf00      	nop
 8000600:	2000012c 	.word	0x2000012c
 8000604:	40013800 	.word	0x40013800

08000608 <MX_USART3_UART_Init>:
{
 8000608:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <MX_USART3_UART_Init+0x2c>)
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <MX_USART3_UART_Init+0x30>)
 800060e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000610:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000614:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	2300      	movs	r3, #0
 8000618:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800061a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800061c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800061e:	220c      	movs	r2, #12
 8000620:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000626:	f001 f84f 	bl	80016c8 <HAL_UART_Init>
 800062a:	b900      	cbnz	r0, 800062e <MX_USART3_UART_Init+0x26>
}
 800062c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800062e:	f7ff ffcf 	bl	80005d0 <Error_Handler>
 8000632:	bf00      	nop
 8000634:	200000e8 	.word	0x200000e8
 8000638:	40004800 	.word	0x40004800

0800063c <SystemClock_Config>:
{
 800063c:	b500      	push	{lr}
 800063e:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000640:	2228      	movs	r2, #40	@ 0x28
 8000642:	2100      	movs	r1, #0
 8000644:	a806      	add	r0, sp, #24
 8000646:	f002 fc37 	bl	8002eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	9303      	str	r3, [sp, #12]
 8000652:	9304      	str	r3, [sp, #16]
 8000654:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2310      	movs	r3, #16
 8000660:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a806      	add	r0, sp, #24
 8000664:	f000 fc96 	bl	8000f94 <HAL_RCC_OscConfig>
 8000668:	b968      	cbnz	r0, 8000686 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066e:	2100      	movs	r1, #0
 8000670:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000678:	a801      	add	r0, sp, #4
 800067a:	f000 fecb 	bl	8001414 <HAL_RCC_ClockConfig>
 800067e:	b920      	cbnz	r0, 800068a <SystemClock_Config+0x4e>
}
 8000680:	b011      	add	sp, #68	@ 0x44
 8000682:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000686:	f7ff ffa3 	bl	80005d0 <Error_Handler>
    Error_Handler();
 800068a:	f7ff ffa1 	bl	80005d0 <Error_Handler>
	...

08000690 <main>:
{
 8000690:	b508      	push	{r3, lr}
  HAL_Init();
 8000692:	f000 f945 	bl	8000920 <HAL_Init>
  SystemClock_Config();
 8000696:	f7ff ffd1 	bl	800063c <SystemClock_Config>
  MX_GPIO_Init();
 800069a:	f7ff fd57 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800069e:	f7ff ff99 	bl	80005d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006a2:	f7ff ffb1 	bl	8000608 <MX_USART3_UART_Init>
  printf("Bootloader v%d:%d Started!!!\n", BL_Version[0], BL_Version[1]);
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <main+0x2c>)
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	7819      	ldrb	r1, [r3, #0]
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <main+0x30>)
 80006ae:	f002 fabb 	bl	8002c28 <iprintf>
  Firmware_Update();
 80006b2:	f7ff fe13 	bl	80002dc <Firmware_Update>
  goto_application();
 80006b6:	f7ff ff2b 	bl	8000510 <goto_application>
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x2a>
 80006bc:	20000000 	.word	0x20000000
 80006c0:	08003c14 	.word	0x08003c14

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <HAL_MspInit+0x2c>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	619a      	str	r2, [r3, #24]
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	f002 0201 	and.w	r2, r2, #1
 80006d6:	9200      	str	r2, [sp, #0]
 80006d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	69da      	ldr	r2, [r3, #28]
 80006dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80006e0:	61da      	str	r2, [r3, #28]
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	b002      	add	sp, #8
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b510      	push	{r4, lr}
 80006f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	2300      	movs	r3, #0
 80006fa:	9304      	str	r3, [sp, #16]
 80006fc:	9305      	str	r3, [sp, #20]
 80006fe:	9306      	str	r3, [sp, #24]
 8000700:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000702:	6803      	ldr	r3, [r0, #0]
 8000704:	4a2d      	ldr	r2, [pc, #180]	@ (80007bc <HAL_UART_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d004      	beq.n	8000714 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800070a:	4a2d      	ldr	r2, [pc, #180]	@ (80007c0 <HAL_UART_MspInit+0xcc>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d02b      	beq.n	8000768 <HAL_UART_MspInit+0x74>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000710:	b008      	add	sp, #32
 8000712:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000714:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <HAL_UART_MspInit+0xd0>)
 8000716:	699a      	ldr	r2, [r3, #24]
 8000718:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800071c:	619a      	str	r2, [r3, #24]
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000724:	9200      	str	r2, [sp, #0]
 8000726:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	f042 0204 	orr.w	r2, r2, #4
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800073a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800073e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	4c1f      	ldr	r4, [pc, #124]	@ (80007c8 <HAL_UART_MspInit+0xd4>)
 800074a:	a904      	add	r1, sp, #16
 800074c:	4620      	mov	r0, r4
 800074e:	f000 faed 	bl	8000d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000756:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	a904      	add	r1, sp, #16
 8000760:	4620      	mov	r0, r4
 8000762:	f000 fae3 	bl	8000d2c <HAL_GPIO_Init>
 8000766:	e7d3      	b.n	8000710 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <HAL_UART_MspInit+0xd0>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000770:	61da      	str	r2, [r3, #28]
 8000772:	69da      	ldr	r2, [r3, #28]
 8000774:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000778:	9202      	str	r2, [sp, #8]
 800077a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	f042 0208 	orr.w	r2, r2, #8
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	9303      	str	r3, [sp, #12]
 800078c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000792:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	4c0b      	ldr	r4, [pc, #44]	@ (80007cc <HAL_UART_MspInit+0xd8>)
 800079e:	a904      	add	r1, sp, #16
 80007a0:	4620      	mov	r0, r4
 80007a2:	f000 fac3 	bl	8000d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	a904      	add	r1, sp, #16
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 fab9 	bl	8000d2c <HAL_GPIO_Init>
}
 80007ba:	e7a9      	b.n	8000710 <HAL_UART_MspInit+0x1c>
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40004800 	.word	0x40004800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler>

080007d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler>

080007d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler>

080007d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler>

080007d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler>

080007da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f8af 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bd08      	pop	{r3, pc}

080007e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	460c      	mov	r4, r1
 80007ec:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2500      	movs	r5, #0
 80007f0:	e006      	b.n	8000800 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4621      	mov	r1, r4
 80007f8:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fc:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80007fe:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000800:	42b5      	cmp	r5, r6
 8000802:	dbf6      	blt.n	80007f2 <_read+0xa>
	}

return len;
}
 8000804:	4630      	mov	r0, r6
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	460c      	mov	r4, r1
 800080c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	2500      	movs	r5, #0
 8000810:	e004      	b.n	800081c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8000812:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000816:	f7ff fe29 	bl	800046c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	3501      	adds	r5, #1
 800081c:	42b5      	cmp	r5, r6
 800081e:	dbf8      	blt.n	8000812 <_write+0xa>
	}
	return len;
}
 8000820:	4630      	mov	r0, r6
 8000822:	bd70      	pop	{r4, r5, r6, pc}

08000824 <_close>:

int _close(int file)
{
	return -1;
}
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	4770      	bx	lr

0800082a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000830:	2000      	movs	r0, #0
 8000832:	4770      	bx	lr

08000834 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000834:	2001      	movs	r0, #1
 8000836:	4770      	bx	lr

08000838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000838:	2000      	movs	r0, #0
 800083a:	4770      	bx	lr

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b510      	push	{r4, lr}
 800083e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <_sbrk+0x38>)
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <_sbrk+0x40>)
 8000846:	6800      	ldr	r0, [r0, #0]
 8000848:	b140      	cbz	r0, 800085c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <_sbrk+0x40>)
 800084c:	6800      	ldr	r0, [r0, #0]
 800084e:	4403      	add	r3, r0
 8000850:	1a52      	subs	r2, r2, r1
 8000852:	4293      	cmp	r3, r2
 8000854:	d806      	bhi.n	8000864 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <_sbrk+0x40>)
 8000858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800085a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <_sbrk+0x40>)
 800085e:	4c08      	ldr	r4, [pc, #32]	@ (8000880 <_sbrk+0x44>)
 8000860:	6004      	str	r4, [r0, #0]
 8000862:	e7f2      	b.n	800084a <_sbrk+0xe>
    errno = ENOMEM;
 8000864:	f002 fb76 	bl	8002f54 <__errno>
 8000868:	230c      	movs	r3, #12
 800086a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	e7f3      	b.n	800085a <_sbrk+0x1e>
 8000872:	bf00      	nop
 8000874:	20005000 	.word	0x20005000
 8000878:	00000400 	.word	0x00000400
 800087c:	20000170 	.word	0x20000170
 8000880:	200002e8 	.word	0x200002e8

08000884 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	4770      	bx	lr
	...

08000888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	@ (80008cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ae:	f7ff ffe9 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 fb55 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff feeb 	bl	8000690 <main>
  bx lr
 80008ba:	4770      	bx	lr
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80008c4:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 80008c8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80008cc:	200002e4 	.word	0x200002e4

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>
	...

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b510      	push	{r4, lr}
 80008d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_InitTick+0x40>)
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000918 <HAL_InitTick+0x44>)
 80008e6:	6810      	ldr	r0, [r2, #0]
 80008e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008ec:	f000 f8a6 	bl	8000a3c <HAL_SYSTICK_Config>
 80008f0:	b968      	cbnz	r0, 800090e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	2c0f      	cmp	r4, #15
 80008f4:	d901      	bls.n	80008fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80008f6:	2001      	movs	r0, #1
 80008f8:	e00a      	b.n	8000910 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	4621      	mov	r1, r4
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f000 f88b 	bl	8000a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_InitTick+0x48>)
 8000908:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800090e:	2001      	movs	r0, #1
}
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop
 8000914:	20000064 	.word	0x20000064
 8000918:	20000060 	.word	0x20000060
 800091c:	20000068 	.word	0x20000068

08000920 <HAL_Init>:
{
 8000920:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000922:	4a07      	ldr	r2, [pc, #28]	@ (8000940 <HAL_Init+0x20>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f863 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f7ff ffce 	bl	80008d4 <HAL_InitTick>
  HAL_MspInit();
 8000938:	f7ff fec4 	bl	80006c4 <HAL_MspInit>
}
 800093c:	2000      	movs	r0, #0
 800093e:	bd08      	pop	{r3, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <HAL_IncTick+0x10>)
 8000946:	6811      	ldr	r1, [r2, #0]
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_IncTick+0x14>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	440b      	add	r3, r1
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000174 	.word	0x20000174
 8000958:	20000064 	.word	0x20000064

0800095c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800095c:	4b01      	ldr	r3, [pc, #4]	@ (8000964 <HAL_GetTick+0x8>)
 800095e:	6818      	ldr	r0, [r3, #0]
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000174 	.word	0x20000174

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff6 	bl	800095c <HAL_GetTick>
 8000970:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000976:	d002      	beq.n	800097e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <HAL_Delay+0x24>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097e:	f7ff ffed 	bl	800095c <HAL_GetTick>
 8000982:	1b40      	subs	r0, r0, r5
 8000984:	42a0      	cmp	r0, r4
 8000986:	d3fa      	bcc.n	800097e <HAL_Delay+0x16>
  {
  }
}
 8000988:	bd38      	pop	{r3, r4, r5, pc}
 800098a:	bf00      	nop
 800098c:	20000064 	.word	0x20000064

08000990 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000990:	2800      	cmp	r0, #0
 8000992:	db08      	blt.n	80009a6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	0109      	lsls	r1, r1, #4
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800099c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80009a0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80009a4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	f000 000f 	and.w	r0, r0, #15
 80009aa:	0109      	lsls	r1, r1, #4
 80009ac:	b2c9      	uxtb	r1, r1
 80009ae:	4b01      	ldr	r3, [pc, #4]	@ (80009b4 <__NVIC_SetPriority+0x24>)
 80009b0:	5419      	strb	r1, [r3, r0]
  }
}
 80009b2:	4770      	bx	lr
 80009b4:	e000ed14 	.word	0xe000ed14

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ba:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009be:	f1c0 0c07 	rsb	ip, r0, #7
 80009c2:	f1bc 0f04 	cmp.w	ip, #4
 80009c6:	bf28      	it	cs
 80009c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009cc:	1d03      	adds	r3, r0, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d90f      	bls.n	80009f2 <NVIC_EncodePriority+0x3a>
 80009d2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 3eff 	mov.w	lr, #4294967295
 80009d8:	fa0e f00c 	lsl.w	r0, lr, ip
 80009dc:	ea21 0100 	bic.w	r1, r1, r0
 80009e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80009e6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80009ea:	ea41 0002 	orr.w	r0, r1, r2
 80009ee:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	2300      	movs	r3, #0
 80009f4:	e7ee      	b.n	80009d4 <NVIC_EncodePriority+0x1c>
	...

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a04:	0200      	lsls	r0, r0, #8
 8000a06:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_NVIC_SetPriority+0x1c>)
 8000a22:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a24:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000a28:	f7ff ffc6 	bl	80009b8 <NVIC_EncodePriority>
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f7ff ffae 	bl	8000990 <__NVIC_SetPriority>
}
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	3801      	subs	r0, #1
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a42:	d20b      	bcs.n	8000a5c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000a48:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <HAL_SYSTICK_Config+0x24>)
 8000a4c:	21f0      	movs	r1, #240	@ 0xf0
 8000a4e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a52:	2000      	movs	r0, #0
 8000a54:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	2207      	movs	r2, #7
 8000a58:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a5c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <FLASH_Program_HalfWord+0x14>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <FLASH_Program_HalfWord+0x18>)
 8000a6c:	6913      	ldr	r3, [r2, #16]
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000a74:	8001      	strh	r1, [r0, #0]
}
 8000a76:	4770      	bx	lr
 8000a78:	20000178 	.word	0x20000178
 8000a7c:	40022000 	.word	0x40022000

08000a80 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f013 0310 	ands.w	r3, r3, #16
 8000a88:	d005      	beq.n	8000a96 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a8a:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <FLASH_SetErrorCode+0x6c>)
 8000a8c:	69d3      	ldr	r3, [r2, #28]
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000a94:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a96:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000a98:	68d2      	ldr	r2, [r2, #12]
 8000a9a:	f012 0f04 	tst.w	r2, #4
 8000a9e:	d006      	beq.n	8000aae <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000aa0:	4912      	ldr	r1, [pc, #72]	@ (8000aec <FLASH_SetErrorCode+0x6c>)
 8000aa2:	69ca      	ldr	r2, [r1, #28]
 8000aa4:	f042 0201 	orr.w	r2, r2, #1
 8000aa8:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000ab0:	69d2      	ldr	r2, [r2, #28]
 8000ab2:	f012 0f01 	tst.w	r2, #1
 8000ab6:	d009      	beq.n	8000acc <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000ab8:	490c      	ldr	r1, [pc, #48]	@ (8000aec <FLASH_SetErrorCode+0x6c>)
 8000aba:	69ca      	ldr	r2, [r1, #28]
 8000abc:	f042 0204 	orr.w	r2, r2, #4
 8000ac0:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ac2:	4909      	ldr	r1, [pc, #36]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000ac4:	69ca      	ldr	r2, [r1, #28]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000acc:	f240 1201 	movw	r2, #257	@ 0x101
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d002      	beq.n	8000ada <FLASH_SetErrorCode+0x5a>
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000ad6:	60d3      	str	r3, [r2, #12]
}  
 8000ad8:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ada:	4a03      	ldr	r2, [pc, #12]	@ (8000ae8 <FLASH_SetErrorCode+0x68>)
 8000adc:	69d3      	ldr	r3, [r2, #28]
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	61d3      	str	r3, [r2, #28]
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	20000178 	.word	0x20000178

08000af0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_FLASH_Unlock+0x2c>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000af8:	d00b      	beq.n	8000b12 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_FLASH_Unlock+0x2c>)
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_FLASH_Unlock+0x30>)
 8000afe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b00:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000b04:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000b0c:	d103      	bne.n	8000b16 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000b0e:	2000      	movs	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	2000      	movs	r0, #0
 8000b14:	4770      	bx	lr
      status = HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000
 8000b20:	45670123 	.word	0x45670123

08000b24 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b24:	4a03      	ldr	r2, [pc, #12]	@ (8000b34 <HAL_FLASH_Lock+0x10>)
 8000b26:	6913      	ldr	r3, [r2, #16]
 8000b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b2c:	6113      	str	r3, [r2, #16]
}
 8000b2e:	2000      	movs	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <FLASH_WaitForLastOperation>:
{
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ff0e 	bl	800095c <HAL_GetTick>
 8000b40:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f013 0f01 	tst.w	r3, #1
 8000b4a:	d00a      	beq.n	8000b62 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000b4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b50:	d0f7      	beq.n	8000b42 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b52:	b124      	cbz	r4, 8000b5e <FLASH_WaitForLastOperation+0x26>
 8000b54:	f7ff ff02 	bl	800095c <HAL_GetTick>
 8000b58:	1b40      	subs	r0, r0, r5
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	d9f1      	bls.n	8000b42 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000b5e:	2003      	movs	r0, #3
 8000b60:	e01b      	b.n	8000b9a <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f013 0f20 	tst.w	r3, #32
 8000b6a:	d002      	beq.n	8000b72 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b6e:	2220      	movs	r2, #32
 8000b70:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f013 0f10 	tst.w	r3, #16
 8000b7a:	d10b      	bne.n	8000b94 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b80:	f013 0f01 	tst.w	r3, #1
 8000b84:	d106      	bne.n	8000b94 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <FLASH_WaitForLastOperation+0x64>)
 8000b88:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b8a:	f013 0f04 	tst.w	r3, #4
 8000b8e:	d101      	bne.n	8000b94 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000b90:	2000      	movs	r0, #0
 8000b92:	e002      	b.n	8000b9a <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000b94:	f7ff ff74 	bl	8000a80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
}
 8000b9a:	bd38      	pop	{r3, r4, r5, pc}
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_FLASH_Program>:
{
 8000ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba4:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <HAL_FLASH_Program+0x98>)
 8000ba8:	7e1b      	ldrb	r3, [r3, #24]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d041      	beq.n	8000c32 <HAL_FLASH_Program+0x92>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	460f      	mov	r7, r1
 8000bb2:	4690      	mov	r8, r2
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <HAL_FLASH_Program+0x98>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bba:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000bbe:	f7ff ffbb 	bl	8000b38 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	bb78      	cbnz	r0, 8000c26 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bc6:	2c01      	cmp	r4, #1
 8000bc8:	d008      	beq.n	8000bdc <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000bca:	2c02      	cmp	r4, #2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8000bce:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000bd2:	461c      	mov	r4, r3
 8000bd4:	e007      	b.n	8000be6 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8000bd6:	f04f 0902 	mov.w	r9, #2
 8000bda:	e7fa      	b.n	8000bd2 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000bdc:	f04f 0901 	mov.w	r9, #1
 8000be0:	e7f7      	b.n	8000bd2 <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8000be2:	3401      	adds	r4, #1
 8000be4:	b2e4      	uxtb	r4, r4
 8000be6:	454c      	cmp	r4, r9
 8000be8:	d21d      	bcs.n	8000c26 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bea:	0121      	lsls	r1, r4, #4
 8000bec:	f1c1 0220 	rsb	r2, r1, #32
 8000bf0:	f1a1 0320 	sub.w	r3, r1, #32
 8000bf4:	fa28 f101 	lsr.w	r1, r8, r1
 8000bf8:	fa06 f202 	lsl.w	r2, r6, r2
 8000bfc:	4311      	orrs	r1, r2
 8000bfe:	fa26 f303 	lsr.w	r3, r6, r3
 8000c02:	4319      	orrs	r1, r3
 8000c04:	b289      	uxth	r1, r1
 8000c06:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000c0a:	f7ff ff2b 	bl	8000a64 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c0e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c12:	f7ff ff91 	bl	8000b38 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_FLASH_Program+0x9c>)
 8000c18:	691d      	ldr	r5, [r3, #16]
 8000c1a:	f025 0501 	bic.w	r5, r5, #1
 8000c1e:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000c20:	4603      	mov	r3, r0
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d0dd      	beq.n	8000be2 <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_FLASH_Program+0x98>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	7611      	strb	r1, [r2, #24]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000c32:	2302      	movs	r3, #2
 8000c34:	e7fa      	b.n	8000c2c <HAL_FLASH_Program+0x8c>
 8000c36:	bf00      	nop
 8000c38:	20000178 	.word	0x20000178
 8000c3c:	40022000 	.word	0x40022000

08000c40 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <FLASH_MassErase+0x1c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <FLASH_MassErase+0x20>)
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	f042 0204 	orr.w	r2, r2, #4
 8000c4e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c56:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000178 	.word	0x20000178
 8000c60:	40022000 	.word	0x40022000

08000c64 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <FLASH_PageErase+0x1c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <FLASH_PageErase+0x20>)
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	f042 0202 	orr.w	r2, r2, #2
 8000c72:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c74:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c7c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c7e:	4770      	bx	lr
 8000c80:	20000178 	.word	0x20000178
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_FLASHEx_Erase+0x9c>)
 8000c8a:	7e1b      	ldrb	r3, [r3, #24]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d046      	beq.n	8000d1e <HAL_FLASHEx_Erase+0x96>
{
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	4605      	mov	r5, r0
 8000c94:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8000c96:	4b23      	ldr	r3, [pc, #140]	@ (8000d24 <HAL_FLASHEx_Erase+0x9c>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c9c:	6803      	ldr	r3, [r0, #0]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d020      	beq.n	8000ce4 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ca2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ca6:	f7ff ff47 	bl	8000b38 <FLASH_WaitForLastOperation>
 8000caa:	bb90      	cbnz	r0, 8000d12 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000cb2:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cb4:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000cb6:	68ea      	ldr	r2, [r5, #12]
 8000cb8:	68ab      	ldr	r3, [r5, #8]
 8000cba:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d928      	bls.n	8000d14 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff ffce 	bl	8000c64 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ccc:	f7ff ff34 	bl	8000b38 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cd0:	4a15      	ldr	r2, [pc, #84]	@ (8000d28 <HAL_FLASHEx_Erase+0xa0>)
 8000cd2:	6913      	ldr	r3, [r2, #16]
 8000cd4:	f023 0302 	bic.w	r3, r3, #2
 8000cd8:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000cda:	4601      	mov	r1, r0
 8000cdc:	b9b8      	cbnz	r0, 8000d0e <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8000cde:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000ce2:	e7e8      	b.n	8000cb6 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ce4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ce8:	f7ff ff26 	bl	8000b38 <FLASH_WaitForLastOperation>
 8000cec:	b108      	cbz	r0, 8000cf2 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cee:	2101      	movs	r1, #1
 8000cf0:	e010      	b.n	8000d14 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff ffa4 	bl	8000c40 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cf8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000cfc:	f7ff ff1c 	bl	8000b38 <FLASH_WaitForLastOperation>
 8000d00:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000d02:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <HAL_FLASHEx_Erase+0xa0>)
 8000d04:	6913      	ldr	r3, [r2, #16]
 8000d06:	f023 0304 	bic.w	r3, r3, #4
 8000d0a:	6113      	str	r3, [r2, #16]
 8000d0c:	e002      	b.n	8000d14 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8000d0e:	6034      	str	r4, [r6, #0]
            break;
 8000d10:	e000      	b.n	8000d14 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d12:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_FLASHEx_Erase+0x9c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	761a      	strb	r2, [r3, #24]
}
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000d1e:	2102      	movs	r1, #2
}
 8000d20:	4608      	mov	r0, r1
 8000d22:	4770      	bx	lr
 8000d24:	20000178 	.word	0x20000178
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d30:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000d32:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d34:	e0a2      	b.n	8000e7c <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	4d7e      	ldr	r5, [pc, #504]	@ (8000f30 <HAL_GPIO_Init+0x204>)
 8000d38:	42ab      	cmp	r3, r5
 8000d3a:	d010      	beq.n	8000d5e <HAL_GPIO_Init+0x32>
 8000d3c:	d907      	bls.n	8000d4e <HAL_GPIO_Init+0x22>
 8000d3e:	4d7d      	ldr	r5, [pc, #500]	@ (8000f34 <HAL_GPIO_Init+0x208>)
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d00c      	beq.n	8000d5e <HAL_GPIO_Init+0x32>
 8000d44:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d008      	beq.n	8000d5e <HAL_GPIO_Init+0x32>
 8000d4c:	e013      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
 8000d4e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x32>
 8000d56:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8000d5a:	42ab      	cmp	r3, r5
 8000d5c:	d107      	bne.n	8000d6e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d5e:	688b      	ldr	r3, [r1, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d055      	beq.n	8000e10 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d04e      	beq.n	8000e06 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000d68:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6a:	2408      	movs	r4, #8
 8000d6c:	e003      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d6e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000d72:	42ab      	cmp	r3, r5
 8000d74:	d0f3      	beq.n	8000d5e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d76:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000d7a:	d84b      	bhi.n	8000e14 <HAL_GPIO_Init+0xe8>
 8000d7c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d7e:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d82:	6833      	ldr	r3, [r6, #0]
 8000d84:	250f      	movs	r5, #15
 8000d86:	4095      	lsls	r5, r2
 8000d88:	ea23 0305 	bic.w	r3, r3, r5
 8000d8c:	fa04 f202 	lsl.w	r2, r4, r2
 8000d90:	4313      	orrs	r3, r2
 8000d92:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d94:	684b      	ldr	r3, [r1, #4]
 8000d96:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000d9a:	d06d      	beq.n	8000e78 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9c:	4b66      	ldr	r3, [pc, #408]	@ (8000f38 <HAL_GPIO_Init+0x20c>)
 8000d9e:	699a      	ldr	r2, [r3, #24]
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	619a      	str	r2, [r3, #24]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000db0:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000db4:	1c95      	adds	r5, r2, #2
 8000db6:	4b61      	ldr	r3, [pc, #388]	@ (8000f3c <HAL_GPIO_Init+0x210>)
 8000db8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dbc:	f00c 0503 	and.w	r5, ip, #3
 8000dc0:	00ad      	lsls	r5, r5, #2
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	40ab      	lsls	r3, r5
 8000dc6:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dca:	4b5d      	ldr	r3, [pc, #372]	@ (8000f40 <HAL_GPIO_Init+0x214>)
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d028      	beq.n	8000e22 <HAL_GPIO_Init+0xf6>
 8000dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	f000 808d 	beq.w	8000ef4 <HAL_GPIO_Init+0x1c8>
 8000dda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000dde:	4298      	cmp	r0, r3
 8000de0:	f000 808a 	beq.w	8000ef8 <HAL_GPIO_Init+0x1cc>
 8000de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d018      	beq.n	8000e1e <HAL_GPIO_Init+0xf2>
 8000dec:	2304      	movs	r3, #4
 8000dee:	e019      	b.n	8000e24 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df0:	68cc      	ldr	r4, [r1, #12]
          break;
 8000df2:	e7c0      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df4:	68cc      	ldr	r4, [r1, #12]
 8000df6:	3404      	adds	r4, #4
          break;
 8000df8:	e7bd      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfa:	68cc      	ldr	r4, [r1, #12]
 8000dfc:	3408      	adds	r4, #8
          break;
 8000dfe:	e7ba      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e00:	68cc      	ldr	r4, [r1, #12]
 8000e02:	340c      	adds	r4, #12
          break;
 8000e04:	e7b7      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000e06:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2408      	movs	r4, #8
 8000e0a:	e7b4      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	e7b2      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e10:	2404      	movs	r4, #4
 8000e12:	e7b0      	b.n	8000d76 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e14:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e16:	f1ac 0208 	sub.w	r2, ip, #8
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	e7b1      	b.n	8000d82 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0xf8>
 8000e22:	2300      	movs	r3, #0
 8000e24:	40ab      	lsls	r3, r5
 8000e26:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000e28:	3202      	adds	r2, #2
 8000e2a:	4d44      	ldr	r5, [pc, #272]	@ (8000f3c <HAL_GPIO_Init+0x210>)
 8000e2c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e30:	684b      	ldr	r3, [r1, #4]
 8000e32:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000e36:	d061      	beq.n	8000efc <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e38:	4a42      	ldr	r2, [pc, #264]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	ea43 030e 	orr.w	r3, r3, lr
 8000e40:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e42:	684b      	ldr	r3, [r1, #4]
 8000e44:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e48:	d05e      	beq.n	8000f08 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000e4c:	6853      	ldr	r3, [r2, #4]
 8000e4e:	ea43 030e 	orr.w	r3, r3, lr
 8000e52:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e54:	684b      	ldr	r3, [r1, #4]
 8000e56:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000e5a:	d05b      	beq.n	8000f14 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4a39      	ldr	r2, [pc, #228]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000e5e:	6893      	ldr	r3, [r2, #8]
 8000e60:	ea43 030e 	orr.w	r3, r3, lr
 8000e64:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e66:	684b      	ldr	r3, [r1, #4]
 8000e68:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000e6c:	d058      	beq.n	8000f20 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e6e:	4a35      	ldr	r2, [pc, #212]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000e70:	68d3      	ldr	r3, [r2, #12]
 8000e72:	ea43 030e 	orr.w	r3, r3, lr
 8000e76:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000e78:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	680b      	ldr	r3, [r1, #0]
 8000e7e:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000e82:	d053      	beq.n	8000f2c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000e8e:	ea32 0303 	bics.w	r3, r2, r3
 8000e92:	d1f1      	bne.n	8000e78 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8000e94:	684b      	ldr	r3, [r1, #4]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	f63f af4d 	bhi.w	8000d36 <HAL_GPIO_Init+0xa>
 8000e9c:	2b12      	cmp	r3, #18
 8000e9e:	f63f af6a 	bhi.w	8000d76 <HAL_GPIO_Init+0x4a>
 8000ea2:	a501      	add	r5, pc, #4	@ (adr r5, 8000ea8 <HAL_GPIO_Init+0x17c>)
 8000ea4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000ea8:	08000d5f 	.word	0x08000d5f
 8000eac:	08000df1 	.word	0x08000df1
 8000eb0:	08000dfb 	.word	0x08000dfb
 8000eb4:	08000e0d 	.word	0x08000e0d
 8000eb8:	08000d77 	.word	0x08000d77
 8000ebc:	08000d77 	.word	0x08000d77
 8000ec0:	08000d77 	.word	0x08000d77
 8000ec4:	08000d77 	.word	0x08000d77
 8000ec8:	08000d77 	.word	0x08000d77
 8000ecc:	08000d77 	.word	0x08000d77
 8000ed0:	08000d77 	.word	0x08000d77
 8000ed4:	08000d77 	.word	0x08000d77
 8000ed8:	08000d77 	.word	0x08000d77
 8000edc:	08000d77 	.word	0x08000d77
 8000ee0:	08000d77 	.word	0x08000d77
 8000ee4:	08000d77 	.word	0x08000d77
 8000ee8:	08000d77 	.word	0x08000d77
 8000eec:	08000df5 	.word	0x08000df5
 8000ef0:	08000e01 	.word	0x08000e01
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e795      	b.n	8000e24 <HAL_GPIO_Init+0xf8>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e793      	b.n	8000e24 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	ea23 030e 	bic.w	r3, r3, lr
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e79c      	b.n	8000e42 <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000f0a:	6853      	ldr	r3, [r2, #4]
 8000f0c:	ea23 030e 	bic.w	r3, r3, lr
 8000f10:	6053      	str	r3, [r2, #4]
 8000f12:	e79f      	b.n	8000e54 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000f16:	6893      	ldr	r3, [r2, #8]
 8000f18:	ea23 030e 	bic.w	r3, r3, lr
 8000f1c:	6093      	str	r3, [r2, #8]
 8000f1e:	e7a2      	b.n	8000e66 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f20:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <HAL_GPIO_Init+0x218>)
 8000f22:	68d3      	ldr	r3, [r2, #12]
 8000f24:	ea23 030e 	bic.w	r3, r3, lr
 8000f28:	60d3      	str	r3, [r2, #12]
 8000f2a:	e7a5      	b.n	8000e78 <HAL_GPIO_Init+0x14c>
  }
}
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	10220000 	.word	0x10220000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f48:	b10a      	cbz	r2, 8000f4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	6101      	str	r1, [r0, #16]
 8000f4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4e:	0409      	lsls	r1, r1, #16
 8000f50:	6101      	str	r1, [r0, #16]
  }
}
 8000f52:	4770      	bx	lr

08000f54 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f54:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f56:	ea01 0203 	and.w	r2, r1, r3
 8000f5a:	ea21 0103 	bic.w	r1, r1, r3
 8000f5e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f62:	6101      	str	r1, [r0, #16]
}
 8000f64:	4770      	bx	lr
	...

08000f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f68:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <RCC_Delay+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <RCC_Delay+0x28>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0a5b      	lsrs	r3, r3, #9
 8000f76:	fb00 f303 	mul.w	r3, r0, r3
 8000f7a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f7c:	bf00      	nop
  }
  while (Delay --);
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	1e5a      	subs	r2, r3, #1
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f9      	bne.n	8000f7c <RCC_Delay+0x14>
}
 8000f88:	b002      	add	sp, #8
 8000f8a:	4770      	bx	lr
 8000f8c:	20000060 	.word	0x20000060
 8000f90:	10624dd3 	.word	0x10624dd3

08000f94 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f000 81f1 	beq.w	800137c <HAL_RCC_OscConfig+0x3e8>
{
 8000f9a:	b570      	push	{r4, r5, r6, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	f013 0f01 	tst.w	r3, #1
 8000fa6:	d02c      	beq.n	8001002 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa8:	4b99      	ldr	r3, [pc, #612]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d01d      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb4:	4b96      	ldr	r3, [pc, #600]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d012      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc6:	d041      	beq.n	800104c <HAL_RCC_OscConfig+0xb8>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d155      	bne.n	8001078 <HAL_RCC_OscConfig+0xe4>
 8000fcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000fd0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	e037      	b.n	8001056 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000fee:	d0e7      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	4b87      	ldr	r3, [pc, #540]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ff8:	d003      	beq.n	8001002 <HAL_RCC_OscConfig+0x6e>
 8000ffa:	6863      	ldr	r3, [r4, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 81bf 	beq.w	8001380 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	f013 0f02 	tst.w	r3, #2
 8001008:	d075      	beq.n	80010f6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800100a:	4b81      	ldr	r3, [pc, #516]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f013 0f0c 	tst.w	r3, #12
 8001012:	d05f      	beq.n	80010d4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001014:	4b7e      	ldr	r3, [pc, #504]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d054      	beq.n	80010ca <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001020:	6923      	ldr	r3, [r4, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 808a 	beq.w	800113c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001028:	4b7a      	ldr	r3, [pc, #488]	@ (8001214 <HAL_RCC_OscConfig+0x280>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800102e:	f7ff fc95 	bl	800095c <HAL_GetTick>
 8001032:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	4b76      	ldr	r3, [pc, #472]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f013 0f02 	tst.w	r3, #2
 800103c:	d175      	bne.n	800112a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc8d 	bl	800095c <HAL_GetTick>
 8001042:	1b40      	subs	r0, r0, r5
 8001044:	2802      	cmp	r0, #2
 8001046:	d9f5      	bls.n	8001034 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001048:	2003      	movs	r0, #3
 800104a:	e19e      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	4a70      	ldr	r2, [pc, #448]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001054:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	b343      	cbz	r3, 80010ac <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800105a:	f7ff fc7f 	bl	800095c <HAL_GetTick>
 800105e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001060:	4b6b      	ldr	r3, [pc, #428]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001068:	d1cb      	bne.n	8001002 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106a:	f7ff fc77 	bl	800095c <HAL_GetTick>
 800106e:	1b40      	subs	r0, r0, r5
 8001070:	2864      	cmp	r0, #100	@ 0x64
 8001072:	d9f5      	bls.n	8001060 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001074:	2003      	movs	r0, #3
 8001076:	e188      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800107c:	d009      	beq.n	8001092 <HAL_RCC_OscConfig+0xfe>
 800107e:	4b64      	ldr	r3, [pc, #400]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e7e1      	b.n	8001056 <HAL_RCC_OscConfig+0xc2>
 8001092:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001096:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e7d4      	b.n	8001056 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc56 	bl	800095c <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b57      	ldr	r3, [pc, #348]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80010ba:	d0a2      	beq.n	8001002 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fc4e 	bl	800095c <HAL_GetTick>
 80010c0:	1b40      	subs	r0, r0, r5
 80010c2:	2864      	cmp	r0, #100	@ 0x64
 80010c4:	d9f5      	bls.n	80010b2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80010c6:	2003      	movs	r0, #3
 80010c8:	e15f      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ca:	4b51      	ldr	r3, [pc, #324]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80010d2:	d1a5      	bne.n	8001020 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f013 0f02 	tst.w	r3, #2
 80010dc:	d003      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 814f 	bne.w	8001384 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80010ee:	6961      	ldr	r1, [r4, #20]
 80010f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010f4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	f013 0f08 	tst.w	r3, #8
 80010fc:	d033      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fe:	69a3      	ldr	r3, [r4, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05c      	beq.n	80011be <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001104:	4b43      	ldr	r3, [pc, #268]	@ (8001214 <HAL_RCC_OscConfig+0x280>)
 8001106:	2201      	movs	r2, #1
 8001108:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800110c:	f7ff fc26 	bl	800095c <HAL_GetTick>
 8001110:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001112:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	f013 0f02 	tst.w	r3, #2
 800111a:	d121      	bne.n	8001160 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc1e 	bl	800095c <HAL_GetTick>
 8001120:	1b40      	subs	r0, r0, r5
 8001122:	2802      	cmp	r0, #2
 8001124:	d9f5      	bls.n	8001112 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e12f      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4a39      	ldr	r2, [pc, #228]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001132:	6961      	ldr	r1, [r4, #20]
 8001134:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e7dc      	b.n	80010f6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800113c:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <HAL_RCC_OscConfig+0x280>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001142:	f7ff fc0b 	bl	800095c <HAL_GetTick>
 8001146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001148:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f013 0f02 	tst.w	r3, #2
 8001150:	d0d1      	beq.n	80010f6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc03 	bl	800095c <HAL_GetTick>
 8001156:	1b40      	subs	r0, r0, r5
 8001158:	2802      	cmp	r0, #2
 800115a:	d9f5      	bls.n	8001148 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e114      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff ff01 	bl	8000f68 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	f013 0f04 	tst.w	r3, #4
 800116c:	f000 8096 	beq.w	800129c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001178:	d134      	bne.n	80011e4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 800117c:	69da      	ldr	r2, [r3, #28]
 800117e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001182:	61da      	str	r2, [r3, #28]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800118e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <HAL_RCC_OscConfig+0x284>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001198:	d026      	beq.n	80011e8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	68e3      	ldr	r3, [r4, #12]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d03d      	beq.n	800121c <HAL_RCC_OscConfig+0x288>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d153      	bne.n	800124c <HAL_RCC_OscConfig+0x2b8>
 80011a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011a8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	f022 0204 	bic.w	r2, r2, #4
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	e033      	b.n	8001226 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_RCC_OscConfig+0x280>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80011c6:	f7ff fbc9 	bl	800095c <HAL_GetTick>
 80011ca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <HAL_RCC_OscConfig+0x27c>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	f013 0f02 	tst.w	r3, #2
 80011d4:	d0c7      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fbc1 	bl	800095c <HAL_GetTick>
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f5      	bls.n	80011cc <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80011e0:	2003      	movs	r0, #3
 80011e2:	e0d2      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80011e4:	2500      	movs	r5, #0
 80011e6:	e7d3      	b.n	8001190 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_RCC_OscConfig+0x284>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbb3 	bl	800095c <HAL_GetTick>
 80011f6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_RCC_OscConfig+0x284>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001200:	d1cb      	bne.n	800119a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fbab 	bl	800095c <HAL_GetTick>
 8001206:	1b80      	subs	r0, r0, r6
 8001208:	2864      	cmp	r0, #100	@ 0x64
 800120a:	d9f5      	bls.n	80011f8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	e0bc      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
 8001210:	40021000 	.word	0x40021000
 8001214:	42420000 	.word	0x42420000
 8001218:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	4a5f      	ldr	r2, [pc, #380]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 800121e:	6a13      	ldr	r3, [r2, #32]
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001226:	68e3      	ldr	r3, [r4, #12]
 8001228:	b333      	cbz	r3, 8001278 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800122a:	f7ff fb97 	bl	800095c <HAL_GetTick>
 800122e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	4b5a      	ldr	r3, [pc, #360]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f013 0f02 	tst.w	r3, #2
 8001238:	d12f      	bne.n	800129a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fb8f 	bl	800095c <HAL_GetTick>
 800123e:	1b80      	subs	r0, r0, r6
 8001240:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001244:	4298      	cmp	r0, r3
 8001246:	d9f3      	bls.n	8001230 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001248:	2003      	movs	r0, #3
 800124a:	e09e      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	2b05      	cmp	r3, #5
 800124e:	d009      	beq.n	8001264 <HAL_RCC_OscConfig+0x2d0>
 8001250:	4b52      	ldr	r3, [pc, #328]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	621a      	str	r2, [r3, #32]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	f022 0204 	bic.w	r2, r2, #4
 8001260:	621a      	str	r2, [r3, #32]
 8001262:	e7e0      	b.n	8001226 <HAL_RCC_OscConfig+0x292>
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	f042 0204 	orr.w	r2, r2, #4
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	621a      	str	r2, [r3, #32]
 8001276:	e7d6      	b.n	8001226 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001278:	f7ff fb70 	bl	800095c <HAL_GetTick>
 800127c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	f013 0f02 	tst.w	r3, #2
 8001286:	d008      	beq.n	800129a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fb68 	bl	800095c <HAL_GetTick>
 800128c:	1b80      	subs	r0, r0, r6
 800128e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001292:	4298      	cmp	r0, r3
 8001294:	d9f3      	bls.n	800127e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001296:	2003      	movs	r0, #3
 8001298:	e077      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800129a:	b9e5      	cbnz	r5, 80012d6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129c:	69e3      	ldr	r3, [r4, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d072      	beq.n	8001388 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a2:	4a3e      	ldr	r2, [pc, #248]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 80012a4:	6852      	ldr	r2, [r2, #4]
 80012a6:	f002 020c 	and.w	r2, r2, #12
 80012aa:	2a08      	cmp	r2, #8
 80012ac:	d056      	beq.n	800135c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d017      	beq.n	80012e2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80012b2:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <HAL_RCC_OscConfig+0x40c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012b8:	f7ff fb50 	bl	800095c <HAL_GetTick>
 80012bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	4b37      	ldr	r3, [pc, #220]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012c6:	d047      	beq.n	8001358 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fb48 	bl	800095c <HAL_GetTick>
 80012cc:	1b00      	subs	r0, r0, r4
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f5      	bls.n	80012be <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80012d2:	2003      	movs	r0, #3
 80012d4:	e059      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d6:	4a31      	ldr	r2, [pc, #196]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 80012d8:	69d3      	ldr	r3, [r2, #28]
 80012da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012de:	61d3      	str	r3, [r2, #28]
 80012e0:	e7dc      	b.n	800129c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <HAL_RCC_OscConfig+0x40c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb38 	bl	800095c <HAL_GetTick>
 80012ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012f6:	d006      	beq.n	8001306 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb30 	bl	800095c <HAL_GetTick>
 80012fc:	1b40      	subs	r0, r0, r5
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f5      	bls.n	80012ee <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
 8001304:	e041      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001306:	6a23      	ldr	r3, [r4, #32]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d01a      	beq.n	8001344 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130e:	4923      	ldr	r1, [pc, #140]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001310:	684b      	ldr	r3, [r1, #4]
 8001312:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8001316:	6a22      	ldr	r2, [r4, #32]
 8001318:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800131a:	4302      	orrs	r2, r0
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_RCC_OscConfig+0x40c>)
 8001322:	2201      	movs	r2, #1
 8001324:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001326:	f7ff fb19 	bl	800095c <HAL_GetTick>
 800132a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001334:	d10e      	bne.n	8001354 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fb11 	bl	800095c <HAL_GetTick>
 800133a:	1b00      	subs	r0, r0, r4
 800133c:	2802      	cmp	r0, #2
 800133e:	d9f5      	bls.n	800132c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001340:	2003      	movs	r0, #3
 8001342:	e022      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001344:	4a15      	ldr	r2, [pc, #84]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001346:	6853      	ldr	r3, [r2, #4]
 8001348:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800134c:	68a1      	ldr	r1, [r4, #8]
 800134e:	430b      	orrs	r3, r1
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	e7dc      	b.n	800130e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
 8001356:	e018      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
 8001358:	2000      	movs	r0, #0
 800135a:	e016      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135c:	2b01      	cmp	r3, #1
 800135e:	d016      	beq.n	800138e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_RCC_OscConfig+0x408>)
 8001362:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001368:	6a22      	ldr	r2, [r4, #32]
 800136a:	4291      	cmp	r1, r2
 800136c:	d111      	bne.n	8001392 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800136e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001372:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	4293      	cmp	r3, r2
 8001376:	d10e      	bne.n	8001396 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001378:	2000      	movs	r0, #0
 800137a:	e006      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
}
 800137e:	4770      	bx	lr
        return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
 8001382:	e002      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
}
 800138a:	b002      	add	sp, #8
 800138c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	e7fb      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
 8001394:	e7f9      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
 8001396:	2001      	movs	r0, #1
 8001398:	e7f7      	b.n	800138a <HAL_RCC_OscConfig+0x3f6>
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	42420000 	.word	0x42420000

080013a4 <HAL_RCC_GetSysClockFreq>:
{
 80013a4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x60>)
 80013a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013aa:	f10d 0c18 	add.w	ip, sp, #24
 80013ae:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b2:	f240 2301 	movw	r3, #513	@ 0x201
 80013b6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_RCC_GetSysClockFreq+0x64>)
 80013bc:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013be:	f003 020c 	and.w	r2, r3, #12
 80013c2:	2a08      	cmp	r2, #8
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80013c6:	4811      	ldr	r0, [pc, #68]	@ (800140c <HAL_RCC_GetSysClockFreq+0x68>)
}
 80013c8:	b006      	add	sp, #24
 80013ca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013d0:	3218      	adds	r2, #24
 80013d2:	446a      	add	r2, sp
 80013d4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80013dc:	d00d      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_RCC_GetSysClockFreq+0x64>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80013e6:	3318      	adds	r3, #24
 80013e8:	446b      	add	r3, sp
 80013ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_RCC_GetSysClockFreq+0x68>)
 80013f0:	fb02 f000 	mul.w	r0, r2, r0
 80013f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013f8:	e7e6      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013fa:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_RCC_GetSysClockFreq+0x6c>)
 80013fc:	fb03 f000 	mul.w	r0, r3, r0
 8001400:	e7e2      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x24>
 8001402:	bf00      	nop
 8001404:	08003c4c 	.word	0x08003c4c
 8001408:	40021000 	.word	0x40021000
 800140c:	007a1200 	.word	0x007a1200
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001414:	2800      	cmp	r0, #0
 8001416:	f000 80a0 	beq.w	800155a <HAL_RCC_ClockConfig+0x146>
{
 800141a:	b570      	push	{r4, r5, r6, lr}
 800141c:	460d      	mov	r5, r1
 800141e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b52      	ldr	r3, [pc, #328]	@ (800156c <HAL_RCC_ClockConfig+0x158>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	428b      	cmp	r3, r1
 800142a:	d20b      	bcs.n	8001444 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142c:	4a4f      	ldr	r2, [pc, #316]	@ (800156c <HAL_RCC_ClockConfig+0x158>)
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f023 0307 	bic.w	r3, r3, #7
 8001434:	430b      	orrs	r3, r1
 8001436:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	428b      	cmp	r3, r1
 8001440:	f040 808d 	bne.w	800155e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	f013 0f02 	tst.w	r3, #2
 800144a:	d017      	beq.n	800147c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	f013 0f04 	tst.w	r3, #4
 8001450:	d004      	beq.n	800145c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001452:	4a47      	ldr	r2, [pc, #284]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 8001454:	6853      	ldr	r3, [r2, #4]
 8001456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800145a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	f013 0f08 	tst.w	r3, #8
 8001462:	d004      	beq.n	800146e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	4a42      	ldr	r2, [pc, #264]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 8001466:	6853      	ldr	r3, [r2, #4]
 8001468:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800146c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146e:	4a40      	ldr	r2, [pc, #256]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 8001470:	6853      	ldr	r3, [r2, #4]
 8001472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001476:	68a1      	ldr	r1, [r4, #8]
 8001478:	430b      	orrs	r3, r1
 800147a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	f013 0f01 	tst.w	r3, #1
 8001482:	d031      	beq.n	80014e8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d020      	beq.n	80014cc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800148a:	2b02      	cmp	r3, #2
 800148c:	d025      	beq.n	80014da <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	4a38      	ldr	r2, [pc, #224]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	f012 0f02 	tst.w	r2, #2
 8001496:	d064      	beq.n	8001562 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001498:	4935      	ldr	r1, [pc, #212]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 800149a:	684a      	ldr	r2, [r1, #4]
 800149c:	f022 0203 	bic.w	r2, r2, #3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa5a 	bl	800095c <HAL_GetTick>
 80014a8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b31      	ldr	r3, [pc, #196]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	6862      	ldr	r2, [r4, #4]
 80014b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff fa4f 	bl	800095c <HAL_GetTick>
 80014be:	1b80      	subs	r0, r0, r6
 80014c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014c4:	4298      	cmp	r0, r3
 80014c6:	d9f0      	bls.n	80014aa <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80014c8:	2003      	movs	r0, #3
 80014ca:	e045      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014cc:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80014d4:	d1e0      	bne.n	8001498 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e03e      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4a25      	ldr	r2, [pc, #148]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80014e2:	d1d9      	bne.n	8001498 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
 80014e6:	e037      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_RCC_ClockConfig+0x158>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	42ab      	cmp	r3, r5
 80014f2:	d90a      	bls.n	800150a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	4a1d      	ldr	r2, [pc, #116]	@ (800156c <HAL_RCC_ClockConfig+0x158>)
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0307 	bic.w	r3, r3, #7
 80014fc:	432b      	orrs	r3, r5
 80014fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	42ab      	cmp	r3, r5
 8001508:	d12d      	bne.n	8001566 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f013 0f04 	tst.w	r3, #4
 8001510:	d006      	beq.n	8001520 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001512:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 8001514:	6853      	ldr	r3, [r2, #4]
 8001516:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800151a:	68e1      	ldr	r1, [r4, #12]
 800151c:	430b      	orrs	r3, r1
 800151e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f013 0f08 	tst.w	r3, #8
 8001526:	d007      	beq.n	8001538 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 800152a:	6853      	ldr	r3, [r2, #4]
 800152c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001530:	6921      	ldr	r1, [r4, #16]
 8001532:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001536:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001538:	f7ff ff34 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_RCC_ClockConfig+0x15c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_RCC_ClockConfig+0x160>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	40d8      	lsrs	r0, r3
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_ClockConfig+0x164>)
 800154c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_ClockConfig+0x168>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f7ff f9bf 	bl	80008d4 <HAL_InitTick>
  return HAL_OK;
 8001556:	2000      	movs	r0, #0
}
 8001558:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
}
 800155c:	4770      	bx	lr
    return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
 8001560:	e7fa      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e7f8      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e7f6      	b.n	8001558 <HAL_RCC_ClockConfig+0x144>
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000
 8001570:	40021000 	.word	0x40021000
 8001574:	08003c3c 	.word	0x08003c3c
 8001578:	20000060 	.word	0x20000060
 800157c:	20000068 	.word	0x20000068

08001580 <HAL_RCC_GetHCLKFreq>:
}
 8001580:	4b01      	ldr	r3, [pc, #4]	@ (8001588 <HAL_RCC_GetHCLKFreq+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000060 	.word	0x20000060

0800158c <HAL_RCC_GetPCLK1Freq>:
{
 800158c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800158e:	f7ff fff7 	bl	8001580 <HAL_RCC_GetHCLKFreq>
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800159a:	4a03      	ldr	r2, [pc, #12]	@ (80015a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
}
 800159e:	40d8      	lsrs	r0, r3
 80015a0:	bd08      	pop	{r3, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08003c34 	.word	0x08003c34

080015ac <HAL_RCC_GetPCLK2Freq>:
{
 80015ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ae:	f7ff ffe7 	bl	8001580 <HAL_RCC_GetHCLKFreq>
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015ba:	4a03      	ldr	r2, [pc, #12]	@ (80015c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80015be:	40d8      	lsrs	r0, r3
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08003c34 	.word	0x08003c34

080015cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015cc:	b510      	push	{r4, lr}
 80015ce:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015d0:	6802      	ldr	r2, [r0, #0]
 80015d2:	6913      	ldr	r3, [r2, #16]
 80015d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015d8:	68c1      	ldr	r1, [r0, #12]
 80015da:	430b      	orrs	r3, r1
 80015dc:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015de:	6883      	ldr	r3, [r0, #8]
 80015e0:	6902      	ldr	r2, [r0, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	6942      	ldr	r2, [r0, #20]
 80015e6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80015e8:	6801      	ldr	r1, [r0, #0]
 80015ea:	68cb      	ldr	r3, [r1, #12]
 80015ec:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015f0:	f023 030c 	bic.w	r3, r3, #12
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015f8:	6802      	ldr	r2, [r0, #0]
 80015fa:	6953      	ldr	r3, [r2, #20]
 80015fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001600:	6981      	ldr	r1, [r0, #24]
 8001602:	430b      	orrs	r3, r1
 8001604:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <UART_SetConfig+0x8c>)
 800160a:	429a      	cmp	r2, r3
 800160c:	d020      	beq.n	8001650 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800160e:	f7ff ffbd 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 8001612:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001614:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001618:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fbb2 f2f3 	udiv	r2, r2, r3
 8001624:	480d      	ldr	r0, [pc, #52]	@ (800165c <UART_SetConfig+0x90>)
 8001626:	fba0 3102 	umull	r3, r1, r0, r2
 800162a:	0949      	lsrs	r1, r1, #5
 800162c:	2364      	movs	r3, #100	@ 0x64
 800162e:	fb03 2311 	mls	r3, r3, r1, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	3332      	adds	r3, #50	@ 0x32
 8001636:	fba0 0303 	umull	r0, r3, r0, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001640:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	6821      	ldr	r1, [r4, #0]
 800164a:	4413      	add	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800164e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001650:	f7ff ffac 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001654:	4602      	mov	r2, r0
 8001656:	e7dd      	b.n	8001614 <UART_SetConfig+0x48>
 8001658:	40013800 	.word	0x40013800
 800165c:	51eb851f 	.word	0x51eb851f

08001660 <UART_WaitOnFlagUntilTimeout>:
{
 8001660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001664:	4605      	mov	r5, r0
 8001666:	460f      	mov	r7, r1
 8001668:	4616      	mov	r6, r2
 800166a:	4699      	mov	r9, r3
 800166c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	681c      	ldr	r4, [r3, #0]
 8001674:	ea37 0404 	bics.w	r4, r7, r4
 8001678:	bf0c      	ite	eq
 800167a:	2401      	moveq	r4, #1
 800167c:	2400      	movne	r4, #0
 800167e:	42b4      	cmp	r4, r6
 8001680:	d11f      	bne.n	80016c2 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8001682:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001686:	d0f3      	beq.n	8001670 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001688:	f1b8 0f00 	cmp.w	r8, #0
 800168c:	d005      	beq.n	800169a <UART_WaitOnFlagUntilTimeout+0x3a>
 800168e:	f7ff f965 	bl	800095c <HAL_GetTick>
 8001692:	eba0 0009 	sub.w	r0, r0, r9
 8001696:	4540      	cmp	r0, r8
 8001698:	d9ea      	bls.n	8001670 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800169a:	682a      	ldr	r2, [r5, #0]
 800169c:	68d3      	ldr	r3, [r2, #12]
 800169e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80016a2:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016a4:	682a      	ldr	r2, [r5, #0]
 80016a6:	6953      	ldr	r3, [r2, #20]
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80016ae:	2320      	movs	r3, #32
 80016b0:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80016b4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 80016b8:	2300      	movs	r3, #0
 80016ba:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
 80016c0:	e000      	b.n	80016c4 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
}
 80016c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016c8 <HAL_UART_Init>:
  if (huart == NULL)
 80016c8:	b358      	cbz	r0, 8001722 <HAL_UART_Init+0x5a>
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80016ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80016d2:	b30b      	cbz	r3, 8001718 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80016d4:	2324      	movs	r3, #36	@ 0x24
 80016d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	68d3      	ldr	r3, [r2, #12]
 80016de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80016e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff71 	bl	80015cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	6913      	ldr	r3, [r2, #16]
 80016ee:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80016f2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	6953      	ldr	r3, [r2, #20]
 80016f8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80016fc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	68d3      	ldr	r3, [r2, #12]
 8001702:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001706:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001708:	2000      	movs	r0, #0
 800170a:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800170c:	2320      	movs	r3, #32
 800170e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001712:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8001716:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001718:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 800171c:	f7fe ffea 	bl	80006f4 <HAL_UART_MspInit>
 8001720:	e7d8      	b.n	80016d4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
}
 8001724:	4770      	bx	lr

08001726 <HAL_UART_Transmit>:
{
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800172e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b20      	cmp	r3, #32
 8001736:	d154      	bne.n	80017e2 <HAL_UART_Transmit+0xbc>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800173e:	2900      	cmp	r1, #0
 8001740:	d053      	beq.n	80017ea <HAL_UART_Transmit+0xc4>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d053      	beq.n	80017ee <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001746:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d051      	beq.n	80017f2 <HAL_UART_Transmit+0xcc>
 800174e:	2301      	movs	r3, #1
 8001750:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001758:	2321      	movs	r3, #33	@ 0x21
 800175a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 800175e:	f7ff f8fd 	bl	800095c <HAL_GetTick>
 8001762:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001764:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001768:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800176c:	68a3      	ldr	r3, [r4, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001772:	d005      	beq.n	8001780 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8001774:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001778:	2300      	movs	r3, #0
 800177a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 800177e:	e012      	b.n	80017a6 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001780:	6923      	ldr	r3, [r4, #16]
 8001782:	b113      	cbz	r3, 800178a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001784:	f04f 0800 	mov.w	r8, #0
 8001788:	e7f6      	b.n	8001778 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 800178a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800178c:	2500      	movs	r5, #0
 800178e:	e7f3      	b.n	8001778 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001790:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001794:	6822      	ldr	r2, [r4, #0]
 8001796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800179c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800179e:	b292      	uxth	r2, r2
 80017a0:	3a01      	subs	r2, #1
 80017a2:	b292      	uxth	r2, r2
 80017a4:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80017a6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b173      	cbz	r3, 80017ca <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017ac:	9600      	str	r6, [sp, #0]
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff ff53 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 80017ba:	b9e0      	cbnz	r0, 80017f6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d0e7      	beq.n	8001790 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017c0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017c8:	e7e8      	b.n	800179c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017ca:	9600      	str	r6, [sp, #0]
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	2140      	movs	r1, #64	@ 0x40
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff ff44 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 80017d8:	b978      	cbnz	r0, 80017fa <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80017da:	2320      	movs	r3, #32
 80017dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 80017e0:	e000      	b.n	80017e4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80017e2:	2002      	movs	r0, #2
}
 80017e4:	b002      	add	sp, #8
 80017e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
 80017ec:	e7fa      	b.n	80017e4 <HAL_UART_Transmit+0xbe>
 80017ee:	2001      	movs	r0, #1
 80017f0:	e7f8      	b.n	80017e4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80017f2:	2002      	movs	r0, #2
 80017f4:	e7f6      	b.n	80017e4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80017f6:	2003      	movs	r0, #3
 80017f8:	e7f4      	b.n	80017e4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80017fa:	2003      	movs	r0, #3
 80017fc:	e7f2      	b.n	80017e4 <HAL_UART_Transmit+0xbe>

080017fe <HAL_UART_Receive>:
{
 80017fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001806:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b20      	cmp	r3, #32
 800180e:	d15c      	bne.n	80018ca <HAL_UART_Receive+0xcc>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001816:	2900      	cmp	r1, #0
 8001818:	d05b      	beq.n	80018d2 <HAL_UART_Receive+0xd4>
 800181a:	2a00      	cmp	r2, #0
 800181c:	d05b      	beq.n	80018d6 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 800181e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d059      	beq.n	80018da <HAL_UART_Receive+0xdc>
 8001826:	2301      	movs	r3, #1
 8001828:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182c:	2300      	movs	r3, #0
 800182e:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001830:	2222      	movs	r2, #34	@ 0x22
 8001832:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001836:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001838:	f7ff f890 	bl	800095c <HAL_GetTick>
 800183c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800183e:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001842:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001846:	68a3      	ldr	r3, [r4, #8]
 8001848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800184c:	d005      	beq.n	800185a <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 800184e:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001852:	2300      	movs	r3, #0
 8001854:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->RxXferCount > 0U)
 8001858:	e017      	b.n	800188a <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800185a:	6923      	ldr	r3, [r4, #16]
 800185c:	b113      	cbz	r3, 8001864 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7f6      	b.n	8001852 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8001864:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001866:	2500      	movs	r5, #0
 8001868:	e7f3      	b.n	8001852 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001872:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8001876:	e003      	b.n	8001880 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800187e:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8001880:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8001882:	b292      	uxth	r2, r2
 8001884:	3a01      	subs	r2, #1
 8001886:	b292      	uxth	r2, r2
 8001888:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800188a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800188c:	b29b      	uxth	r3, r3
 800188e:	b1bb      	cbz	r3, 80018c0 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	463b      	mov	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	2120      	movs	r1, #32
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fee1 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 800189e:	b9f0      	cbnz	r0, 80018de <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d0e2      	beq.n	800186a <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80018a4:	68a3      	ldr	r3, [r4, #8]
 80018a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018aa:	d0e5      	beq.n	8001878 <HAL_UART_Receive+0x7a>
 80018ac:	b913      	cbnz	r3, 80018b4 <HAL_UART_Receive+0xb6>
 80018ae:	6923      	ldr	r3, [r4, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0e1      	beq.n	8001878 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018bc:	702b      	strb	r3, [r5, #0]
 80018be:	e7de      	b.n	800187e <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 80018c0:	2320      	movs	r3, #32
 80018c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80018c6:	2000      	movs	r0, #0
 80018c8:	e000      	b.n	80018cc <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 80018ca:	2002      	movs	r0, #2
}
 80018cc:	b002      	add	sp, #8
 80018ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80018d2:	2001      	movs	r0, #1
 80018d4:	e7fa      	b.n	80018cc <HAL_UART_Receive+0xce>
 80018d6:	2001      	movs	r0, #1
 80018d8:	e7f8      	b.n	80018cc <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 80018da:	2002      	movs	r0, #2
 80018dc:	e7f6      	b.n	80018cc <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
 80018e0:	e7f4      	b.n	80018cc <HAL_UART_Receive+0xce>

080018e2 <vli_numDigits>:
{

	wordcount_t i;
	/* Search from the end until we find a non-zero digit. We do it in reverse
	 * because we expect that most digits will be nonzero. */
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80018e2:	3901      	subs	r1, #1
 80018e4:	b249      	sxtb	r1, r1
 80018e6:	e001      	b.n	80018ec <vli_numDigits+0xa>
 80018e8:	3901      	subs	r1, #1
 80018ea:	b249      	sxtb	r1, r1
 80018ec:	2900      	cmp	r1, #0
 80018ee:	db03      	blt.n	80018f8 <vli_numDigits+0x16>
 80018f0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f7      	beq.n	80018e8 <vli_numDigits+0x6>
	}

	return (i + 1);
 80018f8:	1c48      	adds	r0, r1, #1
}
 80018fa:	b240      	sxtb	r0, r0
 80018fc:	4770      	bx	lr

080018fe <uECC_vli_rshift1>:
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
 80018fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
 8001902:	2300      	movs	r3, #0
	while (vli-- > end) {
 8001904:	e007      	b.n	8001916 <uECC_vli_rshift1+0x18>
		uECC_word_t temp = *vli;
 8001906:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
 800190a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800190e:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
 8001912:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
 8001914:	4661      	mov	r1, ip
 8001916:	f1a1 0c04 	sub.w	ip, r1, #4
 800191a:	4281      	cmp	r1, r0
 800191c:	d8f3      	bhi.n	8001906 <uECC_vli_rshift1+0x8>
	}
}
 800191e:	4770      	bx	lr

08001920 <muladd>:

static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,
		   uECC_word_t *r1, uECC_word_t *r2)
{
 8001920:	b470      	push	{r4, r5, r6}
 8001922:	9e03      	ldr	r6, [sp, #12]

	uECC_dword_t p = (uECC_dword_t)a * b;
 8001924:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8001928:	681d      	ldr	r5, [r3, #0]
 800192a:	6814      	ldr	r4, [r2, #0]
	r01 += p;
 800192c:	1904      	adds	r4, r0, r4
 800192e:	eb45 0501 	adc.w	r5, r5, r1
	*r2 += (r01 < p);
 8001932:	4284      	cmp	r4, r0
 8001934:	eb75 0101 	sbcs.w	r1, r5, r1
 8001938:	bf34      	ite	cc
 800193a:	2101      	movcc	r1, #1
 800193c:	2100      	movcs	r1, #0
 800193e:	6830      	ldr	r0, [r6, #0]
 8001940:	4401      	add	r1, r0
 8001942:	6031      	str	r1, [r6, #0]
	*r1 = r01 >> uECC_WORD_BITS;
 8001944:	601d      	str	r5, [r3, #0]
	*r0 = (uECC_word_t)r01;
 8001946:	6014      	str	r4, [r2, #0]

}
 8001948:	bc70      	pop	{r4, r5, r6}
 800194a:	4770      	bx	lr

0800194c <uECC_vli_mult>:

/* Computes result = left * right. Result must be 2 * num_words long. */
static void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,
			  const uECC_word_t *right, wordcount_t num_words)
{
 800194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001950:	b087      	sub	sp, #28
 8001952:	4681      	mov	r9, r0
 8001954:	460e      	mov	r6, r1
 8001956:	4617      	mov	r7, r2
 8001958:	4698      	mov	r8, r3

	uECC_word_t r0 = 0;
 800195a:	2500      	movs	r5, #0
 800195c:	9505      	str	r5, [sp, #20]
	uECC_word_t r1 = 0;
 800195e:	9504      	str	r5, [sp, #16]
	uECC_word_t r2 = 0;
 8001960:	9503      	str	r5, [sp, #12]
	wordcount_t i, k;

	/* Compute each digit of result in sequence, maintaining the carries. */
	for (k = 0; k < num_words; ++k) {
 8001962:	e019      	b.n	8001998 <uECC_vli_mult+0x4c>

		for (i = 0; i <= k; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8001964:	1b29      	subs	r1, r5, r4
 8001966:	ab03      	add	r3, sp, #12
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	ab04      	add	r3, sp, #16
 800196c:	aa05      	add	r2, sp, #20
 800196e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001972:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001976:	f7ff ffd3 	bl	8001920 <muladd>
		for (i = 0; i <= k; ++i) {
 800197a:	3401      	adds	r4, #1
 800197c:	b264      	sxtb	r4, r4
 800197e:	42ac      	cmp	r4, r5
 8001980:	ddf0      	ble.n	8001964 <uECC_vli_mult+0x18>
		}

		result[k] = r0;
 8001982:	9b05      	ldr	r3, [sp, #20]
 8001984:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		r0 = r1;
 8001988:	9b04      	ldr	r3, [sp, #16]
 800198a:	9305      	str	r3, [sp, #20]
		r1 = r2;
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	9304      	str	r3, [sp, #16]
		r2 = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
 8001994:	3501      	adds	r5, #1
 8001996:	b26d      	sxtb	r5, r5
 8001998:	4545      	cmp	r5, r8
 800199a:	da01      	bge.n	80019a0 <uECC_vli_mult+0x54>
		for (i = 0; i <= k; ++i) {
 800199c:	2400      	movs	r4, #0
 800199e:	e7ee      	b.n	800197e <uECC_vli_mult+0x32>
	}

	for (k = num_words; k < num_words * 2 - 1; ++k) {
 80019a0:	46c2      	mov	sl, r8
 80019a2:	e01b      	b.n	80019dc <uECC_vli_mult+0x90>

		for (i = (k + 1) - num_words; i < num_words; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 80019a4:	1b29      	subs	r1, r5, r4
 80019a6:	ab03      	add	r3, sp, #12
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	ab04      	add	r3, sp, #16
 80019ac:	aa05      	add	r2, sp, #20
 80019ae:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80019b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80019b6:	f7ff ffb3 	bl	8001920 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 80019ba:	3401      	adds	r4, #1
 80019bc:	b264      	sxtb	r4, r4
 80019be:	4544      	cmp	r4, r8
 80019c0:	dbf0      	blt.n	80019a4 <uECC_vli_mult+0x58>
		}
		result[k] = r0;
 80019c2:	9b05      	ldr	r3, [sp, #20]
 80019c4:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
		r0 = r1;
 80019c8:	9b04      	ldr	r3, [sp, #16]
 80019ca:	9305      	str	r3, [sp, #20]
		r1 = r2;
 80019cc:	9b03      	ldr	r3, [sp, #12]
 80019ce:	9304      	str	r3, [sp, #16]
		r2 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 80019d4:	f10b 0b01 	add.w	fp, fp, #1
 80019d8:	fa4f fa8b 	sxtb.w	sl, fp
 80019dc:	4655      	mov	r5, sl
 80019de:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	459a      	cmp	sl, r3
 80019e6:	da06      	bge.n	80019f6 <uECC_vli_mult+0xaa>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 80019e8:	fa5f fb8a 	uxtb.w	fp, sl
 80019ec:	ebab 0408 	sub.w	r4, fp, r8
 80019f0:	3401      	adds	r4, #1
 80019f2:	b264      	sxtb	r4, r4
 80019f4:	e7e3      	b.n	80019be <uECC_vli_mult+0x72>
	}
	result[num_words * 2 - 1] = r0;
 80019f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80019fa:	3b04      	subs	r3, #4
 80019fc:	9a05      	ldr	r2, [sp, #20]
 80019fe:	f849 2003 	str.w	r2, [r9, r3]
}
 8001a02:	b007      	add	sp, #28
 8001a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a08 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e004      	b.n	8001a16 <uECC_vli_clear+0xe>
		 vli[i] = 0;
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
 8001a12:	3301      	adds	r3, #1
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	428b      	cmp	r3, r1
 8001a18:	dbf8      	blt.n	8001a0c <uECC_vli_clear+0x4>
}
 8001a1a:	4770      	bx	lr

08001a1c <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
 8001a1c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
 8001a1e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
 8001a20:	428b      	cmp	r3, r1
 8001a22:	da0c      	bge.n	8001a3e <uECC_vli_isZero+0x22>
{
 8001a24:	b410      	push	{r4}
		bits |= vli[i];
 8001a26:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8001a2a:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	428b      	cmp	r3, r1
 8001a32:	dbf8      	blt.n	8001a26 <uECC_vli_isZero+0xa>
}
 8001a34:	fab2 f082 	clz	r0, r2
 8001a38:	0940      	lsrs	r0, r0, #5
 8001a3a:	bc10      	pop	{r4}
 8001a3c:	4770      	bx	lr
 8001a3e:	fab3 f083 	clz	r0, r3
 8001a42:	0940      	lsrs	r0, r0, #5
 8001a44:	4770      	bx	lr

08001a46 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001a46:	114b      	asrs	r3, r1, #5
 8001a48:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8001a4c:	f001 011f 	and.w	r1, r1, #31
 8001a50:	2301      	movs	r3, #1
 8001a52:	408b      	lsls	r3, r1
}
 8001a54:	4018      	ands	r0, r3
 8001a56:	4770      	bx	lr

08001a58 <uECC_vli_numBits>:
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
 8001a5c:	f7ff ff41 	bl	80018e2 <vli_numDigits>
	if (num_digits == 0) {
 8001a60:	b190      	cbz	r0, 8001a88 <uECC_vli_numBits+0x30>
 8001a62:	4601      	mov	r1, r0
	digit = vli[num_digits - 1];
 8001a64:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
 8001a6e:	2200      	movs	r2, #0
 8001a70:	e001      	b.n	8001a76 <uECC_vli_numBits+0x1e>
		digit >>= 1;
 8001a72:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
 8001a74:	3201      	adds	r2, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1fb      	bne.n	8001a72 <uECC_vli_numBits+0x1a>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8001a7a:	1e48      	subs	r0, r1, #1
 8001a7c:	b280      	uxth	r0, r0
 8001a7e:	0140      	lsls	r0, r0, #5
 8001a80:	b280      	uxth	r0, r0
 8001a82:	4410      	add	r0, r2
 8001a84:	b200      	sxth	r0, r0
}
 8001a86:	bd10      	pop	{r4, pc}
		return 0;
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e7fc      	b.n	8001a86 <uECC_vli_numBits+0x2e>

08001a8c <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e005      	b.n	8001a9c <uECC_vli_set+0x10>
		dest[i] = src[i];
 8001a90:	f851 c023 	ldr.w	ip, [r1, r3, lsl #2]
 8001a94:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	dbf7      	blt.n	8001a90 <uECC_vli_set+0x4>
}
 8001aa0:	4770      	bx	lr

08001aa2 <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	b252      	sxtb	r2, r2
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	db13      	blt.n	8001ad2 <uECC_vli_cmp_unsafe+0x30>
{
 8001aaa:	b410      	push	{r4}
		if (left[i] > right[i]) {
 8001aac:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001ab0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d807      	bhi.n	8001ac8 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
 8001ab8:	d308      	bcc.n	8001acc <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
 8001aba:	3a01      	subs	r2, #1
 8001abc:	b252      	sxtb	r2, r2
 8001abe:	2a00      	cmp	r2, #0
 8001ac0:	daf4      	bge.n	8001aac <uECC_vli_cmp_unsafe+0xa>
	return 0;
 8001ac2:	2000      	movs	r0, #0
}
 8001ac4:	bc10      	pop	{r4}
 8001ac6:	4770      	bx	lr
			return 1;
 8001ac8:	2001      	movs	r0, #1
 8001aca:	e7fb      	b.n	8001ac4 <uECC_vli_cmp_unsafe+0x22>
			return -1;
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	e7f8      	b.n	8001ac4 <uECC_vli_cmp_unsafe+0x22>
	return 0;
 8001ad2:	2000      	movs	r0, #0
}
 8001ad4:	4770      	bx	lr

08001ad6 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
 8001ada:	f04f 0c00 	mov.w	ip, #0
	for (i = num_words - 1; i >= 0; --i) {
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	db11      	blt.n	8001b06 <uECC_vli_equal+0x30>
{
 8001ae2:	b410      	push	{r4}
		diff |= (left[i] ^ right[i]);
 8001ae4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001ae8:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001aec:	4063      	eors	r3, r4
 8001aee:	ea4c 0c03 	orr.w	ip, ip, r3
	for (i = num_words - 1; i >= 0; --i) {
 8001af2:	3a01      	subs	r2, #1
 8001af4:	b252      	sxtb	r2, r2
 8001af6:	2a00      	cmp	r2, #0
 8001af8:	daf4      	bge.n	8001ae4 <uECC_vli_equal+0xe>
}
 8001afa:	f1bc 0000 	subs.w	r0, ip, #0
 8001afe:	bf18      	it	ne
 8001b00:	2001      	movne	r0, #1
 8001b02:	bc10      	pop	{r4}
 8001b04:	4770      	bx	lr
 8001b06:	f1bc 0000 	subs.w	r0, ip, #0
 8001b0a:	bf18      	it	ne
 8001b0c:	2001      	movne	r0, #1
 8001b0e:	4770      	bx	lr

08001b10 <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
 8001b10:	fb02 f000 	mul.w	r0, r2, r0
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	0952      	lsrs	r2, r2, #5
 8001b1a:	fb01 f202 	mul.w	r2, r1, r2
}
 8001b1e:	4310      	orrs	r0, r2
 8001b20:	4770      	bx	lr

08001b22 <uECC_vli_add>:
{
 8001b22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b26:	4681      	mov	r9, r0
 8001b28:	4688      	mov	r8, r1
 8001b2a:	4617      	mov	r7, r2
 8001b2c:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
 8001b2e:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
 8001b30:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
 8001b32:	e013      	b.n	8001b5c <uECC_vli_add+0x3a>
		uECC_word_t sum = left[i] + right[i] + carry;
 8001b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001b38:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001b3c:	441d      	add	r5, r3
 8001b3e:	440d      	add	r5, r1
		uECC_word_t val = (sum < left[i]);
 8001b40:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
 8001b42:	bf14      	ite	ne
 8001b44:	2201      	movne	r2, #1
 8001b46:	2200      	moveq	r2, #0
 8001b48:	bf8c      	ite	hi
 8001b4a:	2001      	movhi	r0, #1
 8001b4c:	2000      	movls	r0, #0
 8001b4e:	f7ff ffdf 	bl	8001b10 <cond_set>
 8001b52:	4601      	mov	r1, r0
		result[i] = sum;
 8001b54:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
 8001b58:	3401      	adds	r4, #1
 8001b5a:	b264      	sxtb	r4, r4
 8001b5c:	42b4      	cmp	r4, r6
 8001b5e:	dbe9      	blt.n	8001b34 <uECC_vli_add+0x12>
}
 8001b60:	4608      	mov	r0, r1
 8001b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b66 <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))

static void vli_modInv_update(uECC_word_t *uv,
			      const uECC_word_t *mod,
			      wordcount_t num_words)
{
 8001b66:	b570      	push	{r4, r5, r6, lr}
 8001b68:	4605      	mov	r5, r0
 8001b6a:	4614      	mov	r4, r2

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
 8001b6c:	6800      	ldr	r0, [r0, #0]
 8001b6e:	f010 0601 	ands.w	r6, r0, #1
 8001b72:	d10e      	bne.n	8001b92 <vli_modInv_update+0x2c>
		carry = uECC_vli_add(uv, uv, mod, num_words);
	}
	uECC_vli_rshift1(uv, num_words);
 8001b74:	4621      	mov	r1, r4
 8001b76:	4628      	mov	r0, r5
 8001b78:	f7ff fec1 	bl	80018fe <uECC_vli_rshift1>
	if (carry) {
 8001b7c:	b146      	cbz	r6, 8001b90 <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
 8001b7e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8001b82:	3c01      	subs	r4, #1
 8001b84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b8c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	}
}
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
 8001b92:	4613      	mov	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	4629      	mov	r1, r5
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7ff ffc2 	bl	8001b22 <uECC_vli_add>
 8001b9e:	4606      	mov	r6, r0
 8001ba0:	e7e8      	b.n	8001b74 <vli_modInv_update+0xe>

08001ba2 <uECC_vli_sub>:
{
 8001ba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba6:	4681      	mov	r9, r0
 8001ba8:	4688      	mov	r8, r1
 8001baa:	4617      	mov	r7, r2
 8001bac:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
 8001bae:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
 8001bb0:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
 8001bb2:	e013      	b.n	8001bdc <uECC_vli_sub+0x3a>
		uECC_word_t diff = left[i] - right[i] - borrow;
 8001bb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001bb8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001bbc:	1b5d      	subs	r5, r3, r5
 8001bbe:	1a6d      	subs	r5, r5, r1
		uECC_word_t val = (diff > left[i]);
 8001bc0:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
 8001bc2:	bf14      	ite	ne
 8001bc4:	2201      	movne	r2, #1
 8001bc6:	2200      	moveq	r2, #0
 8001bc8:	bf34      	ite	cc
 8001bca:	2001      	movcc	r0, #1
 8001bcc:	2000      	movcs	r0, #0
 8001bce:	f7ff ff9f 	bl	8001b10 <cond_set>
 8001bd2:	4601      	mov	r1, r0
		result[i] = diff;
 8001bd4:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
 8001bd8:	3401      	adds	r4, #1
 8001bda:	b264      	sxtb	r4, r4
 8001bdc:	42b4      	cmp	r4, r6
 8001bde:	dbe9      	blt.n	8001bb4 <uECC_vli_sub+0x12>
}
 8001be0:	4608      	mov	r0, r1
 8001be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001be8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	4605      	mov	r5, r0
 8001bee:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	f7ff ff4b 	bl	8001a8c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
 8001bf6:	2700      	movs	r7, #0
 8001bf8:	9702      	str	r7, [sp, #8]
 8001bfa:	9701      	str	r7, [sp, #4]
 8001bfc:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
 8001bfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c00:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
 8001c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c04:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
 8001c06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c08:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
 8001c0a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c0c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 8001c0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c10:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001c12:	2308      	movs	r3, #8
 8001c14:	466a      	mov	r2, sp
 8001c16:	4669      	mov	r1, sp
 8001c18:	4668      	mov	r0, sp
 8001c1a:	f7ff ff82 	bl	8001b22 <uECC_vli_add>
 8001c1e:	4606      	mov	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001c20:	2308      	movs	r3, #8
 8001c22:	466a      	mov	r2, sp
 8001c24:	4629      	mov	r1, r5
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7ff ff7b 	bl	8001b22 <uECC_vli_add>
 8001c2c:	4406      	add	r6, r0

	/* s2 */
	tmp[3] = product[12];
 8001c2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c30:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
 8001c32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c34:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
 8001c36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c38:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
 8001c3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c3c:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
 8001c3e:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001c40:	2308      	movs	r3, #8
 8001c42:	466a      	mov	r2, sp
 8001c44:	4669      	mov	r1, sp
 8001c46:	4668      	mov	r0, sp
 8001c48:	f7ff ff6b 	bl	8001b22 <uECC_vli_add>
 8001c4c:	4406      	add	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001c4e:	2308      	movs	r3, #8
 8001c50:	466a      	mov	r2, sp
 8001c52:	4629      	mov	r1, r5
 8001c54:	4628      	mov	r0, r5
 8001c56:	f7ff ff64 	bl	8001b22 <uECC_vli_add>
 8001c5a:	4406      	add	r6, r0

	/* s3 */
	tmp[0] = product[8];
 8001c5c:	6a23      	ldr	r3, [r4, #32]
 8001c5e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
 8001c60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c62:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
 8001c64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c66:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
 8001c68:	9705      	str	r7, [sp, #20]
 8001c6a:	9704      	str	r7, [sp, #16]
 8001c6c:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
 8001c6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c70:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 8001c72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c74:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001c76:	2308      	movs	r3, #8
 8001c78:	466a      	mov	r2, sp
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f7ff ff50 	bl	8001b22 <uECC_vli_add>
 8001c82:	4406      	add	r6, r0

	/* s4 */
	tmp[0] = product[9];
 8001c84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c86:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
 8001c88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c8a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
 8001c8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c8e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
 8001c90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c92:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
 8001c94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c96:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
 8001c98:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001c9a:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
 8001c9c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
 8001c9e:	6a23      	ldr	r3, [r4, #32]
 8001ca0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	466a      	mov	r2, sp
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff ff3a 	bl	8001b22 <uECC_vli_add>
 8001cae:	4406      	add	r6, r0

	/* d1 */
	tmp[0] = product[11];
 8001cb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cb2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
 8001cb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cb6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
 8001cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001cba:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
 8001cbc:	9705      	str	r7, [sp, #20]
 8001cbe:	9704      	str	r7, [sp, #16]
 8001cc0:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
 8001cc2:	6a23      	ldr	r3, [r4, #32]
 8001cc4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
 8001cc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cc8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001cca:	2308      	movs	r3, #8
 8001ccc:	466a      	mov	r2, sp
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f7ff ff66 	bl	8001ba2 <uECC_vli_sub>
 8001cd6:	1a36      	subs	r6, r6, r0

	/* d2 */
	tmp[0] = product[12];
 8001cd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cda:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
 8001cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001cde:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
 8001ce0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ce2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
 8001ce4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001ce6:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
 8001ce8:	9705      	str	r7, [sp, #20]
 8001cea:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
 8001cec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cee:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
 8001cf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cf2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	466a      	mov	r2, sp
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f7ff ff51 	bl	8001ba2 <uECC_vli_sub>
 8001d00:	1a36      	subs	r6, r6, r0

	/* d3 */
	tmp[0] = product[13];
 8001d02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d04:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
 8001d06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d08:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
 8001d0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d0c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
 8001d0e:	6a23      	ldr	r3, [r4, #32]
 8001d10:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
 8001d12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d14:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
 8001d16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d18:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
 8001d1a:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
 8001d1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d1e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001d20:	2308      	movs	r3, #8
 8001d22:	466a      	mov	r2, sp
 8001d24:	4629      	mov	r1, r5
 8001d26:	4628      	mov	r0, r5
 8001d28:	f7ff ff3b 	bl	8001ba2 <uECC_vli_sub>
 8001d2c:	1a36      	subs	r6, r6, r0

	/* d4 */
	tmp[0] = product[14];
 8001d2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d30:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
 8001d32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d34:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
 8001d36:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
 8001d38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d3a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
 8001d3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d3e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
 8001d40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d42:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
 8001d44:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
 8001d46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d48:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	466a      	mov	r2, sp
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4628      	mov	r0, r5
 8001d52:	f7ff ff26 	bl	8001ba2 <uECC_vli_sub>

	if (carry < 0) {
 8001d56:	1a36      	subs	r6, r6, r0
 8001d58:	d50f      	bpl.n	8001d7a <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <vli_mmod_fast_secp256r1+0x1a8>)
 8001d5e:	4629      	mov	r1, r5
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7ff fede 	bl	8001b22 <uECC_vli_add>
		}
		while (carry < 0);
 8001d66:	1836      	adds	r6, r6, r0
 8001d68:	d4f7      	bmi.n	8001d5a <vli_mmod_fast_secp256r1+0x172>
 8001d6a:	e00f      	b.n	8001d8c <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <vli_mmod_fast_secp256r1+0x1a8>)
 8001d70:	4629      	mov	r1, r5
 8001d72:	4628      	mov	r0, r5
 8001d74:	f7ff ff15 	bl	8001ba2 <uECC_vli_sub>
 8001d78:	1a36      	subs	r6, r6, r0
		while (carry || 
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d1f6      	bne.n	8001d6c <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
 8001d7e:	2208      	movs	r2, #8
 8001d80:	4629      	mov	r1, r5
 8001d82:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <vli_mmod_fast_secp256r1+0x1a8>)
 8001d84:	f7ff fe8d 	bl	8001aa2 <uECC_vli_cmp_unsafe>
		while (carry || 
 8001d88:	2801      	cmp	r0, #1
 8001d8a:	d1ef      	bne.n	8001d6c <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
 8001d8c:	b009      	add	sp, #36	@ 0x24
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	08003c64 	.word	0x08003c64

08001d94 <uECC_vli_modAdd>:
{
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	461d      	mov	r5, r3
 8001d9a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8001d9e:	4633      	mov	r3, r6
 8001da0:	f7ff febf 	bl	8001b22 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8001da4:	b930      	cbnz	r0, 8001db4 <uECC_vli_modAdd+0x20>
 8001da6:	4632      	mov	r2, r6
 8001da8:	4621      	mov	r1, r4
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff fe79 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 8001db0:	2801      	cmp	r0, #1
 8001db2:	d005      	beq.n	8001dc0 <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
 8001db4:	4633      	mov	r3, r6
 8001db6:	462a      	mov	r2, r5
 8001db8:	4621      	mov	r1, r4
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff fef1 	bl	8001ba2 <uECC_vli_sub>
}
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}

08001dc2 <uECC_vli_modSub>:
{
 8001dc2:	b570      	push	{r4, r5, r6, lr}
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8001dcc:	4633      	mov	r3, r6
 8001dce:	f7ff fee8 	bl	8001ba2 <uECC_vli_sub>
	if (l_borrow) {
 8001dd2:	b900      	cbnz	r0, 8001dd6 <uECC_vli_modSub+0x14>
}
 8001dd4:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
 8001dd6:	4633      	mov	r3, r6
 8001dd8:	462a      	mov	r2, r5
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff fea0 	bl	8001b22 <uECC_vli_add>
}
 8001de2:	e7f7      	b.n	8001dd4 <uECC_vli_modSub+0x12>

08001de4 <uECC_vli_mmod>:
{
 8001de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001de8:	b0a2      	sub	sp, #136	@ 0x88
 8001dea:	4682      	mov	sl, r0
 8001dec:	4691      	mov	r9, r2
 8001dee:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
 8001df0:	ab02      	add	r3, sp, #8
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 8001df6:	01ac      	lsls	r4, r5, #6
 8001df8:	b2a4      	uxth	r4, r4
			   uECC_vli_numBits(mod, num_words);
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fe2b 	bl	8001a58 <uECC_vli_numBits>
 8001e02:	b283      	uxth	r3, r0
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 8001e04:	1ae4      	subs	r4, r4, r3
 8001e06:	b226      	sxth	r6, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 8001e08:	46b0      	mov	r8, r6
 8001e0a:	2e00      	cmp	r6, #0
 8001e0c:	db11      	blt.n	8001e32 <uECC_vli_mmod+0x4e>
 8001e0e:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8001e12:	4273      	negs	r3, r6
 8001e14:	f006 041f 	and.w	r4, r6, #31
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	bf58      	it	pl
 8001e1e:	425c      	negpl	r4, r3
	uECC_vli_clear(mod_multiple, word_shift);
 8001e20:	4641      	mov	r1, r8
 8001e22:	a812      	add	r0, sp, #72	@ 0x48
 8001e24:	f7ff fdf0 	bl	8001a08 <uECC_vli_clear>
	if (bit_shift > 0) {
 8001e28:	2c00      	cmp	r4, #0
 8001e2a:	dd1a      	ble.n	8001e62 <uECC_vli_mmod+0x7e>
	uECC_word_t carry = 0;
 8001e2c:	2100      	movs	r1, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8001e2e:	460b      	mov	r3, r1
 8001e30:	e013      	b.n	8001e5a <uECC_vli_mmod+0x76>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 8001e32:	f106 081f 	add.w	r8, r6, #31
 8001e36:	e7ea      	b.n	8001e0e <uECC_vli_mmod+0x2a>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 8001e38:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
 8001e3c:	fa07 f004 	lsl.w	r0, r7, r4
 8001e40:	eb08 0203 	add.w	r2, r8, r3
 8001e44:	4301      	orrs	r1, r0
 8001e46:	a822      	add	r0, sp, #136	@ 0x88
 8001e48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e4c:	f842 1c40 	str.w	r1, [r2, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8001e50:	f1c4 0120 	rsb	r1, r4, #32
 8001e54:	fa27 f101 	lsr.w	r1, r7, r1
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8001e58:	3301      	adds	r3, #1
 8001e5a:	429d      	cmp	r5, r3
 8001e5c:	d8ec      	bhi.n	8001e38 <uECC_vli_mmod+0x54>
		uECC_word_t borrow = 0;
 8001e5e:	2401      	movs	r4, #1
 8001e60:	e04c      	b.n	8001efc <uECC_vli_mmod+0x118>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 8001e62:	462a      	mov	r2, r5
 8001e64:	4649      	mov	r1, r9
 8001e66:	ab12      	add	r3, sp, #72	@ 0x48
 8001e68:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 8001e6c:	f7ff fe0e 	bl	8001a8c <uECC_vli_set>
 8001e70:	e7f5      	b.n	8001e5e <uECC_vli_mmod+0x7a>
				borrow = (diff > v[index][i]);
 8001e72:	428b      	cmp	r3, r1
 8001e74:	bf2c      	ite	cs
 8001e76:	f04f 0c00 	movcs.w	ip, #0
 8001e7a:	f04f 0c01 	movcc.w	ip, #1
			v[1 - index][i] = diff;
 8001e7e:	f1c4 0301 	rsb	r3, r4, #1
 8001e82:	af22      	add	r7, sp, #136	@ 0x88
 8001e84:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001e88:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001e8c:	5019      	str	r1, [r3, r0]
		for (i = 0; i < num_words * 2; ++i) {
 8001e8e:	3201      	adds	r2, #1
 8001e90:	b252      	sxtb	r2, r2
 8001e92:	ebb2 0f45 	cmp.w	r2, r5, lsl #1
 8001e96:	da12      	bge.n	8001ebe <uECC_vli_mmod+0xda>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8001e98:	ab22      	add	r3, sp, #136	@ 0x88
 8001e9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001e9e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001ea2:	0090      	lsls	r0, r2, #2
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	a922      	add	r1, sp, #136	@ 0x88
 8001eaa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001eae:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8001eb2:	1a59      	subs	r1, r3, r1
 8001eb4:	eba1 010c 	sub.w	r1, r1, ip
			if (diff != v[index][i]) {
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d1da      	bne.n	8001e72 <uECC_vli_mmod+0x8e>
 8001ebc:	e7df      	b.n	8001e7e <uECC_vli_mmod+0x9a>
		index = !(index ^ borrow);
 8001ebe:	4564      	cmp	r4, ip
 8001ec0:	bf14      	ite	ne
 8001ec2:	2400      	movne	r4, #0
 8001ec4:	2401      	moveq	r4, #1
		uECC_vli_rshift1(mod_multiple, num_words);
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	a812      	add	r0, sp, #72	@ 0x48
 8001eca:	f7ff fd18 	bl	80018fe <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 8001ece:	1e6b      	subs	r3, r5, #1
 8001ed0:	aa22      	add	r2, sp, #136	@ 0x88
 8001ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ed6:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001eda:	a922      	add	r1, sp, #136	@ 0x88
 8001edc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001ee0:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8001ee4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001ee8:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8001eec:	4629      	mov	r1, r5
 8001eee:	ab12      	add	r3, sp, #72	@ 0x48
 8001ef0:	eb03 0085 	add.w	r0, r3, r5, lsl #2
 8001ef4:	f7ff fd03 	bl	80018fe <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
 8001ef8:	3e01      	subs	r6, #1
 8001efa:	b236      	sxth	r6, r6
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	db02      	blt.n	8001f06 <uECC_vli_mmod+0x122>
		for (i = 0; i < num_words * 2; ++i) {
 8001f00:	2200      	movs	r2, #0
		uECC_word_t borrow = 0;
 8001f02:	4694      	mov	ip, r2
 8001f04:	e7c5      	b.n	8001e92 <uECC_vli_mmod+0xae>
	uECC_vli_set(result, v[index], num_words);
 8001f06:	ab22      	add	r3, sp, #136	@ 0x88
 8001f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	f854 1c88 	ldr.w	r1, [r4, #-136]
 8001f12:	4650      	mov	r0, sl
 8001f14:	f7ff fdba 	bl	8001a8c <uECC_vli_set>
}
 8001f18:	b022      	add	sp, #136	@ 0x88
 8001f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f1e <uECC_vli_modMult>:
{
 8001f1e:	b570      	push	{r4, r5, r6, lr}
 8001f20:	b090      	sub	sp, #64	@ 0x40
 8001f22:	4604      	mov	r4, r0
 8001f24:	461d      	mov	r5, r3
 8001f26:	f99d 6050 	ldrsb.w	r6, [sp, #80]	@ 0x50
	uECC_vli_mult(product, left, right, num_words);
 8001f2a:	4633      	mov	r3, r6
 8001f2c:	4668      	mov	r0, sp
 8001f2e:	f7ff fd0d 	bl	800194c <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
 8001f32:	4633      	mov	r3, r6
 8001f34:	462a      	mov	r2, r5
 8001f36:	4669      	mov	r1, sp
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff ff53 	bl	8001de4 <uECC_vli_mmod>
}
 8001f3e:	b010      	add	sp, #64	@ 0x40
 8001f40:	bd70      	pop	{r4, r5, r6, pc}

08001f42 <uECC_vli_modMult_fast>:
{
 8001f42:	b530      	push	{r4, r5, lr}
 8001f44:	b091      	sub	sp, #68	@ 0x44
 8001f46:	4605      	mov	r5, r0
 8001f48:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
 8001f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4e:	4668      	mov	r0, sp
 8001f50:	f7ff fcfc 	bl	800194c <uECC_vli_mult>
	curve->mmod_fast(result, product);
 8001f54:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8001f58:	4669      	mov	r1, sp
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	4798      	blx	r3
}
 8001f5e:	b011      	add	sp, #68	@ 0x44
 8001f60:	bd30      	pop	{r4, r5, pc}

08001f62 <uECC_vli_modSquare_fast>:
{
 8001f62:	b508      	push	{r3, lr}
 8001f64:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
 8001f66:	460a      	mov	r2, r1
 8001f68:	f7ff ffeb 	bl	8001f42 <uECC_vli_modMult_fast>
}
 8001f6c:	bd08      	pop	{r3, pc}

08001f6e <double_jacobian_default>:
{
 8001f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f72:	b092      	sub	sp, #72	@ 0x48
 8001f74:	4605      	mov	r5, r0
 8001f76:	4689      	mov	r9, r1
 8001f78:	4614      	mov	r4, r2
 8001f7a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
 8001f7c:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
 8001f80:	4631      	mov	r1, r6
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7ff fd4a 	bl	8001a1c <uECC_vli_isZero>
 8001f88:	b110      	cbz	r0, 8001f90 <double_jacobian_default+0x22>
}
 8001f8a:	b012      	add	sp, #72	@ 0x48
 8001f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8001f90:	463a      	mov	r2, r7
 8001f92:	4649      	mov	r1, r9
 8001f94:	a80a      	add	r0, sp, #40	@ 0x28
 8001f96:	f7ff ffe4 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	aa0a      	add	r2, sp, #40	@ 0x28
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	a802      	add	r0, sp, #8
 8001fa2:	f7ff ffce 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8001fa6:	463a      	mov	r2, r7
 8001fa8:	a90a      	add	r1, sp, #40	@ 0x28
 8001faa:	4608      	mov	r0, r1
 8001fac:	f7ff ffd9 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	4648      	mov	r0, r9
 8001fb8:	f7ff ffc3 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff ffce 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8001fc6:	f107 0804 	add.w	r8, r7, #4
 8001fca:	9600      	str	r6, [sp, #0]
 8001fcc:	4643      	mov	r3, r8
 8001fce:	4622      	mov	r2, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f7ff fede 	bl	8001d94 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8001fd8:	9600      	str	r6, [sp, #0]
 8001fda:	4643      	mov	r3, r8
 8001fdc:	4622      	mov	r2, r4
 8001fde:	4621      	mov	r1, r4
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff fed7 	bl	8001d94 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8001fe6:	9600      	str	r6, [sp, #0]
 8001fe8:	4643      	mov	r3, r8
 8001fea:	4622      	mov	r2, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fee7 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f7ff ffa1 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8002000:	9600      	str	r6, [sp, #0]
 8002002:	4643      	mov	r3, r8
 8002004:	462a      	mov	r2, r5
 8002006:	4629      	mov	r1, r5
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff fec3 	bl	8001d94 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 800200e:	9600      	str	r6, [sp, #0]
 8002010:	4643      	mov	r3, r8
 8002012:	4622      	mov	r2, r4
 8002014:	4629      	mov	r1, r5
 8002016:	4628      	mov	r0, r5
 8002018:	f7ff febc 	bl	8001d94 <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
 800201c:	2100      	movs	r1, #0
 800201e:	4628      	mov	r0, r5
 8002020:	f7ff fd11 	bl	8001a46 <uECC_vli_testBit>
 8002024:	2800      	cmp	r0, #0
 8002026:	d04a      	beq.n	80020be <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8002028:	4633      	mov	r3, r6
 800202a:	4642      	mov	r2, r8
 800202c:	4629      	mov	r1, r5
 800202e:	4628      	mov	r0, r5
 8002030:	f7ff fd77 	bl	8001b22 <uECC_vli_add>
 8002034:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
 8002036:	4631      	mov	r1, r6
 8002038:	4628      	mov	r0, r5
 800203a:	f7ff fc60 	bl	80018fe <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 800203e:	f106 4380 	add.w	r3, r6, #1073741824	@ 0x40000000
 8002042:	3b01      	subs	r3, #1
 8002044:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8002048:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
 800204c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
 8002050:	463a      	mov	r2, r7
 8002052:	4629      	mov	r1, r5
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ff84 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 800205a:	9600      	str	r6, [sp, #0]
 800205c:	4643      	mov	r3, r8
 800205e:	aa02      	add	r2, sp, #8
 8002060:	4621      	mov	r1, r4
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fead 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8002068:	9600      	str	r6, [sp, #0]
 800206a:	4643      	mov	r3, r8
 800206c:	aa02      	add	r2, sp, #8
 800206e:	4621      	mov	r1, r4
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fea6 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8002076:	9600      	str	r6, [sp, #0]
 8002078:	4643      	mov	r3, r8
 800207a:	4622      	mov	r2, r4
 800207c:	a902      	add	r1, sp, #8
 800207e:	4608      	mov	r0, r1
 8002080:	f7ff fe9f 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
 8002084:	463b      	mov	r3, r7
 8002086:	aa02      	add	r2, sp, #8
 8002088:	4629      	mov	r1, r5
 800208a:	4628      	mov	r0, r5
 800208c:	f7ff ff59 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
 8002090:	9600      	str	r6, [sp, #0]
 8002092:	4643      	mov	r3, r8
 8002094:	aa0a      	add	r2, sp, #40	@ 0x28
 8002096:	4629      	mov	r1, r5
 8002098:	4610      	mov	r0, r2
 800209a:	f7ff fe92 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
 800209e:	4632      	mov	r2, r6
 80020a0:	4621      	mov	r1, r4
 80020a2:	4628      	mov	r0, r5
 80020a4:	f7ff fcf2 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
 80020a8:	4632      	mov	r2, r6
 80020aa:	4649      	mov	r1, r9
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fced 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
 80020b2:	4632      	mov	r2, r6
 80020b4:	a90a      	add	r1, sp, #40	@ 0x28
 80020b6:	4648      	mov	r0, r9
 80020b8:	f7ff fce8 	bl	8001a8c <uECC_vli_set>
 80020bc:	e765      	b.n	8001f8a <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
 80020be:	4631      	mov	r1, r6
 80020c0:	4628      	mov	r0, r5
 80020c2:	f7ff fc1c 	bl	80018fe <uECC_vli_rshift1>
 80020c6:	e7c3      	b.n	8002050 <double_jacobian_default+0xe2>

080020c8 <x_side_default>:
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	b08a      	sub	sp, #40	@ 0x28
 80020ce:	4604      	mov	r4, r0
 80020d0:	460e      	mov	r6, r1
 80020d2:	4615      	mov	r5, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 80020d4:	2220      	movs	r2, #32
 80020d6:	2100      	movs	r1, #0
 80020d8:	a802      	add	r0, sp, #8
 80020da:	f000 feed 	bl	8002eb8 <memset>
 80020de:	2303      	movs	r3, #3
 80020e0:	9302      	str	r3, [sp, #8]
	wordcount_t num_words = curve->num_words;
 80020e2:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 80020e6:	462a      	mov	r2, r5
 80020e8:	4631      	mov	r1, r6
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ff39 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 80020f0:	1d2f      	adds	r7, r5, #4
 80020f2:	f8cd 8000 	str.w	r8, [sp]
 80020f6:	463b      	mov	r3, r7
 80020f8:	aa02      	add	r2, sp, #8
 80020fa:	4621      	mov	r1, r4
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fe60 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 8002102:	462b      	mov	r3, r5
 8002104:	4632      	mov	r2, r6
 8002106:	4621      	mov	r1, r4
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff1a 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
 800210e:	f8cd 8000 	str.w	r8, [sp]
 8002112:	463b      	mov	r3, r7
 8002114:	f105 0284 	add.w	r2, r5, #132	@ 0x84
 8002118:	4621      	mov	r1, r4
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fe3a 	bl	8001d94 <uECC_vli_modAdd>
}
 8002120:	b00a      	add	sp, #40	@ 0x28
 8002122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002126 <uECC_vli_modInv>:
{
 8002126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002128:	b0a1      	sub	sp, #132	@ 0x84
 800212a:	4607      	mov	r7, r0
 800212c:	460e      	mov	r6, r1
 800212e:	4615      	mov	r5, r2
 8002130:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
 8002132:	4619      	mov	r1, r3
 8002134:	4630      	mov	r0, r6
 8002136:	f7ff fc71 	bl	8001a1c <uECC_vli_isZero>
 800213a:	b9a0      	cbnz	r0, 8002166 <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
 800213c:	4622      	mov	r2, r4
 800213e:	4631      	mov	r1, r6
 8002140:	a818      	add	r0, sp, #96	@ 0x60
 8002142:	f7ff fca3 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
 8002146:	4622      	mov	r2, r4
 8002148:	4629      	mov	r1, r5
 800214a:	a810      	add	r0, sp, #64	@ 0x40
 800214c:	f7ff fc9e 	bl	8001a8c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
 8002150:	4621      	mov	r1, r4
 8002152:	a808      	add	r0, sp, #32
 8002154:	f7ff fc58 	bl	8001a08 <uECC_vli_clear>
	u[0] = 1;
 8002158:	2301      	movs	r3, #1
 800215a:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
 800215c:	4621      	mov	r1, r4
 800215e:	4668      	mov	r0, sp
 8002160:	f7ff fc52 	bl	8001a08 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8002164:	e00d      	b.n	8002182 <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
 8002166:	4621      	mov	r1, r4
 8002168:	4638      	mov	r0, r7
 800216a:	f7ff fc4d 	bl	8001a08 <uECC_vli_clear>
		return;
 800216e:	e071      	b.n	8002254 <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
 8002170:	4621      	mov	r1, r4
 8002172:	a818      	add	r0, sp, #96	@ 0x60
 8002174:	f7ff fbc3 	bl	80018fe <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
 8002178:	4622      	mov	r2, r4
 800217a:	4629      	mov	r1, r5
 800217c:	a808      	add	r0, sp, #32
 800217e:	f7ff fcf2 	bl	8001b66 <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8002182:	4622      	mov	r2, r4
 8002184:	a910      	add	r1, sp, #64	@ 0x40
 8002186:	a818      	add	r0, sp, #96	@ 0x60
 8002188:	f7ff fc8b 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 800218c:	4602      	mov	r2, r0
 800218e:	2800      	cmp	r0, #0
 8002190:	d05b      	beq.n	800224a <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
 8002192:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8002194:	f013 0f01 	tst.w	r3, #1
 8002198:	d0ea      	beq.n	8002170 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
 800219a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800219c:	f013 0f01 	tst.w	r3, #1
 80021a0:	d01e      	beq.n	80021e0 <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	dd2d      	ble.n	8002202 <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
 80021a6:	4623      	mov	r3, r4
 80021a8:	aa10      	add	r2, sp, #64	@ 0x40
 80021aa:	a918      	add	r1, sp, #96	@ 0x60
 80021ac:	4608      	mov	r0, r1
 80021ae:	f7ff fcf8 	bl	8001ba2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
 80021b2:	4621      	mov	r1, r4
 80021b4:	a818      	add	r0, sp, #96	@ 0x60
 80021b6:	f7ff fba2 	bl	80018fe <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 80021ba:	4622      	mov	r2, r4
 80021bc:	4669      	mov	r1, sp
 80021be:	a808      	add	r0, sp, #32
 80021c0:	f7ff fc6f 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	db15      	blt.n	80021f4 <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
 80021c8:	4623      	mov	r3, r4
 80021ca:	466a      	mov	r2, sp
 80021cc:	a908      	add	r1, sp, #32
 80021ce:	4608      	mov	r0, r1
 80021d0:	f7ff fce7 	bl	8001ba2 <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
 80021d4:	4622      	mov	r2, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	a808      	add	r0, sp, #32
 80021da:	f7ff fcc4 	bl	8001b66 <vli_modInv_update>
 80021de:	e7d0      	b.n	8002182 <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
 80021e0:	4621      	mov	r1, r4
 80021e2:	a810      	add	r0, sp, #64	@ 0x40
 80021e4:	f7ff fb8b 	bl	80018fe <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
 80021e8:	4622      	mov	r2, r4
 80021ea:	4629      	mov	r1, r5
 80021ec:	4668      	mov	r0, sp
 80021ee:	f7ff fcba 	bl	8001b66 <vli_modInv_update>
 80021f2:	e7c6      	b.n	8002182 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
 80021f4:	4623      	mov	r3, r4
 80021f6:	462a      	mov	r2, r5
 80021f8:	a908      	add	r1, sp, #32
 80021fa:	4608      	mov	r0, r1
 80021fc:	f7ff fc91 	bl	8001b22 <uECC_vli_add>
 8002200:	e7e2      	b.n	80021c8 <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
 8002202:	4623      	mov	r3, r4
 8002204:	aa18      	add	r2, sp, #96	@ 0x60
 8002206:	a910      	add	r1, sp, #64	@ 0x40
 8002208:	4608      	mov	r0, r1
 800220a:	f7ff fcca 	bl	8001ba2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
 800220e:	4621      	mov	r1, r4
 8002210:	a810      	add	r0, sp, #64	@ 0x40
 8002212:	f7ff fb74 	bl	80018fe <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8002216:	4622      	mov	r2, r4
 8002218:	a908      	add	r1, sp, #32
 800221a:	4668      	mov	r0, sp
 800221c:	f7ff fc41 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 8002220:	2800      	cmp	r0, #0
 8002222:	db0b      	blt.n	800223c <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
 8002224:	4623      	mov	r3, r4
 8002226:	aa08      	add	r2, sp, #32
 8002228:	4669      	mov	r1, sp
 800222a:	4668      	mov	r0, sp
 800222c:	f7ff fcb9 	bl	8001ba2 <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
 8002230:	4622      	mov	r2, r4
 8002232:	4629      	mov	r1, r5
 8002234:	4668      	mov	r0, sp
 8002236:	f7ff fc96 	bl	8001b66 <vli_modInv_update>
 800223a:	e7a2      	b.n	8002182 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
 800223c:	4623      	mov	r3, r4
 800223e:	462a      	mov	r2, r5
 8002240:	4669      	mov	r1, sp
 8002242:	4668      	mov	r0, sp
 8002244:	f7ff fc6d 	bl	8001b22 <uECC_vli_add>
 8002248:	e7ec      	b.n	8002224 <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
 800224a:	4622      	mov	r2, r4
 800224c:	a908      	add	r1, sp, #32
 800224e:	4638      	mov	r0, r7
 8002250:	f7ff fc1c 	bl	8001a8c <uECC_vli_set>
}
 8002254:	b021      	add	sp, #132	@ 0x84
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002258 <uECC_secp256r1>:
}
 8002258:	4800      	ldr	r0, [pc, #0]	@ (800225c <uECC_secp256r1+0x4>)
 800225a:	4770      	bx	lr
 800225c:	08003c60 	.word	0x08003c60

08002260 <apply_z>:
	return uECC_vli_isZero(point, curve->num_words * 2);
}

void apply_z(uECC_word_t * X1, uECC_word_t * Y1, const uECC_word_t * const Z,
	     uECC_Curve curve)
{
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	4607      	mov	r7, r0
 8002266:	460d      	mov	r5, r1
 8002268:	4616      	mov	r6, r2
 800226a:	461c      	mov	r4, r3
	uECC_word_t t1[NUM_ECC_WORDS];

	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 800226c:	461a      	mov	r2, r3
 800226e:	4631      	mov	r1, r6
 8002270:	4668      	mov	r0, sp
 8002272:	f7ff fe76 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8002276:	4623      	mov	r3, r4
 8002278:	466a      	mov	r2, sp
 800227a:	4639      	mov	r1, r7
 800227c:	4638      	mov	r0, r7
 800227e:	f7ff fe60 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8002282:	4623      	mov	r3, r4
 8002284:	4632      	mov	r2, r6
 8002286:	4669      	mov	r1, sp
 8002288:	4668      	mov	r0, sp
 800228a:	f7ff fe5a 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 800228e:	4623      	mov	r3, r4
 8002290:	466a      	mov	r2, sp
 8002292:	4629      	mov	r1, r5
 8002294:	4628      	mov	r0, r5
 8002296:	f7ff fe54 	bl	8001f42 <uECC_vli_modMult_fast>
}
 800229a:	b009      	add	sp, #36	@ 0x24
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229e <XYcZ_add>:
}

void XYcZ_add(uECC_word_t * X1, uECC_word_t * Y1,
	      uECC_word_t * X2, uECC_word_t * Y2,
	      uECC_Curve curve)
{
 800229e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	4680      	mov	r8, r0
 80022a6:	4689      	mov	r9, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	461d      	mov	r5, r3
 80022ac:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80022b0:	4656      	mov	r6, sl
 80022b2:	f916 7b04 	ldrsb.w	r7, [r6], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80022b6:	9700      	str	r7, [sp, #0]
 80022b8:	4633      	mov	r3, r6
 80022ba:	4602      	mov	r2, r0
 80022bc:	4621      	mov	r1, r4
 80022be:	a802      	add	r0, sp, #8
 80022c0:	f7ff fd7f 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 80022c4:	4652      	mov	r2, sl
 80022c6:	a902      	add	r1, sp, #8
 80022c8:	4608      	mov	r0, r1
 80022ca:	f7ff fe4a 	bl	8001f62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 80022ce:	4653      	mov	r3, sl
 80022d0:	aa02      	add	r2, sp, #8
 80022d2:	4641      	mov	r1, r8
 80022d4:	4640      	mov	r0, r8
 80022d6:	f7ff fe34 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80022da:	4653      	mov	r3, sl
 80022dc:	aa02      	add	r2, sp, #8
 80022de:	4621      	mov	r1, r4
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fe2e 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80022e6:	9700      	str	r7, [sp, #0]
 80022e8:	4633      	mov	r3, r6
 80022ea:	464a      	mov	r2, r9
 80022ec:	4629      	mov	r1, r5
 80022ee:	4628      	mov	r0, r5
 80022f0:	f7ff fd67 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 80022f4:	4652      	mov	r2, sl
 80022f6:	4629      	mov	r1, r5
 80022f8:	a802      	add	r0, sp, #8
 80022fa:	f7ff fe32 	bl	8001f62 <uECC_vli_modSquare_fast>

	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 80022fe:	9700      	str	r7, [sp, #0]
 8002300:	4633      	mov	r3, r6
 8002302:	4642      	mov	r2, r8
 8002304:	a902      	add	r1, sp, #8
 8002306:	4608      	mov	r0, r1
 8002308:	f7ff fd5b 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 800230c:	9700      	str	r7, [sp, #0]
 800230e:	4633      	mov	r3, r6
 8002310:	4622      	mov	r2, r4
 8002312:	a902      	add	r1, sp, #8
 8002314:	4608      	mov	r0, r1
 8002316:	f7ff fd54 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 800231a:	9700      	str	r7, [sp, #0]
 800231c:	4633      	mov	r3, r6
 800231e:	4642      	mov	r2, r8
 8002320:	4621      	mov	r1, r4
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fd4d 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
 8002328:	4653      	mov	r3, sl
 800232a:	4622      	mov	r2, r4
 800232c:	4649      	mov	r1, r9
 800232e:	4648      	mov	r0, r9
 8002330:	f7ff fe07 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8002334:	9700      	str	r7, [sp, #0]
 8002336:	4633      	mov	r3, r6
 8002338:	aa02      	add	r2, sp, #8
 800233a:	4641      	mov	r1, r8
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fd40 	bl	8001dc2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 8002342:	4653      	mov	r3, sl
 8002344:	4622      	mov	r2, r4
 8002346:	4629      	mov	r1, r5
 8002348:	4628      	mov	r0, r5
 800234a:	f7ff fdfa 	bl	8001f42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 800234e:	9700      	str	r7, [sp, #0]
 8002350:	4633      	mov	r3, r6
 8002352:	464a      	mov	r2, r9
 8002354:	4629      	mov	r1, r5
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff fd33 	bl	8001dc2 <uECC_vli_modSub>

	uECC_vli_set(X2, t5, num_words);
 800235c:	463a      	mov	r2, r7
 800235e:	a902      	add	r1, sp, #8
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff fb93 	bl	8001a8c <uECC_vli_set>
}
 8002366:	b00a      	add	sp, #40	@ 0x28
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800236c <uECC_vli_bytesToNative>:
}

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4605      	mov	r5, r0
 8002370:	460e      	mov	r6, r1
 8002372:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8002374:	1cd1      	adds	r1, r2, #3
 8002376:	d407      	bmi.n	8002388 <uECC_vli_bytesToNative+0x1c>
 8002378:	f341 0187 	sbfx	r1, r1, #2, #8
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff fb43 	bl	8001a08 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
 8002382:	f04f 0c00 	mov.w	ip, #0
 8002386:	e014      	b.n	80023b2 <uECC_vli_bytesToNative+0x46>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8002388:	3103      	adds	r1, #3
 800238a:	e7f5      	b.n	8002378 <uECC_vli_bytesToNative+0xc>
		unsigned b = num_bytes - 1 - i;
 800238c:	1e63      	subs	r3, r4, #1
 800238e:	eba3 030c 	sub.w	r3, r3, ip
		native[b / uECC_WORD_SIZE] |=
 8002392:	f023 0003 	bic.w	r0, r3, #3
 8002396:	582a      	ldr	r2, [r5, r0]
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8002398:	f816 100c 	ldrb.w	r1, [r6, ip]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
 80023a6:	431a      	orrs	r2, r3
 80023a8:	502a      	str	r2, [r5, r0]
	for (i = 0; i < num_bytes; ++i) {
 80023aa:	f10c 0c01 	add.w	ip, ip, #1
 80023ae:	fa4f fc8c 	sxtb.w	ip, ip
 80023b2:	45a4      	cmp	ip, r4
 80023b4:	dbea      	blt.n	800238c <uECC_vli_bytesToNative+0x20>
  	}
}
 80023b6:	bd70      	pop	{r4, r5, r6, pc}

080023b8 <smax>:
}

static bitcount_t smax(bitcount_t a, bitcount_t b)
{
	return (a > b ? a : b);
}
 80023b8:	4288      	cmp	r0, r1
 80023ba:	bfb8      	it	lt
 80023bc:	4608      	movlt	r0, r1
 80023be:	4770      	bx	lr

080023c0 <bits2int>:
{
 80023c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023c4:	4604      	mov	r4, r0
 80023c6:	4689      	mov	r9, r1
 80023c8:	461d      	mov	r5, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 80023ca:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 80023ce:	f11c 0307 	adds.w	r3, ip, #7
 80023d2:	d420      	bmi.n	8002416 <bits2int+0x56>
 80023d4:	10db      	asrs	r3, r3, #3
 80023d6:	4698      	mov	r8, r3
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80023d8:	f11c 0c1f 	adds.w	ip, ip, #31
 80023dc:	d41d      	bmi.n	800241a <bits2int+0x5a>
 80023de:	ea4f 176c 	mov.w	r7, ip, asr #5
	if (bits_size > num_n_bytes) {
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d300      	bcc.n	80023e8 <bits2int+0x28>
 80023e6:	4690      	mov	r8, r2
	uECC_vli_clear(native, num_n_words);
 80023e8:	b27e      	sxtb	r6, r7
 80023ea:	4631      	mov	r1, r6
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff fb0b 	bl	8001a08 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
 80023f2:	4642      	mov	r2, r8
 80023f4:	4649      	mov	r1, r9
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff ffb8 	bl	800236c <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 80023fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002400:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8002404:	ebb3 0fc8 	cmp.w	r3, r8, lsl #3
 8002408:	d223      	bcs.n	8002452 <bits2int+0x92>
	shift = bits_size * 8 - curve->num_n_bits;
 800240a:	1ad2      	subs	r2, r2, r3
	ptr = native + num_n_words;
 800240c:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
	carry = 0;
 8002410:	f04f 0e00 	mov.w	lr, #0
	while (ptr-- > native) {
 8002414:	e011      	b.n	800243a <bits2int+0x7a>
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8002416:	3307      	adds	r3, #7
 8002418:	e7dc      	b.n	80023d4 <bits2int+0x14>
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800241a:	f10c 0c1f 	add.w	ip, ip, #31
 800241e:	e7de      	b.n	80023de <bits2int+0x1e>
		uECC_word_t temp = *ptr;
 8002420:	f85c 3c04 	ldr.w	r3, [ip, #-4]
		*ptr = (temp >> shift) | carry;
 8002424:	fa23 f102 	lsr.w	r1, r3, r2
 8002428:	ea41 010e 	orr.w	r1, r1, lr
 800242c:	f84c 1c04 	str.w	r1, [ip, #-4]
		carry = temp << (uECC_WORD_BITS - shift);
 8002430:	f1c2 0e20 	rsb	lr, r2, #32
 8002434:	fa03 fe0e 	lsl.w	lr, r3, lr
	while (ptr-- > native) {
 8002438:	4684      	mov	ip, r0
 800243a:	f1ac 0004 	sub.w	r0, ip, #4
 800243e:	45a4      	cmp	ip, r4
 8002440:	d8ee      	bhi.n	8002420 <bits2int+0x60>
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 8002442:	3524      	adds	r5, #36	@ 0x24
 8002444:	4632      	mov	r2, r6
 8002446:	4621      	mov	r1, r4
 8002448:	4628      	mov	r0, r5
 800244a:	f7ff fb2a 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 800244e:	2801      	cmp	r0, #1
 8002450:	d101      	bne.n	8002456 <bits2int+0x96>
}
 8002452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_sub(native, native, curve->n, num_n_words);
 8002456:	4633      	mov	r3, r6
 8002458:	462a      	mov	r2, r5
 800245a:	4621      	mov	r1, r4
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff fba0 	bl	8001ba2 <uECC_vli_sub>
 8002462:	e7f6      	b.n	8002452 <bits2int+0x92>

08002464 <uECC_verify>:

int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,
		unsigned hash_size, const uint8_t *signature,
	        uECC_Curve curve)
{
 8002464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002468:	b0fd      	sub	sp, #500	@ 0x1f4
 800246a:	4680      	mov	r8, r0
 800246c:	9106      	str	r1, [sp, #24]
 800246e:	9207      	str	r2, [sp, #28]
 8002470:	461f      	mov	r7, r3
 8002472:	9c86      	ldr	r4, [sp, #536]	@ 0x218
	bitcount_t num_bits;
	bitcount_t i;

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t r[NUM_ECC_WORDS], s[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 8002474:	f994 5000 	ldrsb.w	r5, [r4]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8002478:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800247c:	331f      	adds	r3, #31
 800247e:	d43a      	bmi.n	80024f6 <uECC_verify+0x92>
 8002480:	f343 1347 	sbfx	r3, r3, #5, #8
 8002484:	9303      	str	r3, [sp, #12]

	rx[num_n_words - 1] = 0;
 8002486:	f103 39ff 	add.w	r9, r3, #4294967295
 800248a:	ab7c      	add	r3, sp, #496	@ 0x1f0
 800248c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8002490:	2300      	movs	r3, #0
 8002492:	f842 3cc0 	str.w	r3, [r2, #-192]
	r[num_n_words - 1] = 0;
 8002496:	f10d 0a40 	add.w	sl, sp, #64	@ 0x40
 800249a:	f84a 3029 	str.w	r3, [sl, r9, lsl #2]
	s[num_n_words - 1] = 0;
 800249e:	f10d 0b20 	add.w	fp, sp, #32
 80024a2:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 80024a6:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80024aa:	4641      	mov	r1, r8
 80024ac:	a818      	add	r0, sp, #96	@ 0x60
 80024ae:	f7ff ff5d 	bl	800236c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 80024b2:	00ab      	lsls	r3, r5, #2
 80024b4:	9304      	str	r3, [sp, #16]
 80024b6:	ab18      	add	r3, sp, #96	@ 0x60
 80024b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80024c2:	eb08 0102 	add.w	r1, r8, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff50 	bl	800236c <uECC_vli_bytesToNative>
			       curve->num_bytes);
	uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 80024cc:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80024d0:	4639      	mov	r1, r7
 80024d2:	4650      	mov	r0, sl
 80024d4:	f7ff ff4a 	bl	800236c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 80024d8:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80024dc:	18b9      	adds	r1, r7, r2
 80024de:	4658      	mov	r0, fp
 80024e0:	f7ff ff44 	bl	800236c <uECC_vli_bytesToNative>

	/* r, s must not be 0. */
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 80024e4:	4629      	mov	r1, r5
 80024e6:	4650      	mov	r0, sl
 80024e8:	f7ff fa98 	bl	8001a1c <uECC_vli_isZero>
 80024ec:	b128      	cbz	r0, 80024fa <uECC_verify+0x96>
		return 0;
 80024ee:	2000      	movs	r0, #0
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
	}

	/* Accept only if v == r. */
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
}
 80024f0:	b07d      	add	sp, #500	@ 0x1f4
 80024f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80024f6:	331f      	adds	r3, #31
 80024f8:	e7c2      	b.n	8002480 <uECC_verify+0x1c>
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 80024fa:	4629      	mov	r1, r5
 80024fc:	4658      	mov	r0, fp
 80024fe:	f7ff fa8d 	bl	8001a1c <uECC_vli_isZero>
 8002502:	2800      	cmp	r0, #0
 8002504:	d1f3      	bne.n	80024ee <uECC_verify+0x8a>
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8002506:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800250a:	9a03      	ldr	r2, [sp, #12]
 800250c:	a910      	add	r1, sp, #64	@ 0x40
 800250e:	4638      	mov	r0, r7
 8002510:	f7ff fac7 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 8002514:	2801      	cmp	r0, #1
 8002516:	d001      	beq.n	800251c <uECC_verify+0xb8>
		return 0;
 8002518:	2000      	movs	r0, #0
 800251a:	e7e9      	b.n	80024f0 <uECC_verify+0x8c>
	    uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 800251c:	9a03      	ldr	r2, [sp, #12]
 800251e:	a908      	add	r1, sp, #32
 8002520:	4638      	mov	r0, r7
 8002522:	f7ff fabe 	bl	8001aa2 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8002526:	2801      	cmp	r0, #1
 8002528:	d1f6      	bne.n	8002518 <uECC_verify+0xb4>
	uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 800252a:	9e03      	ldr	r6, [sp, #12]
 800252c:	4633      	mov	r3, r6
 800252e:	463a      	mov	r2, r7
 8002530:	a908      	add	r1, sp, #32
 8002532:	a864      	add	r0, sp, #400	@ 0x190
 8002534:	f7ff fdf7 	bl	8002126 <uECC_vli_modInv>
	u1[num_n_words - 1] = 0;
 8002538:	ab7c      	add	r3, sp, #496	@ 0x1f0
 800253a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800253e:	2300      	movs	r3, #0
 8002540:	f849 3c20 	str.w	r3, [r9, #-32]
	bits2int(u1, message_hash, hash_size, curve);
 8002544:	4623      	mov	r3, r4
 8002546:	9a07      	ldr	r2, [sp, #28]
 8002548:	9906      	ldr	r1, [sp, #24]
 800254a:	a874      	add	r0, sp, #464	@ 0x1d0
 800254c:	f7ff ff38 	bl	80023c0 <bits2int>
	uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8002550:	9600      	str	r6, [sp, #0]
 8002552:	463b      	mov	r3, r7
 8002554:	aa64      	add	r2, sp, #400	@ 0x190
 8002556:	a974      	add	r1, sp, #464	@ 0x1d0
 8002558:	4608      	mov	r0, r1
 800255a:	f7ff fce0 	bl	8001f1e <uECC_vli_modMult>
	uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 800255e:	9603      	str	r6, [sp, #12]
 8002560:	9600      	str	r6, [sp, #0]
 8002562:	463b      	mov	r3, r7
 8002564:	aa64      	add	r2, sp, #400	@ 0x190
 8002566:	a910      	add	r1, sp, #64	@ 0x40
 8002568:	a86c      	add	r0, sp, #432	@ 0x1b0
 800256a:	f7ff fcd8 	bl	8001f1e <uECC_vli_modMult>
	uECC_vli_set(sum, _public, num_words);
 800256e:	ae18      	add	r6, sp, #96	@ 0x60
 8002570:	f50d 78a8 	add.w	r8, sp, #336	@ 0x150
 8002574:	462a      	mov	r2, r5
 8002576:	4631      	mov	r1, r6
 8002578:	4640      	mov	r0, r8
 800257a:	f7ff fa87 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(sum + num_words, _public + num_words, num_words);
 800257e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002582:	eb08 090a 	add.w	r9, r8, sl
 8002586:	462a      	mov	r2, r5
 8002588:	9905      	ldr	r1, [sp, #20]
 800258a:	4648      	mov	r0, r9
 800258c:	f7ff fa7e 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(tx, curve->G, num_words);
 8002590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002594:	462a      	mov	r2, r5
 8002596:	469b      	mov	fp, r3
 8002598:	4619      	mov	r1, r3
 800259a:	a83c      	add	r0, sp, #240	@ 0xf0
 800259c:	f7ff fa76 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(ty, curve->G + num_words, num_words);
 80025a0:	462a      	mov	r2, r5
 80025a2:	eb0b 010a 	add.w	r1, fp, sl
 80025a6:	a834      	add	r0, sp, #208	@ 0xd0
 80025a8:	f7ff fa70 	bl	8001a8c <uECC_vli_set>
	uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 80025ac:	f104 0a04 	add.w	sl, r4, #4
 80025b0:	9500      	str	r5, [sp, #0]
 80025b2:	4653      	mov	r3, sl
 80025b4:	aa3c      	add	r2, sp, #240	@ 0xf0
 80025b6:	4641      	mov	r1, r8
 80025b8:	a864      	add	r0, sp, #400	@ 0x190
 80025ba:	f7ff fc02 	bl	8001dc2 <uECC_vli_modSub>
	XYcZ_add(tx, ty, sum, sum + num_words, curve);
 80025be:	9400      	str	r4, [sp, #0]
 80025c0:	464b      	mov	r3, r9
 80025c2:	4642      	mov	r2, r8
 80025c4:	a934      	add	r1, sp, #208	@ 0xd0
 80025c6:	a83c      	add	r0, sp, #240	@ 0xf0
 80025c8:	f7ff fe69 	bl	800229e <XYcZ_add>
	uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 80025cc:	462b      	mov	r3, r5
 80025ce:	4652      	mov	r2, sl
 80025d0:	a964      	add	r1, sp, #400	@ 0x190
 80025d2:	4608      	mov	r0, r1
 80025d4:	f7ff fda7 	bl	8002126 <uECC_vli_modInv>
	apply_z(sum, sum + num_words, z, curve);
 80025d8:	4623      	mov	r3, r4
 80025da:	aa64      	add	r2, sp, #400	@ 0x190
 80025dc:	4649      	mov	r1, r9
 80025de:	4640      	mov	r0, r8
 80025e0:	f7ff fe3e 	bl	8002260 <apply_z>
	points[0] = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	9328      	str	r3, [sp, #160]	@ 0xa0
	points[1] = curve->G;
 80025e8:	f8cd b0a4 	str.w	fp, [sp, #164]	@ 0xa4
	points[2] = _public;
 80025ec:	962a      	str	r6, [sp, #168]	@ 0xa8
	points[3] = sum;
 80025ee:	f8cd 80ac 	str.w	r8, [sp, #172]	@ 0xac
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 80025f2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80025f6:	4641      	mov	r1, r8
 80025f8:	a874      	add	r0, sp, #464	@ 0x1d0
 80025fa:	f7ff fa2d 	bl	8001a58 <uECC_vli_numBits>
 80025fe:	4606      	mov	r6, r0
 8002600:	4641      	mov	r1, r8
 8002602:	a86c      	add	r0, sp, #432	@ 0x1b0
 8002604:	f7ff fa28 	bl	8001a58 <uECC_vli_numBits>
 8002608:	4601      	mov	r1, r0
 800260a:	4630      	mov	r0, r6
 800260c:	f7ff fed4 	bl	80023b8 <smax>
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8002610:	b286      	uxth	r6, r0
 8002612:	f106 39ff 	add.w	r9, r6, #4294967295
 8002616:	fa0f f989 	sxth.w	r9, r9
 800261a:	4649      	mov	r1, r9
 800261c:	a874      	add	r0, sp, #464	@ 0x1d0
 800261e:	f7ff fa12 	bl	8001a46 <uECC_vli_testBit>
 8002622:	f1b0 0800 	subs.w	r8, r0, #0
 8002626:	bf18      	it	ne
 8002628:	f04f 0801 	movne.w	r8, #1
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 800262c:	4649      	mov	r1, r9
 800262e:	a86c      	add	r0, sp, #432	@ 0x1b0
 8002630:	f7ff fa09 	bl	8001a46 <uECC_vli_testBit>
 8002634:	b1e0      	cbz	r0, 8002670 <uECC_verify+0x20c>
 8002636:	2302      	movs	r3, #2
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8002638:	ea48 0803 	orr.w	r8, r8, r3
 800263c:	ab28      	add	r3, sp, #160	@ 0xa0
 800263e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
	uECC_vli_set(rx, point, num_words);
 8002642:	462a      	mov	r2, r5
 8002644:	4641      	mov	r1, r8
 8002646:	a84c      	add	r0, sp, #304	@ 0x130
 8002648:	f7ff fa20 	bl	8001a8c <uECC_vli_set>
	uECC_vli_set(ry, point + num_words, num_words);
 800264c:	462a      	mov	r2, r5
 800264e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002652:	eb08 0109 	add.w	r1, r8, r9
 8002656:	a844      	add	r0, sp, #272	@ 0x110
 8002658:	f7ff fa18 	bl	8001a8c <uECC_vli_set>
	uECC_vli_clear(z, num_words);
 800265c:	4629      	mov	r1, r5
 800265e:	a864      	add	r0, sp, #400	@ 0x190
 8002660:	f7ff f9d2 	bl	8001a08 <uECC_vli_clear>
	z[0] = 1;
 8002664:	2301      	movs	r3, #1
 8002666:	9364      	str	r3, [sp, #400]	@ 0x190
	for (i = num_bits - 2; i >= 0; --i) {
 8002668:	1eb3      	subs	r3, r6, #2
 800266a:	fa0f f883 	sxth.w	r8, r3
 800266e:	e030      	b.n	80026d2 <uECC_verify+0x26e>
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8002670:	2300      	movs	r3, #0
 8002672:	e7e1      	b.n	8002638 <uECC_verify+0x1d4>
		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 8002674:	2300      	movs	r3, #0
 8002676:	431e      	orrs	r6, r3
		point = points[index];
 8002678:	ab28      	add	r3, sp, #160	@ 0xa0
 800267a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
		if (point) {
 800267e:	b326      	cbz	r6, 80026ca <uECC_verify+0x266>
			uECC_vli_set(tx, point, num_words);
 8002680:	462a      	mov	r2, r5
 8002682:	4631      	mov	r1, r6
 8002684:	a83c      	add	r0, sp, #240	@ 0xf0
 8002686:	f7ff fa01 	bl	8001a8c <uECC_vli_set>
			uECC_vli_set(ty, point + num_words, num_words);
 800268a:	462a      	mov	r2, r5
 800268c:	eb06 0109 	add.w	r1, r6, r9
 8002690:	a834      	add	r0, sp, #208	@ 0xd0
 8002692:	f7ff f9fb 	bl	8001a8c <uECC_vli_set>
			apply_z(tx, ty, z, curve);
 8002696:	4623      	mov	r3, r4
 8002698:	aa64      	add	r2, sp, #400	@ 0x190
 800269a:	a934      	add	r1, sp, #208	@ 0xd0
 800269c:	a83c      	add	r0, sp, #240	@ 0xf0
 800269e:	f7ff fddf 	bl	8002260 <apply_z>
			uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80026a2:	9500      	str	r5, [sp, #0]
 80026a4:	4653      	mov	r3, sl
 80026a6:	aa3c      	add	r2, sp, #240	@ 0xf0
 80026a8:	a94c      	add	r1, sp, #304	@ 0x130
 80026aa:	a82c      	add	r0, sp, #176	@ 0xb0
 80026ac:	f7ff fb89 	bl	8001dc2 <uECC_vli_modSub>
			XYcZ_add(tx, ty, rx, ry, curve);
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	ab44      	add	r3, sp, #272	@ 0x110
 80026b4:	aa4c      	add	r2, sp, #304	@ 0x130
 80026b6:	a934      	add	r1, sp, #208	@ 0xd0
 80026b8:	a83c      	add	r0, sp, #240	@ 0xf0
 80026ba:	f7ff fdf0 	bl	800229e <XYcZ_add>
			uECC_vli_modMult_fast(z, z, tz, curve);
 80026be:	4623      	mov	r3, r4
 80026c0:	aa2c      	add	r2, sp, #176	@ 0xb0
 80026c2:	a964      	add	r1, sp, #400	@ 0x190
 80026c4:	4608      	mov	r0, r1
 80026c6:	f7ff fc3c 	bl	8001f42 <uECC_vli_modMult_fast>
	for (i = num_bits - 2; i >= 0; --i) {
 80026ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80026ce:	fa0f f888 	sxth.w	r8, r8
 80026d2:	f1b8 0f00 	cmp.w	r8, #0
 80026d6:	db15      	blt.n	8002704 <uECC_verify+0x2a0>
		curve->double_jacobian(rx, ry, z, curve);
 80026d8:	f8d4 60a4 	ldr.w	r6, [r4, #164]	@ 0xa4
 80026dc:	4623      	mov	r3, r4
 80026de:	aa64      	add	r2, sp, #400	@ 0x190
 80026e0:	a944      	add	r1, sp, #272	@ 0x110
 80026e2:	a84c      	add	r0, sp, #304	@ 0x130
 80026e4:	47b0      	blx	r6
		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 80026e6:	4641      	mov	r1, r8
 80026e8:	a874      	add	r0, sp, #464	@ 0x1d0
 80026ea:	f7ff f9ac 	bl	8001a46 <uECC_vli_testBit>
 80026ee:	1e06      	subs	r6, r0, #0
 80026f0:	bf18      	it	ne
 80026f2:	2601      	movne	r6, #1
 80026f4:	4641      	mov	r1, r8
 80026f6:	a86c      	add	r0, sp, #432	@ 0x1b0
 80026f8:	f7ff f9a5 	bl	8001a46 <uECC_vli_testBit>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d0b9      	beq.n	8002674 <uECC_verify+0x210>
 8002700:	2302      	movs	r3, #2
 8002702:	e7b8      	b.n	8002676 <uECC_verify+0x212>
	uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8002704:	462b      	mov	r3, r5
 8002706:	4652      	mov	r2, sl
 8002708:	a964      	add	r1, sp, #400	@ 0x190
 800270a:	4608      	mov	r0, r1
 800270c:	f7ff fd0b 	bl	8002126 <uECC_vli_modInv>
	apply_z(rx, ry, z, curve);
 8002710:	4623      	mov	r3, r4
 8002712:	aa64      	add	r2, sp, #400	@ 0x190
 8002714:	a944      	add	r1, sp, #272	@ 0x110
 8002716:	a84c      	add	r0, sp, #304	@ 0x130
 8002718:	f7ff fda2 	bl	8002260 <apply_z>
	if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 800271c:	9c03      	ldr	r4, [sp, #12]
 800271e:	4622      	mov	r2, r4
 8002720:	a94c      	add	r1, sp, #304	@ 0x130
 8002722:	4638      	mov	r0, r7
 8002724:	f7ff f9bd 	bl	8001aa2 <uECC_vli_cmp_unsafe>
 8002728:	2801      	cmp	r0, #1
 800272a:	d108      	bne.n	800273e <uECC_verify+0x2da>
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
 800272c:	462a      	mov	r2, r5
 800272e:	a910      	add	r1, sp, #64	@ 0x40
 8002730:	a84c      	add	r0, sp, #304	@ 0x130
 8002732:	f7ff f9d0 	bl	8001ad6 <uECC_vli_equal>
 8002736:	fab0 f080 	clz	r0, r0
 800273a:	0940      	lsrs	r0, r0, #5
 800273c:	e6d8      	b.n	80024f0 <uECC_verify+0x8c>
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
 800273e:	4623      	mov	r3, r4
 8002740:	463a      	mov	r2, r7
 8002742:	a94c      	add	r1, sp, #304	@ 0x130
 8002744:	4608      	mov	r0, r1
 8002746:	f7ff fa2c 	bl	8001ba2 <uECC_vli_sub>
 800274a:	e7ef      	b.n	800272c <uECC_verify+0x2c8>

0800274c <BigEndian>:

static inline unsigned int BigEndian(const uint8_t **c)
{
	unsigned int n = 0;

	n = (((unsigned int)(*((*c)++))) << 24);
 800274c:	6802      	ldr	r2, [r0, #0]
 800274e:	1c53      	adds	r3, r2, #1
 8002750:	6003      	str	r3, [r0, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	f813 1b02 	ldrb.w	r1, [r3], #2
	n |= ((unsigned int)(*((*c)++)) << 16);
 8002758:	6003      	str	r3, [r0, #0]
 800275a:	7853      	ldrb	r3, [r2, #1]
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
 8002762:	1cd1      	adds	r1, r2, #3
 8002764:	6001      	str	r1, [r0, #0]
 8002766:	7891      	ldrb	r1, [r2, #2]
 8002768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	n |= ((unsigned int)(*((*c)++)));
 800276c:	1d11      	adds	r1, r2, #4
 800276e:	6001      	str	r1, [r0, #0]
 8002770:	78d0      	ldrb	r0, [r2, #3]
	return n;
}
 8002772:	4318      	orrs	r0, r3
 8002774:	4770      	bx	lr
	...

08002778 <compress>:

static void compress(unsigned int *iv, const uint8_t *data)
{
 8002778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800277c:	b095      	sub	sp, #84	@ 0x54
 800277e:	9103      	str	r1, [sp, #12]
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8002780:	6805      	ldr	r5, [r0, #0]
 8002782:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002786:	6887      	ldr	r7, [r0, #8]
 8002788:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800278c:	6904      	ldr	r4, [r0, #16]
 800278e:	f8d0 a014 	ldr.w	sl, [r0, #20]
 8002792:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8002796:	f8d0 c01c 	ldr.w	ip, [r0, #28]

	for (i = 0; i < 16; ++i) {
 800279a:	2600      	movs	r6, #0
 800279c:	f8cd b004 	str.w	fp, [sp, #4]
 80027a0:	46e3      	mov	fp, ip
 80027a2:	9002      	str	r0, [sp, #8]
 80027a4:	e030      	b.n	8002808 <compress+0x90>
		n = BigEndian(&data);
 80027a6:	a803      	add	r0, sp, #12
 80027a8:	f7ff ffd0 	bl	800274c <BigEndian>
		t1 = work_space[i] = n;
 80027ac:	ab14      	add	r3, sp, #80	@ 0x50
 80027ae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80027b2:	f843 0c40 	str.w	r0, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 80027b6:	ea4f 23f4 	mov.w	r3, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80027ba:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
 80027be:	ea83 6374 	eor.w	r3, r3, r4, ror #25
 80027c2:	445b      	add	r3, fp
 80027c4:	ea04 020a 	and.w	r2, r4, sl
 80027c8:	ea29 0104 	bic.w	r1, r9, r4
 80027cc:	404a      	eors	r2, r1
 80027ce:	4413      	add	r3, r2
 80027d0:	4a4e      	ldr	r2, [pc, #312]	@ (800290c <compress+0x194>)
 80027d2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80027d6:	4413      	add	r3, r2
 80027d8:	4418      	add	r0, r3
	return (((a) >> n) | ((a) << (32 - n)));
 80027da:	ea4f 3375 	mov.w	r3, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 80027de:	ea83 03b5 	eor.w	r3, r3, r5, ror #2
 80027e2:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
 80027e6:	ea88 0207 	eor.w	r2, r8, r7
 80027ea:	402a      	ands	r2, r5
 80027ec:	ea08 0107 	and.w	r1, r8, r7
 80027f0:	404a      	eors	r2, r1
 80027f2:	4413      	add	r3, r2
	for (i = 0; i < 16; ++i) {
 80027f4:	3601      	adds	r6, #1
		h = g; g = f; f = e; e = d + t1;
 80027f6:	46cb      	mov	fp, r9
 80027f8:	46d1      	mov	r9, sl
 80027fa:	46a2      	mov	sl, r4
 80027fc:	9c01      	ldr	r4, [sp, #4]
 80027fe:	4404      	add	r4, r0
		d = c; c = b; b = a; a = t1 + t2;
 8002800:	9701      	str	r7, [sp, #4]
 8002802:	4647      	mov	r7, r8
 8002804:	46a8      	mov	r8, r5
 8002806:	18c5      	adds	r5, r0, r3
	for (i = 0; i < 16; ++i) {
 8002808:	2e0f      	cmp	r6, #15
 800280a:	d9cc      	bls.n	80027a6 <compress+0x2e>
 800280c:	46dc      	mov	ip, fp
 800280e:	f8dd b004 	ldr.w	fp, [sp, #4]
	}

	for ( ; i < 64; ++i) {
 8002812:	2e3f      	cmp	r6, #63	@ 0x3f
 8002814:	d85e      	bhi.n	80028d4 <compress+0x15c>
		s0 = work_space[(i+1)&0x0f];
 8002816:	f106 0e01 	add.w	lr, r6, #1
 800281a:	f00e 030f 	and.w	r3, lr, #15
 800281e:	aa14      	add	r2, sp, #80	@ 0x50
 8002820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002824:	f853 2c40 	ldr.w	r2, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8002828:	ea4f 43b2 	mov.w	r3, r2, ror #18
		s0 = sigma0(s0);
 800282c:	ea83 13f2 	eor.w	r3, r3, r2, ror #7
 8002830:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
		s1 = work_space[(i+14)&0x0f];
 8002834:	f106 020e 	add.w	r2, r6, #14
 8002838:	f002 020f 	and.w	r2, r2, #15
 800283c:	a914      	add	r1, sp, #80	@ 0x50
 800283e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002842:	f852 1c40 	ldr.w	r1, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8002846:	ea4f 42f1 	mov.w	r2, r1, ror #19
		s1 = sigma1(s1);
 800284a:	ea82 4271 	eor.w	r2, r2, r1, ror #17
 800284e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002852:	f006 010f 	and.w	r1, r6, #15
 8002856:	a814      	add	r0, sp, #80	@ 0x50
 8002858:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800285c:	f851 0c40 	ldr.w	r0, [r1, #-64]
 8002860:	9001      	str	r0, [sp, #4]
 8002862:	4413      	add	r3, r2
 8002864:	f106 0209 	add.w	r2, r6, #9
 8002868:	f002 020f 	and.w	r2, r2, #15
 800286c:	a814      	add	r0, sp, #80	@ 0x50
 800286e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002872:	f852 2c40 	ldr.w	r2, [r2, #-64]
 8002876:	4413      	add	r3, r2
 8002878:	9a01      	ldr	r2, [sp, #4]
 800287a:	4413      	add	r3, r2
 800287c:	f841 3c40 	str.w	r3, [r1, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8002880:	ea4f 22f4 	mov.w	r2, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002884:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
 8002888:	ea82 6274 	eor.w	r2, r2, r4, ror #25
 800288c:	4462      	add	r2, ip
 800288e:	ea04 010a 	and.w	r1, r4, sl
 8002892:	ea29 0004 	bic.w	r0, r9, r4
 8002896:	4041      	eors	r1, r0
 8002898:	440a      	add	r2, r1
 800289a:	491c      	ldr	r1, [pc, #112]	@ (800290c <compress+0x194>)
 800289c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80028a0:	440a      	add	r2, r1
 80028a2:	4413      	add	r3, r2
	return (((a) >> n) | ((a) << (32 - n)));
 80028a4:	ea4f 3275 	mov.w	r2, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 80028a8:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 80028ac:	ea82 51b5 	eor.w	r1, r2, r5, ror #22
 80028b0:	ea88 0207 	eor.w	r2, r8, r7
 80028b4:	402a      	ands	r2, r5
 80028b6:	ea08 0007 	and.w	r0, r8, r7
 80028ba:	4042      	eors	r2, r0
 80028bc:	440a      	add	r2, r1
	for ( ; i < 64; ++i) {
 80028be:	4676      	mov	r6, lr
		h = g; g = f; f = e; e = d + t1;
 80028c0:	46cc      	mov	ip, r9
 80028c2:	46d1      	mov	r9, sl
 80028c4:	46a2      	mov	sl, r4
 80028c6:	eb0b 0403 	add.w	r4, fp, r3
		d = c; c = b; b = a; a = t1 + t2;
 80028ca:	46bb      	mov	fp, r7
 80028cc:	4647      	mov	r7, r8
 80028ce:	46a8      	mov	r8, r5
 80028d0:	189d      	adds	r5, r3, r2
 80028d2:	e79e      	b.n	8002812 <compress+0x9a>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 80028d4:	9802      	ldr	r0, [sp, #8]
 80028d6:	6803      	ldr	r3, [r0, #0]
 80028d8:	442b      	add	r3, r5
 80028da:	6003      	str	r3, [r0, #0]
 80028dc:	6843      	ldr	r3, [r0, #4]
 80028de:	4443      	add	r3, r8
 80028e0:	6043      	str	r3, [r0, #4]
 80028e2:	6883      	ldr	r3, [r0, #8]
 80028e4:	443b      	add	r3, r7
 80028e6:	6083      	str	r3, [r0, #8]
 80028e8:	68c3      	ldr	r3, [r0, #12]
 80028ea:	445b      	add	r3, fp
 80028ec:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 80028ee:	6903      	ldr	r3, [r0, #16]
 80028f0:	4423      	add	r3, r4
 80028f2:	6103      	str	r3, [r0, #16]
 80028f4:	6943      	ldr	r3, [r0, #20]
 80028f6:	4453      	add	r3, sl
 80028f8:	6143      	str	r3, [r0, #20]
 80028fa:	6983      	ldr	r3, [r0, #24]
 80028fc:	444b      	add	r3, r9
 80028fe:	6183      	str	r3, [r0, #24]
 8002900:	69c3      	ldr	r3, [r0, #28]
 8002902:	4463      	add	r3, ip
 8002904:	61c3      	str	r3, [r0, #28]
}
 8002906:	b015      	add	sp, #84	@ 0x54
 8002908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290c:	08003d10 	.word	0x08003d10

08002910 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
 8002910:	b1e0      	cbz	r0, 800294c <tc_sha256_init+0x3c>
{
 8002912:	b510      	push	{r4, lr}
 8002914:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8002916:	2270      	movs	r2, #112	@ 0x70
 8002918:	2100      	movs	r1, #0
 800291a:	f000 f8be 	bl	8002a9a <_set>
	s->iv[0] = 0x6a09e667;
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <tc_sha256_init+0x40>)
 8002920:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
 8002922:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <tc_sha256_init+0x44>)
 8002924:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <tc_sha256_init+0x48>)
 8002928:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
 800292a:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <tc_sha256_init+0x4c>)
 800292c:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
 800292e:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <tc_sha256_init+0x50>)
 8002930:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <tc_sha256_init+0x54>)
 8002934:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <tc_sha256_init+0x58>)
 8002938:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 800293a:	f103 5374 	add.w	r3, r3, #1023410176	@ 0x3d000000
 800293e:	f5a3 0323 	sub.w	r3, r3, #10682368	@ 0xa30000
 8002942:	f6a3 4392 	subw	r3, r3, #3218	@ 0xc92
 8002946:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8002948:	2001      	movs	r0, #1
}
 800294a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 800294c:	2000      	movs	r0, #0
}
 800294e:	4770      	bx	lr
 8002950:	6a09e667 	.word	0x6a09e667
 8002954:	bb67ae85 	.word	0xbb67ae85
 8002958:	3c6ef372 	.word	0x3c6ef372
 800295c:	a54ff53a 	.word	0xa54ff53a
 8002960:	510e527f 	.word	0x510e527f
 8002964:	9b05688c 	.word	0x9b05688c
 8002968:	1f83d9ab 	.word	0x1f83d9ab

0800296c <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
 800296c:	b328      	cbz	r0, 80029ba <tc_sha256_update+0x4e>
{
 800296e:	b570      	push	{r4, r5, r6, lr}
 8002970:	460c      	mov	r4, r1
 8002972:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
 8002974:	b319      	cbz	r1, 80029be <tc_sha256_update+0x52>
	} else if (datalen == 0) {
 8002976:	b912      	cbnz	r2, 800297e <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
 8002978:	2001      	movs	r0, #1
 800297a:	e01d      	b.n	80029b8 <tc_sha256_update+0x4c>
{
 800297c:	4632      	mov	r2, r6
	while (datalen-- > 0) {
 800297e:	1e56      	subs	r6, r2, #1
 8002980:	b1ca      	cbz	r2, 80029b6 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
 8002982:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	66aa      	str	r2, [r5, #104]	@ 0x68
 8002988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800298c:	442b      	add	r3, r5
 800298e:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8002992:	2a3f      	cmp	r2, #63	@ 0x3f
 8002994:	d9f2      	bls.n	800297c <tc_sha256_update+0x10>
			compress(s->iv, s->leftover);
 8002996:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 800299a:	4628      	mov	r0, r5
 800299c:	f7ff feec 	bl	8002778 <compress>
			s->leftover_offset = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	66ab      	str	r3, [r5, #104]	@ 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80029a4:	6a2b      	ldr	r3, [r5, #32]
 80029a6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80029a8:	f513 7300 	adds.w	r3, r3, #512	@ 0x200
 80029ac:	f142 0200 	adc.w	r2, r2, #0
 80029b0:	622b      	str	r3, [r5, #32]
 80029b2:	626a      	str	r2, [r5, #36]	@ 0x24
 80029b4:	e7e2      	b.n	800297c <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
 80029b6:	2001      	movs	r0, #1
}
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 80029be:	2000      	movs	r0, #0
 80029c0:	e7fa      	b.n	80029b8 <tc_sha256_update+0x4c>

080029c2 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d065      	beq.n	8002a92 <tc_sha256_final+0xd0>
{
 80029c6:	b570      	push	{r4, r5, r6, lr}
 80029c8:	460d      	mov	r5, r1
 80029ca:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d062      	beq.n	8002a96 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
 80029d0:	6a0a      	ldr	r2, [r1, #32]
 80029d2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80029d4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80029d6:	00d8      	lsls	r0, r3, #3
 80029d8:	1812      	adds	r2, r2, r0
 80029da:	f141 0100 	adc.w	r1, r1, #0
 80029de:	622a      	str	r2, [r5, #32]
 80029e0:	6269      	str	r1, [r5, #36]	@ 0x24
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80029e2:	1c58      	adds	r0, r3, #1
 80029e4:	66a8      	str	r0, [r5, #104]	@ 0x68
 80029e6:	442b      	add	r3, r5
 80029e8:	2280      	movs	r2, #128	@ 0x80
 80029ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80029ee:	2838      	cmp	r0, #56	@ 0x38
 80029f0:	d82a      	bhi.n	8002a48 <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
 80029f2:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 80029f6:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 80029f8:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
 80029fc:	2100      	movs	r1, #0
 80029fe:	4430      	add	r0, r6
 8002a00:	f000 f84b 	bl	8002a9a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8002a04:	6a2a      	ldr	r2, [r5, #32]
 8002a06:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002a08:	f885 2067 	strb.w	r2, [r5, #103]	@ 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 8002a0c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002a10:	f885 1066 	strb.w	r1, [r5, #102]	@ 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8002a14:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002a18:	f885 1065 	strb.w	r1, [r5, #101]	@ 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 8002a1c:	0e12      	lsrs	r2, r2, #24
 8002a1e:	f885 2064 	strb.w	r2, [r5, #100]	@ 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 8002a22:	f885 3063 	strb.w	r3, [r5, #99]	@ 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8002a26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002a2a:	f885 2062 	strb.w	r2, [r5, #98]	@ 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8002a2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002a32:	f885 2061 	strb.w	r2, [r5, #97]	@ 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8002a36:	0e1b      	lsrs	r3, r3, #24
 8002a38:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60
	compress(s->iv, s->leftover);
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7ff fe9a 	bl	8002778 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8002a44:	2200      	movs	r2, #0
 8002a46:	e01b      	b.n	8002a80 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
 8002a48:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 8002a4c:	f1c0 0240 	rsb	r2, r0, #64	@ 0x40
 8002a50:	2100      	movs	r1, #0
 8002a52:	4430      	add	r0, r6
 8002a54:	f000 f821 	bl	8002a9a <_set>
		compress(s->iv, s->leftover);
 8002a58:	4631      	mov	r1, r6
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7ff fe8c 	bl	8002778 <compress>
		s->leftover_offset = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	66ab      	str	r3, [r5, #104]	@ 0x68
 8002a64:	e7c5      	b.n	80029f2 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8002a66:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
 8002a6a:	0e19      	lsrs	r1, r3, #24
 8002a6c:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
 8002a6e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8002a72:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
 8002a74:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002a78:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
 8002a7a:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8002a7c:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
 8002a7e:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8002a80:	2a07      	cmp	r2, #7
 8002a82:	d9f0      	bls.n	8002a66 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
 8002a84:	2270      	movs	r2, #112	@ 0x70
 8002a86:	2100      	movs	r1, #0
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 f806 	bl	8002a9a <_set>
	return TC_CRYPTO_SUCCESS;
 8002a8e:	2001      	movs	r0, #1
}
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002a92:	2000      	movs	r0, #0
}
 8002a94:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8002a96:	2000      	movs	r0, #0
 8002a98:	e7fa      	b.n	8002a90 <tc_sha256_final+0xce>

08002a9a <_set>:
		return TC_CRYPTO_FAIL;
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
 8002a9a:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
 8002a9c:	f000 fa0c 	bl	8002eb8 <memset>
}
 8002aa0:	bd08      	pop	{r3, pc}
	...

08002aa4 <std>:
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8002aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab2:	6083      	str	r3, [r0, #8]
 8002ab4:	8181      	strh	r1, [r0, #12]
 8002ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ab8:	81c2      	strh	r2, [r0, #14]
 8002aba:	6183      	str	r3, [r0, #24]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2208      	movs	r2, #8
 8002ac0:	305c      	adds	r0, #92	@ 0x5c
 8002ac2:	f000 f9f9 	bl	8002eb8 <memset>
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <std+0x58>)
 8002ac8:	6224      	str	r4, [r4, #32]
 8002aca:	6263      	str	r3, [r4, #36]	@ 0x24
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <std+0x5c>)
 8002ace:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <std+0x60>)
 8002ad2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <std+0x64>)
 8002ad6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <std+0x68>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d006      	beq.n	8002aec <std+0x48>
 8002ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ae2:	4294      	cmp	r4, r2
 8002ae4:	d002      	beq.n	8002aec <std+0x48>
 8002ae6:	33d0      	adds	r3, #208	@ 0xd0
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d105      	bne.n	8002af8 <std+0x54>
 8002aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af4:	f000 ba58 	b.w	8002fa8 <__retarget_lock_init_recursive>
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	08002d09 	.word	0x08002d09
 8002b00:	08002d2b 	.word	0x08002d2b
 8002b04:	08002d63 	.word	0x08002d63
 8002b08:	08002d87 	.word	0x08002d87
 8002b0c:	20000198 	.word	0x20000198

08002b10 <stdio_exit_handler>:
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <stdio_exit_handler+0xc>)
 8002b12:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <stdio_exit_handler+0x10>)
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <stdio_exit_handler+0x14>)
 8002b16:	f000 b869 	b.w	8002bec <_fwalk_sglue>
 8002b1a:	bf00      	nop
 8002b1c:	2000006c 	.word	0x2000006c
 8002b20:	0800385d 	.word	0x0800385d
 8002b24:	2000007c 	.word	0x2000007c

08002b28 <cleanup_stdio>:
 8002b28:	6841      	ldr	r1, [r0, #4]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <cleanup_stdio+0x34>)
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	4299      	cmp	r1, r3
 8002b30:	4604      	mov	r4, r0
 8002b32:	d001      	beq.n	8002b38 <cleanup_stdio+0x10>
 8002b34:	f000 fe92 	bl	800385c <_fflush_r>
 8002b38:	68a1      	ldr	r1, [r4, #8]
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <cleanup_stdio+0x38>)
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d002      	beq.n	8002b46 <cleanup_stdio+0x1e>
 8002b40:	4620      	mov	r0, r4
 8002b42:	f000 fe8b 	bl	800385c <_fflush_r>
 8002b46:	68e1      	ldr	r1, [r4, #12]
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <cleanup_stdio+0x3c>)
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	d004      	beq.n	8002b58 <cleanup_stdio+0x30>
 8002b4e:	4620      	mov	r0, r4
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b54:	f000 be82 	b.w	800385c <_fflush_r>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000198 	.word	0x20000198
 8002b60:	20000200 	.word	0x20000200
 8002b64:	20000268 	.word	0x20000268

08002b68 <global_stdio_init.part.0>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <global_stdio_init.part.0+0x30>)
 8002b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b9c <global_stdio_init.part.0+0x34>)
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <global_stdio_init.part.0+0x38>)
 8002b70:	4620      	mov	r0, r4
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	2104      	movs	r1, #4
 8002b76:	2200      	movs	r2, #0
 8002b78:	f7ff ff94 	bl	8002aa4 <std>
 8002b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b80:	2201      	movs	r2, #1
 8002b82:	2109      	movs	r1, #9
 8002b84:	f7ff ff8e 	bl	8002aa4 <std>
 8002b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b92:	2112      	movs	r1, #18
 8002b94:	f7ff bf86 	b.w	8002aa4 <std>
 8002b98:	200002d0 	.word	0x200002d0
 8002b9c:	20000198 	.word	0x20000198
 8002ba0:	08002b11 	.word	0x08002b11

08002ba4 <__sfp_lock_acquire>:
 8002ba4:	4801      	ldr	r0, [pc, #4]	@ (8002bac <__sfp_lock_acquire+0x8>)
 8002ba6:	f000 ba00 	b.w	8002faa <__retarget_lock_acquire_recursive>
 8002baa:	bf00      	nop
 8002bac:	200002d9 	.word	0x200002d9

08002bb0 <__sfp_lock_release>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__sfp_lock_release+0x8>)
 8002bb2:	f000 b9fb 	b.w	8002fac <__retarget_lock_release_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	200002d9 	.word	0x200002d9

08002bbc <__sinit>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f7ff fff0 	bl	8002ba4 <__sfp_lock_acquire>
 8002bc4:	6a23      	ldr	r3, [r4, #32]
 8002bc6:	b11b      	cbz	r3, 8002bd0 <__sinit+0x14>
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bcc:	f7ff bff0 	b.w	8002bb0 <__sfp_lock_release>
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__sinit+0x28>)
 8002bd2:	6223      	str	r3, [r4, #32]
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__sinit+0x2c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f5      	bne.n	8002bc8 <__sinit+0xc>
 8002bdc:	f7ff ffc4 	bl	8002b68 <global_stdio_init.part.0>
 8002be0:	e7f2      	b.n	8002bc8 <__sinit+0xc>
 8002be2:	bf00      	nop
 8002be4:	08002b29 	.word	0x08002b29
 8002be8:	200002d0 	.word	0x200002d0

08002bec <_fwalk_sglue>:
 8002bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002c00:	d505      	bpl.n	8002c0e <_fwalk_sglue+0x22>
 8002c02:	6824      	ldr	r4, [r4, #0]
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d1f7      	bne.n	8002bf8 <_fwalk_sglue+0xc>
 8002c08:	4630      	mov	r0, r6
 8002c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d907      	bls.n	8002c24 <_fwalk_sglue+0x38>
 8002c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d003      	beq.n	8002c24 <_fwalk_sglue+0x38>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4638      	mov	r0, r7
 8002c20:	47c0      	blx	r8
 8002c22:	4306      	orrs	r6, r0
 8002c24:	3568      	adds	r5, #104	@ 0x68
 8002c26:	e7e9      	b.n	8002bfc <_fwalk_sglue+0x10>

08002c28 <iprintf>:
 8002c28:	b40f      	push	{r0, r1, r2, r3}
 8002c2a:	b507      	push	{r0, r1, r2, lr}
 8002c2c:	4906      	ldr	r1, [pc, #24]	@ (8002c48 <iprintf+0x20>)
 8002c2e:	ab04      	add	r3, sp, #16
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c36:	6881      	ldr	r1, [r0, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	f000 fae5 	bl	8003208 <_vfiprintf_r>
 8002c3e:	b003      	add	sp, #12
 8002c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c44:	b004      	add	sp, #16
 8002c46:	4770      	bx	lr
 8002c48:	20000078 	.word	0x20000078

08002c4c <_puts_r>:
 8002c4c:	6a03      	ldr	r3, [r0, #32]
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	4605      	mov	r5, r0
 8002c52:	460e      	mov	r6, r1
 8002c54:	6884      	ldr	r4, [r0, #8]
 8002c56:	b90b      	cbnz	r3, 8002c5c <_puts_r+0x10>
 8002c58:	f7ff ffb0 	bl	8002bbc <__sinit>
 8002c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c5e:	07db      	lsls	r3, r3, #31
 8002c60:	d405      	bmi.n	8002c6e <_puts_r+0x22>
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	0598      	lsls	r0, r3, #22
 8002c66:	d402      	bmi.n	8002c6e <_puts_r+0x22>
 8002c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c6a:	f000 f99e 	bl	8002faa <__retarget_lock_acquire_recursive>
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	0719      	lsls	r1, r3, #28
 8002c72:	d502      	bpl.n	8002c7a <_puts_r+0x2e>
 8002c74:	6923      	ldr	r3, [r4, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d135      	bne.n	8002ce6 <_puts_r+0x9a>
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f000 f8c5 	bl	8002e0c <__swsetup_r>
 8002c82:	b380      	cbz	r0, 8002ce6 <_puts_r+0x9a>
 8002c84:	f04f 35ff 	mov.w	r5, #4294967295
 8002c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c8a:	07da      	lsls	r2, r3, #31
 8002c8c:	d405      	bmi.n	8002c9a <_puts_r+0x4e>
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	059b      	lsls	r3, r3, #22
 8002c92:	d402      	bmi.n	8002c9a <_puts_r+0x4e>
 8002c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c96:	f000 f989 	bl	8002fac <__retarget_lock_release_recursive>
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da04      	bge.n	8002cac <_puts_r+0x60>
 8002ca2:	69a2      	ldr	r2, [r4, #24]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dc17      	bgt.n	8002cd8 <_puts_r+0x8c>
 8002ca8:	290a      	cmp	r1, #10
 8002caa:	d015      	beq.n	8002cd8 <_puts_r+0x8c>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	6022      	str	r2, [r4, #0]
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	68a3      	ldr	r3, [r4, #8]
 8002cb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60a3      	str	r3, [r4, #8]
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	d1ed      	bne.n	8002c9e <_puts_r+0x52>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da11      	bge.n	8002cea <_puts_r+0x9e>
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	210a      	movs	r1, #10
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 f85f 	bl	8002d8e <__swbuf_r>
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d0d7      	beq.n	8002c84 <_puts_r+0x38>
 8002cd4:	250a      	movs	r5, #10
 8002cd6:	e7d7      	b.n	8002c88 <_puts_r+0x3c>
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 f857 	bl	8002d8e <__swbuf_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d1e7      	bne.n	8002cb4 <_puts_r+0x68>
 8002ce4:	e7ce      	b.n	8002c84 <_puts_r+0x38>
 8002ce6:	3e01      	subs	r6, #1
 8002ce8:	e7e4      	b.n	8002cb4 <_puts_r+0x68>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e7ee      	b.n	8002cd4 <_puts_r+0x88>
	...

08002cf8 <puts>:
 8002cf8:	4b02      	ldr	r3, [pc, #8]	@ (8002d04 <puts+0xc>)
 8002cfa:	4601      	mov	r1, r0
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f7ff bfa5 	b.w	8002c4c <_puts_r>
 8002d02:	bf00      	nop
 8002d04:	20000078 	.word	0x20000078

08002d08 <__sread>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d10:	f000 f8fc 	bl	8002f0c <_read_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	bfab      	itete	ge
 8002d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d1c:	181b      	addge	r3, r3, r0
 8002d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d22:	bfac      	ite	ge
 8002d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d26:	81a3      	strhlt	r3, [r4, #12]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <__swrite>:
 8002d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2e:	461f      	mov	r7, r3
 8002d30:	898b      	ldrh	r3, [r1, #12]
 8002d32:	4605      	mov	r5, r0
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	460c      	mov	r4, r1
 8002d38:	4616      	mov	r6, r2
 8002d3a:	d505      	bpl.n	8002d48 <__swrite+0x1e>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d44:	f000 f8d0 	bl	8002ee8 <_lseek_r>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d50:	81a3      	strh	r3, [r4, #12]
 8002d52:	4628      	mov	r0, r5
 8002d54:	463b      	mov	r3, r7
 8002d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d5e:	f000 b8e7 	b.w	8002f30 <_write_r>

08002d62 <__sseek>:
 8002d62:	b510      	push	{r4, lr}
 8002d64:	460c      	mov	r4, r1
 8002d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6a:	f000 f8bd 	bl	8002ee8 <_lseek_r>
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	bf15      	itete	ne
 8002d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d7e:	81a3      	strheq	r3, [r4, #12]
 8002d80:	bf18      	it	ne
 8002d82:	81a3      	strhne	r3, [r4, #12]
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <__sclose>:
 8002d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d8a:	f000 b89d 	b.w	8002ec8 <_close_r>

08002d8e <__swbuf_r>:
 8002d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d90:	460e      	mov	r6, r1
 8002d92:	4614      	mov	r4, r2
 8002d94:	4605      	mov	r5, r0
 8002d96:	b118      	cbz	r0, 8002da0 <__swbuf_r+0x12>
 8002d98:	6a03      	ldr	r3, [r0, #32]
 8002d9a:	b90b      	cbnz	r3, 8002da0 <__swbuf_r+0x12>
 8002d9c:	f7ff ff0e 	bl	8002bbc <__sinit>
 8002da0:	69a3      	ldr	r3, [r4, #24]
 8002da2:	60a3      	str	r3, [r4, #8]
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	071a      	lsls	r2, r3, #28
 8002da8:	d501      	bpl.n	8002dae <__swbuf_r+0x20>
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	b943      	cbnz	r3, 8002dc0 <__swbuf_r+0x32>
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 f82b 	bl	8002e0c <__swsetup_r>
 8002db6:	b118      	cbz	r0, 8002dc0 <__swbuf_r+0x32>
 8002db8:	f04f 37ff 	mov.w	r7, #4294967295
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	6922      	ldr	r2, [r4, #16]
 8002dc4:	b2f6      	uxtb	r6, r6
 8002dc6:	1a98      	subs	r0, r3, r2
 8002dc8:	6963      	ldr	r3, [r4, #20]
 8002dca:	4637      	mov	r7, r6
 8002dcc:	4283      	cmp	r3, r0
 8002dce:	dc05      	bgt.n	8002ddc <__swbuf_r+0x4e>
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f000 fd42 	bl	800385c <_fflush_r>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d1ed      	bne.n	8002db8 <__swbuf_r+0x2a>
 8002ddc:	68a3      	ldr	r3, [r4, #8]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	60a3      	str	r3, [r4, #8]
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	6022      	str	r2, [r4, #0]
 8002de8:	701e      	strb	r6, [r3, #0]
 8002dea:	6962      	ldr	r2, [r4, #20]
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d004      	beq.n	8002dfc <__swbuf_r+0x6e>
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	07db      	lsls	r3, r3, #31
 8002df6:	d5e1      	bpl.n	8002dbc <__swbuf_r+0x2e>
 8002df8:	2e0a      	cmp	r6, #10
 8002dfa:	d1df      	bne.n	8002dbc <__swbuf_r+0x2e>
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 fd2c 	bl	800385c <_fflush_r>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d0d9      	beq.n	8002dbc <__swbuf_r+0x2e>
 8002e08:	e7d6      	b.n	8002db8 <__swbuf_r+0x2a>
	...

08002e0c <__swsetup_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <__swsetup_r+0xa8>)
 8002e10:	4605      	mov	r5, r0
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	460c      	mov	r4, r1
 8002e16:	b118      	cbz	r0, 8002e20 <__swsetup_r+0x14>
 8002e18:	6a03      	ldr	r3, [r0, #32]
 8002e1a:	b90b      	cbnz	r3, 8002e20 <__swsetup_r+0x14>
 8002e1c:	f7ff fece 	bl	8002bbc <__sinit>
 8002e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e24:	0719      	lsls	r1, r3, #28
 8002e26:	d422      	bmi.n	8002e6e <__swsetup_r+0x62>
 8002e28:	06da      	lsls	r2, r3, #27
 8002e2a:	d407      	bmi.n	8002e3c <__swsetup_r+0x30>
 8002e2c:	2209      	movs	r2, #9
 8002e2e:	602a      	str	r2, [r5, #0]
 8002e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	e033      	b.n	8002ea4 <__swsetup_r+0x98>
 8002e3c:	0758      	lsls	r0, r3, #29
 8002e3e:	d512      	bpl.n	8002e66 <__swsetup_r+0x5a>
 8002e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e42:	b141      	cbz	r1, 8002e56 <__swsetup_r+0x4a>
 8002e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d002      	beq.n	8002e52 <__swsetup_r+0x46>
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 f8bd 	bl	8002fcc <_free_r>
 8002e52:	2300      	movs	r3, #0
 8002e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e5c:	81a3      	strh	r3, [r4, #12]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6063      	str	r3, [r4, #4]
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	81a3      	strh	r3, [r4, #12]
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	b94b      	cbnz	r3, 8002e86 <__swsetup_r+0x7a>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e7c:	d003      	beq.n	8002e86 <__swsetup_r+0x7a>
 8002e7e:	4621      	mov	r1, r4
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 fd38 	bl	80038f6 <__smakebuf_r>
 8002e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8a:	f013 0201 	ands.w	r2, r3, #1
 8002e8e:	d00a      	beq.n	8002ea6 <__swsetup_r+0x9a>
 8002e90:	2200      	movs	r2, #0
 8002e92:	60a2      	str	r2, [r4, #8]
 8002e94:	6962      	ldr	r2, [r4, #20]
 8002e96:	4252      	negs	r2, r2
 8002e98:	61a2      	str	r2, [r4, #24]
 8002e9a:	6922      	ldr	r2, [r4, #16]
 8002e9c:	b942      	cbnz	r2, 8002eb0 <__swsetup_r+0xa4>
 8002e9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ea2:	d1c5      	bne.n	8002e30 <__swsetup_r+0x24>
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	0799      	lsls	r1, r3, #30
 8002ea8:	bf58      	it	pl
 8002eaa:	6962      	ldrpl	r2, [r4, #20]
 8002eac:	60a2      	str	r2, [r4, #8]
 8002eae:	e7f4      	b.n	8002e9a <__swsetup_r+0x8e>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f7      	b.n	8002ea4 <__swsetup_r+0x98>
 8002eb4:	20000078 	.word	0x20000078

08002eb8 <memset>:
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4402      	add	r2, r0
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <memset+0xa>
 8002ec0:	4770      	bx	lr
 8002ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec6:	e7f9      	b.n	8002ebc <memset+0x4>

08002ec8 <_close_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4d05      	ldr	r5, [pc, #20]	@ (8002ee4 <_close_r+0x1c>)
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	602b      	str	r3, [r5, #0]
 8002ed4:	f7fd fca6 	bl	8000824 <_close>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_close_r+0x1a>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_close_r+0x1a>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	200002d4 	.word	0x200002d4

08002ee8 <_lseek_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4d05      	ldr	r5, [pc, #20]	@ (8002f08 <_lseek_r+0x20>)
 8002ef4:	602a      	str	r2, [r5, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7fd fc9e 	bl	8000838 <_lseek>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_lseek_r+0x1e>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_lseek_r+0x1e>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200002d4 	.word	0x200002d4

08002f0c <_read_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	2200      	movs	r2, #0
 8002f16:	4d05      	ldr	r5, [pc, #20]	@ (8002f2c <_read_r+0x20>)
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f7fd fc64 	bl	80007e8 <_read>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_read_r+0x1e>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_read_r+0x1e>
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	200002d4 	.word	0x200002d4

08002f30 <_write_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4d05      	ldr	r5, [pc, #20]	@ (8002f50 <_write_r+0x20>)
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7fd fc62 	bl	8000808 <_write>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_write_r+0x1e>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_write_r+0x1e>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200002d4 	.word	0x200002d4

08002f54 <__errno>:
 8002f54:	4b01      	ldr	r3, [pc, #4]	@ (8002f5c <__errno+0x8>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000078 	.word	0x20000078

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	2600      	movs	r6, #0
 8002f64:	4d0c      	ldr	r5, [pc, #48]	@ (8002f98 <__libc_init_array+0x38>)
 8002f66:	4c0d      	ldr	r4, [pc, #52]	@ (8002f9c <__libc_init_array+0x3c>)
 8002f68:	1b64      	subs	r4, r4, r5
 8002f6a:	10a4      	asrs	r4, r4, #2
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	f000 fd3e 	bl	80039f0 <_init>
 8002f74:	2600      	movs	r6, #0
 8002f76:	4d0a      	ldr	r5, [pc, #40]	@ (8002fa0 <__libc_init_array+0x40>)
 8002f78:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa4 <__libc_init_array+0x44>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	08003e44 	.word	0x08003e44
 8002f9c:	08003e44 	.word	0x08003e44
 8002fa0:	08003e44 	.word	0x08003e44
 8002fa4:	08003e48 	.word	0x08003e48

08002fa8 <__retarget_lock_init_recursive>:
 8002fa8:	4770      	bx	lr

08002faa <__retarget_lock_acquire_recursive>:
 8002faa:	4770      	bx	lr

08002fac <__retarget_lock_release_recursive>:
 8002fac:	4770      	bx	lr

08002fae <memcpy>:
 8002fae:	440a      	add	r2, r1
 8002fb0:	4291      	cmp	r1, r2
 8002fb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fb6:	d100      	bne.n	8002fba <memcpy+0xc>
 8002fb8:	4770      	bx	lr
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc0:	4291      	cmp	r1, r2
 8002fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc6:	d1f9      	bne.n	8002fbc <memcpy+0xe>
 8002fc8:	bd10      	pop	{r4, pc}
	...

08002fcc <_free_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d040      	beq.n	8003056 <_free_r+0x8a>
 8002fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd8:	1f0c      	subs	r4, r1, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfb8      	it	lt
 8002fde:	18e4      	addlt	r4, r4, r3
 8002fe0:	f000 f8de 	bl	80031a0 <__malloc_lock>
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <_free_r+0x8c>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	b933      	cbnz	r3, 8002ff8 <_free_r+0x2c>
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6014      	str	r4, [r2, #0]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff4:	f000 b8da 	b.w	80031ac <__malloc_unlock>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d908      	bls.n	800300e <_free_r+0x42>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	1821      	adds	r1, r4, r0
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	e7ed      	b.n	8002fea <_free_r+0x1e>
 800300e:	461a      	mov	r2, r3
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b10b      	cbz	r3, 8003018 <_free_r+0x4c>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d9fa      	bls.n	800300e <_free_r+0x42>
 8003018:	6811      	ldr	r1, [r2, #0]
 800301a:	1850      	adds	r0, r2, r1
 800301c:	42a0      	cmp	r0, r4
 800301e:	d10b      	bne.n	8003038 <_free_r+0x6c>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	4401      	add	r1, r0
 8003024:	1850      	adds	r0, r2, r1
 8003026:	4283      	cmp	r3, r0
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	d1e0      	bne.n	8002fee <_free_r+0x22>
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4408      	add	r0, r1
 8003032:	6010      	str	r0, [r2, #0]
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	e7da      	b.n	8002fee <_free_r+0x22>
 8003038:	d902      	bls.n	8003040 <_free_r+0x74>
 800303a:	230c      	movs	r3, #12
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	e7d6      	b.n	8002fee <_free_r+0x22>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf01      	itttt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	1809      	addeq	r1, r1, r0
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6054      	str	r4, [r2, #4]
 8003054:	e7cb      	b.n	8002fee <_free_r+0x22>
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	200002e0 	.word	0x200002e0

0800305c <sbrk_aligned>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4e0f      	ldr	r6, [pc, #60]	@ (800309c <sbrk_aligned+0x40>)
 8003060:	460c      	mov	r4, r1
 8003062:	6831      	ldr	r1, [r6, #0]
 8003064:	4605      	mov	r5, r0
 8003066:	b911      	cbnz	r1, 800306e <sbrk_aligned+0x12>
 8003068:	f000 fca4 	bl	80039b4 <_sbrk_r>
 800306c:	6030      	str	r0, [r6, #0]
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 fc9f 	bl	80039b4 <_sbrk_r>
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	d103      	bne.n	8003082 <sbrk_aligned+0x26>
 800307a:	f04f 34ff 	mov.w	r4, #4294967295
 800307e:	4620      	mov	r0, r4
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	1cc4      	adds	r4, r0, #3
 8003084:	f024 0403 	bic.w	r4, r4, #3
 8003088:	42a0      	cmp	r0, r4
 800308a:	d0f8      	beq.n	800307e <sbrk_aligned+0x22>
 800308c:	1a21      	subs	r1, r4, r0
 800308e:	4628      	mov	r0, r5
 8003090:	f000 fc90 	bl	80039b4 <_sbrk_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d1f2      	bne.n	800307e <sbrk_aligned+0x22>
 8003098:	e7ef      	b.n	800307a <sbrk_aligned+0x1e>
 800309a:	bf00      	nop
 800309c:	200002dc 	.word	0x200002dc

080030a0 <_malloc_r>:
 80030a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030a4:	1ccd      	adds	r5, r1, #3
 80030a6:	f025 0503 	bic.w	r5, r5, #3
 80030aa:	3508      	adds	r5, #8
 80030ac:	2d0c      	cmp	r5, #12
 80030ae:	bf38      	it	cc
 80030b0:	250c      	movcc	r5, #12
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	4606      	mov	r6, r0
 80030b6:	db01      	blt.n	80030bc <_malloc_r+0x1c>
 80030b8:	42a9      	cmp	r1, r5
 80030ba:	d904      	bls.n	80030c6 <_malloc_r+0x26>
 80030bc:	230c      	movs	r3, #12
 80030be:	6033      	str	r3, [r6, #0]
 80030c0:	2000      	movs	r0, #0
 80030c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800319c <_malloc_r+0xfc>
 80030ca:	f000 f869 	bl	80031a0 <__malloc_lock>
 80030ce:	f8d8 3000 	ldr.w	r3, [r8]
 80030d2:	461c      	mov	r4, r3
 80030d4:	bb44      	cbnz	r4, 8003128 <_malloc_r+0x88>
 80030d6:	4629      	mov	r1, r5
 80030d8:	4630      	mov	r0, r6
 80030da:	f7ff ffbf 	bl	800305c <sbrk_aligned>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	4604      	mov	r4, r0
 80030e2:	d158      	bne.n	8003196 <_malloc_r+0xf6>
 80030e4:	f8d8 4000 	ldr.w	r4, [r8]
 80030e8:	4627      	mov	r7, r4
 80030ea:	2f00      	cmp	r7, #0
 80030ec:	d143      	bne.n	8003176 <_malloc_r+0xd6>
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	d04b      	beq.n	800318a <_malloc_r+0xea>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	4639      	mov	r1, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	eb04 0903 	add.w	r9, r4, r3
 80030fc:	f000 fc5a 	bl	80039b4 <_sbrk_r>
 8003100:	4581      	cmp	r9, r0
 8003102:	d142      	bne.n	800318a <_malloc_r+0xea>
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	4630      	mov	r0, r6
 8003108:	1a6d      	subs	r5, r5, r1
 800310a:	4629      	mov	r1, r5
 800310c:	f7ff ffa6 	bl	800305c <sbrk_aligned>
 8003110:	3001      	adds	r0, #1
 8003112:	d03a      	beq.n	800318a <_malloc_r+0xea>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	442b      	add	r3, r5
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	f8d8 3000 	ldr.w	r3, [r8]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	bb62      	cbnz	r2, 800317c <_malloc_r+0xdc>
 8003122:	f8c8 7000 	str.w	r7, [r8]
 8003126:	e00f      	b.n	8003148 <_malloc_r+0xa8>
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	1b52      	subs	r2, r2, r5
 800312c:	d420      	bmi.n	8003170 <_malloc_r+0xd0>
 800312e:	2a0b      	cmp	r2, #11
 8003130:	d917      	bls.n	8003162 <_malloc_r+0xc2>
 8003132:	1961      	adds	r1, r4, r5
 8003134:	42a3      	cmp	r3, r4
 8003136:	6025      	str	r5, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	6059      	strne	r1, [r3, #4]
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	bf08      	it	eq
 8003140:	f8c8 1000 	streq.w	r1, [r8]
 8003144:	5162      	str	r2, [r4, r5]
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	4630      	mov	r0, r6
 800314a:	f000 f82f 	bl	80031ac <__malloc_unlock>
 800314e:	f104 000b 	add.w	r0, r4, #11
 8003152:	1d23      	adds	r3, r4, #4
 8003154:	f020 0007 	bic.w	r0, r0, #7
 8003158:	1ac2      	subs	r2, r0, r3
 800315a:	bf1c      	itt	ne
 800315c:	1a1b      	subne	r3, r3, r0
 800315e:	50a3      	strne	r3, [r4, r2]
 8003160:	e7af      	b.n	80030c2 <_malloc_r+0x22>
 8003162:	6862      	ldr	r2, [r4, #4]
 8003164:	42a3      	cmp	r3, r4
 8003166:	bf0c      	ite	eq
 8003168:	f8c8 2000 	streq.w	r2, [r8]
 800316c:	605a      	strne	r2, [r3, #4]
 800316e:	e7eb      	b.n	8003148 <_malloc_r+0xa8>
 8003170:	4623      	mov	r3, r4
 8003172:	6864      	ldr	r4, [r4, #4]
 8003174:	e7ae      	b.n	80030d4 <_malloc_r+0x34>
 8003176:	463c      	mov	r4, r7
 8003178:	687f      	ldr	r7, [r7, #4]
 800317a:	e7b6      	b.n	80030ea <_malloc_r+0x4a>
 800317c:	461a      	mov	r2, r3
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	42a3      	cmp	r3, r4
 8003182:	d1fb      	bne.n	800317c <_malloc_r+0xdc>
 8003184:	2300      	movs	r3, #0
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	e7de      	b.n	8003148 <_malloc_r+0xa8>
 800318a:	230c      	movs	r3, #12
 800318c:	4630      	mov	r0, r6
 800318e:	6033      	str	r3, [r6, #0]
 8003190:	f000 f80c 	bl	80031ac <__malloc_unlock>
 8003194:	e794      	b.n	80030c0 <_malloc_r+0x20>
 8003196:	6005      	str	r5, [r0, #0]
 8003198:	e7d6      	b.n	8003148 <_malloc_r+0xa8>
 800319a:	bf00      	nop
 800319c:	200002e0 	.word	0x200002e0

080031a0 <__malloc_lock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	@ (80031a8 <__malloc_lock+0x8>)
 80031a2:	f7ff bf02 	b.w	8002faa <__retarget_lock_acquire_recursive>
 80031a6:	bf00      	nop
 80031a8:	200002d8 	.word	0x200002d8

080031ac <__malloc_unlock>:
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <__malloc_unlock+0x8>)
 80031ae:	f7ff befd 	b.w	8002fac <__retarget_lock_release_recursive>
 80031b2:	bf00      	nop
 80031b4:	200002d8 	.word	0x200002d8

080031b8 <__sfputc_r>:
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	b410      	push	{r4}
 80031bc:	3b01      	subs	r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	6093      	str	r3, [r2, #8]
 80031c2:	da07      	bge.n	80031d4 <__sfputc_r+0x1c>
 80031c4:	6994      	ldr	r4, [r2, #24]
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	db01      	blt.n	80031ce <__sfputc_r+0x16>
 80031ca:	290a      	cmp	r1, #10
 80031cc:	d102      	bne.n	80031d4 <__sfputc_r+0x1c>
 80031ce:	bc10      	pop	{r4}
 80031d0:	f7ff bddd 	b.w	8002d8e <__swbuf_r>
 80031d4:	6813      	ldr	r3, [r2, #0]
 80031d6:	1c58      	adds	r0, r3, #1
 80031d8:	6010      	str	r0, [r2, #0]
 80031da:	7019      	strb	r1, [r3, #0]
 80031dc:	4608      	mov	r0, r1
 80031de:	bc10      	pop	{r4}
 80031e0:	4770      	bx	lr

080031e2 <__sfputs_r>:
 80031e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e4:	4606      	mov	r6, r0
 80031e6:	460f      	mov	r7, r1
 80031e8:	4614      	mov	r4, r2
 80031ea:	18d5      	adds	r5, r2, r3
 80031ec:	42ac      	cmp	r4, r5
 80031ee:	d101      	bne.n	80031f4 <__sfputs_r+0x12>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e007      	b.n	8003204 <__sfputs_r+0x22>
 80031f4:	463a      	mov	r2, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fc:	f7ff ffdc 	bl	80031b8 <__sfputc_r>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d1f3      	bne.n	80031ec <__sfputs_r+0xa>
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003208 <_vfiprintf_r>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	460d      	mov	r5, r1
 800320e:	4614      	mov	r4, r2
 8003210:	4698      	mov	r8, r3
 8003212:	4606      	mov	r6, r0
 8003214:	b09d      	sub	sp, #116	@ 0x74
 8003216:	b118      	cbz	r0, 8003220 <_vfiprintf_r+0x18>
 8003218:	6a03      	ldr	r3, [r0, #32]
 800321a:	b90b      	cbnz	r3, 8003220 <_vfiprintf_r+0x18>
 800321c:	f7ff fcce 	bl	8002bbc <__sinit>
 8003220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003222:	07d9      	lsls	r1, r3, #31
 8003224:	d405      	bmi.n	8003232 <_vfiprintf_r+0x2a>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	059a      	lsls	r2, r3, #22
 800322a:	d402      	bmi.n	8003232 <_vfiprintf_r+0x2a>
 800322c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800322e:	f7ff febc 	bl	8002faa <__retarget_lock_acquire_recursive>
 8003232:	89ab      	ldrh	r3, [r5, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	d501      	bpl.n	800323c <_vfiprintf_r+0x34>
 8003238:	692b      	ldr	r3, [r5, #16]
 800323a:	b99b      	cbnz	r3, 8003264 <_vfiprintf_r+0x5c>
 800323c:	4629      	mov	r1, r5
 800323e:	4630      	mov	r0, r6
 8003240:	f7ff fde4 	bl	8002e0c <__swsetup_r>
 8003244:	b170      	cbz	r0, 8003264 <_vfiprintf_r+0x5c>
 8003246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003248:	07dc      	lsls	r4, r3, #31
 800324a:	d504      	bpl.n	8003256 <_vfiprintf_r+0x4e>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	b01d      	add	sp, #116	@ 0x74
 8003252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	0598      	lsls	r0, r3, #22
 800325a:	d4f7      	bmi.n	800324c <_vfiprintf_r+0x44>
 800325c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800325e:	f7ff fea5 	bl	8002fac <__retarget_lock_release_recursive>
 8003262:	e7f3      	b.n	800324c <_vfiprintf_r+0x44>
 8003264:	2300      	movs	r3, #0
 8003266:	9309      	str	r3, [sp, #36]	@ 0x24
 8003268:	2320      	movs	r3, #32
 800326a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800326e:	2330      	movs	r3, #48	@ 0x30
 8003270:	f04f 0901 	mov.w	r9, #1
 8003274:	f8cd 800c 	str.w	r8, [sp, #12]
 8003278:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003424 <_vfiprintf_r+0x21c>
 800327c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003280:	4623      	mov	r3, r4
 8003282:	469a      	mov	sl, r3
 8003284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003288:	b10a      	cbz	r2, 800328e <_vfiprintf_r+0x86>
 800328a:	2a25      	cmp	r2, #37	@ 0x25
 800328c:	d1f9      	bne.n	8003282 <_vfiprintf_r+0x7a>
 800328e:	ebba 0b04 	subs.w	fp, sl, r4
 8003292:	d00b      	beq.n	80032ac <_vfiprintf_r+0xa4>
 8003294:	465b      	mov	r3, fp
 8003296:	4622      	mov	r2, r4
 8003298:	4629      	mov	r1, r5
 800329a:	4630      	mov	r0, r6
 800329c:	f7ff ffa1 	bl	80031e2 <__sfputs_r>
 80032a0:	3001      	adds	r0, #1
 80032a2:	f000 80a7 	beq.w	80033f4 <_vfiprintf_r+0x1ec>
 80032a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032a8:	445a      	add	r2, fp
 80032aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80032ac:	f89a 3000 	ldrb.w	r3, [sl]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 809f 	beq.w	80033f4 <_vfiprintf_r+0x1ec>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c0:	f10a 0a01 	add.w	sl, sl, #1
 80032c4:	9304      	str	r3, [sp, #16]
 80032c6:	9307      	str	r3, [sp, #28]
 80032c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80032ce:	4654      	mov	r4, sl
 80032d0:	2205      	movs	r2, #5
 80032d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d6:	4853      	ldr	r0, [pc, #332]	@ (8003424 <_vfiprintf_r+0x21c>)
 80032d8:	f000 fb7c 	bl	80039d4 <memchr>
 80032dc:	9a04      	ldr	r2, [sp, #16]
 80032de:	b9d8      	cbnz	r0, 8003318 <_vfiprintf_r+0x110>
 80032e0:	06d1      	lsls	r1, r2, #27
 80032e2:	bf44      	itt	mi
 80032e4:	2320      	movmi	r3, #32
 80032e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ea:	0713      	lsls	r3, r2, #28
 80032ec:	bf44      	itt	mi
 80032ee:	232b      	movmi	r3, #43	@ 0x2b
 80032f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f4:	f89a 3000 	ldrb.w	r3, [sl]
 80032f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032fa:	d015      	beq.n	8003328 <_vfiprintf_r+0x120>
 80032fc:	4654      	mov	r4, sl
 80032fe:	2000      	movs	r0, #0
 8003300:	f04f 0c0a 	mov.w	ip, #10
 8003304:	9a07      	ldr	r2, [sp, #28]
 8003306:	4621      	mov	r1, r4
 8003308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330c:	3b30      	subs	r3, #48	@ 0x30
 800330e:	2b09      	cmp	r3, #9
 8003310:	d94b      	bls.n	80033aa <_vfiprintf_r+0x1a2>
 8003312:	b1b0      	cbz	r0, 8003342 <_vfiprintf_r+0x13a>
 8003314:	9207      	str	r2, [sp, #28]
 8003316:	e014      	b.n	8003342 <_vfiprintf_r+0x13a>
 8003318:	eba0 0308 	sub.w	r3, r0, r8
 800331c:	fa09 f303 	lsl.w	r3, r9, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	46a2      	mov	sl, r4
 8003324:	9304      	str	r3, [sp, #16]
 8003326:	e7d2      	b.n	80032ce <_vfiprintf_r+0xc6>
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	1d19      	adds	r1, r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	9103      	str	r1, [sp, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	bfbb      	ittet	lt
 8003334:	425b      	neglt	r3, r3
 8003336:	f042 0202 	orrlt.w	r2, r2, #2
 800333a:	9307      	strge	r3, [sp, #28]
 800333c:	9307      	strlt	r3, [sp, #28]
 800333e:	bfb8      	it	lt
 8003340:	9204      	strlt	r2, [sp, #16]
 8003342:	7823      	ldrb	r3, [r4, #0]
 8003344:	2b2e      	cmp	r3, #46	@ 0x2e
 8003346:	d10a      	bne.n	800335e <_vfiprintf_r+0x156>
 8003348:	7863      	ldrb	r3, [r4, #1]
 800334a:	2b2a      	cmp	r3, #42	@ 0x2a
 800334c:	d132      	bne.n	80033b4 <_vfiprintf_r+0x1ac>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	3402      	adds	r4, #2
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	9203      	str	r2, [sp, #12]
 8003358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800335c:	9305      	str	r3, [sp, #20]
 800335e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003428 <_vfiprintf_r+0x220>
 8003362:	2203      	movs	r2, #3
 8003364:	4650      	mov	r0, sl
 8003366:	7821      	ldrb	r1, [r4, #0]
 8003368:	f000 fb34 	bl	80039d4 <memchr>
 800336c:	b138      	cbz	r0, 800337e <_vfiprintf_r+0x176>
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	9b04      	ldr	r3, [sp, #16]
 8003372:	eba0 000a 	sub.w	r0, r0, sl
 8003376:	4082      	lsls	r2, r0
 8003378:	4313      	orrs	r3, r2
 800337a:	3401      	adds	r4, #1
 800337c:	9304      	str	r3, [sp, #16]
 800337e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003382:	2206      	movs	r2, #6
 8003384:	4829      	ldr	r0, [pc, #164]	@ (800342c <_vfiprintf_r+0x224>)
 8003386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800338a:	f000 fb23 	bl	80039d4 <memchr>
 800338e:	2800      	cmp	r0, #0
 8003390:	d03f      	beq.n	8003412 <_vfiprintf_r+0x20a>
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <_vfiprintf_r+0x228>)
 8003394:	bb1b      	cbnz	r3, 80033de <_vfiprintf_r+0x1d6>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	3307      	adds	r3, #7
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	3308      	adds	r3, #8
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a4:	443b      	add	r3, r7
 80033a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033a8:	e76a      	b.n	8003280 <_vfiprintf_r+0x78>
 80033aa:	460c      	mov	r4, r1
 80033ac:	2001      	movs	r0, #1
 80033ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80033b2:	e7a8      	b.n	8003306 <_vfiprintf_r+0xfe>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f04f 0c0a 	mov.w	ip, #10
 80033ba:	4619      	mov	r1, r3
 80033bc:	3401      	adds	r4, #1
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c6:	3a30      	subs	r2, #48	@ 0x30
 80033c8:	2a09      	cmp	r2, #9
 80033ca:	d903      	bls.n	80033d4 <_vfiprintf_r+0x1cc>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0c6      	beq.n	800335e <_vfiprintf_r+0x156>
 80033d0:	9105      	str	r1, [sp, #20]
 80033d2:	e7c4      	b.n	800335e <_vfiprintf_r+0x156>
 80033d4:	4604      	mov	r4, r0
 80033d6:	2301      	movs	r3, #1
 80033d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033dc:	e7f0      	b.n	80033c0 <_vfiprintf_r+0x1b8>
 80033de:	ab03      	add	r3, sp, #12
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4630      	mov	r0, r6
 80033e6:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <_vfiprintf_r+0x22c>)
 80033e8:	a904      	add	r1, sp, #16
 80033ea:	f3af 8000 	nop.w
 80033ee:	4607      	mov	r7, r0
 80033f0:	1c78      	adds	r0, r7, #1
 80033f2:	d1d6      	bne.n	80033a2 <_vfiprintf_r+0x19a>
 80033f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033f6:	07d9      	lsls	r1, r3, #31
 80033f8:	d405      	bmi.n	8003406 <_vfiprintf_r+0x1fe>
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	059a      	lsls	r2, r3, #22
 80033fe:	d402      	bmi.n	8003406 <_vfiprintf_r+0x1fe>
 8003400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003402:	f7ff fdd3 	bl	8002fac <__retarget_lock_release_recursive>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af1f 	bmi.w	800324c <_vfiprintf_r+0x44>
 800340e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003410:	e71e      	b.n	8003250 <_vfiprintf_r+0x48>
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4630      	mov	r0, r6
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <_vfiprintf_r+0x22c>)
 800341c:	a904      	add	r1, sp, #16
 800341e:	f000 f87d 	bl	800351c <_printf_i>
 8003422:	e7e4      	b.n	80033ee <_vfiprintf_r+0x1e6>
 8003424:	08003e10 	.word	0x08003e10
 8003428:	08003e16 	.word	0x08003e16
 800342c:	08003e1a 	.word	0x08003e1a
 8003430:	00000000 	.word	0x00000000
 8003434:	080031e3 	.word	0x080031e3

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	4698      	mov	r8, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4607      	mov	r7, r0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfb8      	it	lt
 800344a:	4613      	movlt	r3, r2
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003452:	460c      	mov	r4, r1
 8003454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003458:	b10a      	cbz	r2, 800345e <_printf_common+0x26>
 800345a:	3301      	adds	r3, #1
 800345c:	6033      	str	r3, [r6, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0699      	lsls	r1, r3, #26
 8003462:	bf42      	ittt	mi
 8003464:	6833      	ldrmi	r3, [r6, #0]
 8003466:	3302      	addmi	r3, #2
 8003468:	6033      	strmi	r3, [r6, #0]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d106      	bne.n	8003480 <_printf_common+0x48>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	42ab      	cmp	r3, r5
 800347e:	dc2b      	bgt.n	80034d8 <_printf_common+0xa0>
 8003480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3b00      	subs	r3, #0
 8003488:	bf18      	it	ne
 800348a:	2301      	movne	r3, #1
 800348c:	0692      	lsls	r2, r2, #26
 800348e:	d430      	bmi.n	80034f2 <_printf_common+0xba>
 8003490:	4641      	mov	r1, r8
 8003492:	4638      	mov	r0, r7
 8003494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003498:	47c8      	blx	r9
 800349a:	3001      	adds	r0, #1
 800349c:	d023      	beq.n	80034e6 <_printf_common+0xae>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf14      	ite	ne
 80034aa:	2500      	movne	r5, #0
 80034ac:	6833      	ldreq	r3, [r6, #0]
 80034ae:	f04f 0600 	mov.w	r6, #0
 80034b2:	bf08      	it	eq
 80034b4:	68e5      	ldreq	r5, [r4, #12]
 80034b6:	f104 041a 	add.w	r4, r4, #26
 80034ba:	bf08      	it	eq
 80034bc:	1aed      	subeq	r5, r5, r3
 80034be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034c2:	bf08      	it	eq
 80034c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bfc4      	itt	gt
 80034cc:	1a9b      	subgt	r3, r3, r2
 80034ce:	18ed      	addgt	r5, r5, r3
 80034d0:	42b5      	cmp	r5, r6
 80034d2:	d11a      	bne.n	800350a <_printf_common+0xd2>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e008      	b.n	80034ea <_printf_common+0xb2>
 80034d8:	2301      	movs	r3, #1
 80034da:	4652      	mov	r2, sl
 80034dc:	4641      	mov	r1, r8
 80034de:	4638      	mov	r0, r7
 80034e0:	47c8      	blx	r9
 80034e2:	3001      	adds	r0, #1
 80034e4:	d103      	bne.n	80034ee <_printf_common+0xb6>
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ee:	3501      	adds	r5, #1
 80034f0:	e7c1      	b.n	8003476 <_printf_common+0x3e>
 80034f2:	2030      	movs	r0, #48	@ 0x30
 80034f4:	18e1      	adds	r1, r4, r3
 80034f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003500:	4422      	add	r2, r4
 8003502:	3302      	adds	r3, #2
 8003504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003508:	e7c2      	b.n	8003490 <_printf_common+0x58>
 800350a:	2301      	movs	r3, #1
 800350c:	4622      	mov	r2, r4
 800350e:	4641      	mov	r1, r8
 8003510:	4638      	mov	r0, r7
 8003512:	47c8      	blx	r9
 8003514:	3001      	adds	r0, #1
 8003516:	d0e6      	beq.n	80034e6 <_printf_common+0xae>
 8003518:	3601      	adds	r6, #1
 800351a:	e7d9      	b.n	80034d0 <_printf_common+0x98>

0800351c <_printf_i>:
 800351c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	7e0f      	ldrb	r7, [r1, #24]
 8003522:	4691      	mov	r9, r2
 8003524:	2f78      	cmp	r7, #120	@ 0x78
 8003526:	4680      	mov	r8, r0
 8003528:	460c      	mov	r4, r1
 800352a:	469a      	mov	sl, r3
 800352c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800352e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003532:	d807      	bhi.n	8003544 <_printf_i+0x28>
 8003534:	2f62      	cmp	r7, #98	@ 0x62
 8003536:	d80a      	bhi.n	800354e <_printf_i+0x32>
 8003538:	2f00      	cmp	r7, #0
 800353a:	f000 80d3 	beq.w	80036e4 <_printf_i+0x1c8>
 800353e:	2f58      	cmp	r7, #88	@ 0x58
 8003540:	f000 80ba 	beq.w	80036b8 <_printf_i+0x19c>
 8003544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800354c:	e03a      	b.n	80035c4 <_printf_i+0xa8>
 800354e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003552:	2b15      	cmp	r3, #21
 8003554:	d8f6      	bhi.n	8003544 <_printf_i+0x28>
 8003556:	a101      	add	r1, pc, #4	@ (adr r1, 800355c <_printf_i+0x40>)
 8003558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035c9 	.word	0x080035c9
 8003564:	08003545 	.word	0x08003545
 8003568:	08003545 	.word	0x08003545
 800356c:	08003545 	.word	0x08003545
 8003570:	08003545 	.word	0x08003545
 8003574:	080035c9 	.word	0x080035c9
 8003578:	08003545 	.word	0x08003545
 800357c:	08003545 	.word	0x08003545
 8003580:	08003545 	.word	0x08003545
 8003584:	08003545 	.word	0x08003545
 8003588:	080036cb 	.word	0x080036cb
 800358c:	080035f3 	.word	0x080035f3
 8003590:	08003685 	.word	0x08003685
 8003594:	08003545 	.word	0x08003545
 8003598:	08003545 	.word	0x08003545
 800359c:	080036ed 	.word	0x080036ed
 80035a0:	08003545 	.word	0x08003545
 80035a4:	080035f3 	.word	0x080035f3
 80035a8:	08003545 	.word	0x08003545
 80035ac:	08003545 	.word	0x08003545
 80035b0:	0800368d 	.word	0x0800368d
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6032      	str	r2, [r6, #0]
 80035bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035c4:	2301      	movs	r3, #1
 80035c6:	e09e      	b.n	8003706 <_printf_i+0x1ea>
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	1d19      	adds	r1, r3, #4
 80035ce:	6031      	str	r1, [r6, #0]
 80035d0:	0606      	lsls	r6, r0, #24
 80035d2:	d501      	bpl.n	80035d8 <_printf_i+0xbc>
 80035d4:	681d      	ldr	r5, [r3, #0]
 80035d6:	e003      	b.n	80035e0 <_printf_i+0xc4>
 80035d8:	0645      	lsls	r5, r0, #25
 80035da:	d5fb      	bpl.n	80035d4 <_printf_i+0xb8>
 80035dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	da03      	bge.n	80035ec <_printf_i+0xd0>
 80035e4:	232d      	movs	r3, #45	@ 0x2d
 80035e6:	426d      	negs	r5, r5
 80035e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ec:	230a      	movs	r3, #10
 80035ee:	4859      	ldr	r0, [pc, #356]	@ (8003754 <_printf_i+0x238>)
 80035f0:	e011      	b.n	8003616 <_printf_i+0xfa>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	0608      	lsls	r0, r1, #24
 80035f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035fc:	d402      	bmi.n	8003604 <_printf_i+0xe8>
 80035fe:	0649      	lsls	r1, r1, #25
 8003600:	bf48      	it	mi
 8003602:	b2ad      	uxthmi	r5, r5
 8003604:	2f6f      	cmp	r7, #111	@ 0x6f
 8003606:	6033      	str	r3, [r6, #0]
 8003608:	bf14      	ite	ne
 800360a:	230a      	movne	r3, #10
 800360c:	2308      	moveq	r3, #8
 800360e:	4851      	ldr	r0, [pc, #324]	@ (8003754 <_printf_i+0x238>)
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003616:	6866      	ldr	r6, [r4, #4]
 8003618:	2e00      	cmp	r6, #0
 800361a:	bfa8      	it	ge
 800361c:	6821      	ldrge	r1, [r4, #0]
 800361e:	60a6      	str	r6, [r4, #8]
 8003620:	bfa4      	itt	ge
 8003622:	f021 0104 	bicge.w	r1, r1, #4
 8003626:	6021      	strge	r1, [r4, #0]
 8003628:	b90d      	cbnz	r5, 800362e <_printf_i+0x112>
 800362a:	2e00      	cmp	r6, #0
 800362c:	d04b      	beq.n	80036c6 <_printf_i+0x1aa>
 800362e:	4616      	mov	r6, r2
 8003630:	fbb5 f1f3 	udiv	r1, r5, r3
 8003634:	fb03 5711 	mls	r7, r3, r1, r5
 8003638:	5dc7      	ldrb	r7, [r0, r7]
 800363a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800363e:	462f      	mov	r7, r5
 8003640:	42bb      	cmp	r3, r7
 8003642:	460d      	mov	r5, r1
 8003644:	d9f4      	bls.n	8003630 <_printf_i+0x114>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d10b      	bne.n	8003662 <_printf_i+0x146>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07df      	lsls	r7, r3, #31
 800364e:	d508      	bpl.n	8003662 <_printf_i+0x146>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	6861      	ldr	r1, [r4, #4]
 8003654:	4299      	cmp	r1, r3
 8003656:	bfde      	ittt	le
 8003658:	2330      	movle	r3, #48	@ 0x30
 800365a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800365e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003662:	1b92      	subs	r2, r2, r6
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	464b      	mov	r3, r9
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	aa03      	add	r2, sp, #12
 8003672:	f7ff fee1 	bl	8003438 <_printf_common>
 8003676:	3001      	adds	r0, #1
 8003678:	d14a      	bne.n	8003710 <_printf_i+0x1f4>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	b004      	add	sp, #16
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f043 0320 	orr.w	r3, r3, #32
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	2778      	movs	r7, #120	@ 0x78
 800368e:	4832      	ldr	r0, [pc, #200]	@ (8003758 <_printf_i+0x23c>)
 8003690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	6831      	ldr	r1, [r6, #0]
 8003698:	061f      	lsls	r7, r3, #24
 800369a:	f851 5b04 	ldr.w	r5, [r1], #4
 800369e:	d402      	bmi.n	80036a6 <_printf_i+0x18a>
 80036a0:	065f      	lsls	r7, r3, #25
 80036a2:	bf48      	it	mi
 80036a4:	b2ad      	uxthmi	r5, r5
 80036a6:	6031      	str	r1, [r6, #0]
 80036a8:	07d9      	lsls	r1, r3, #31
 80036aa:	bf44      	itt	mi
 80036ac:	f043 0320 	orrmi.w	r3, r3, #32
 80036b0:	6023      	strmi	r3, [r4, #0]
 80036b2:	b11d      	cbz	r5, 80036bc <_printf_i+0x1a0>
 80036b4:	2310      	movs	r3, #16
 80036b6:	e7ab      	b.n	8003610 <_printf_i+0xf4>
 80036b8:	4826      	ldr	r0, [pc, #152]	@ (8003754 <_printf_i+0x238>)
 80036ba:	e7e9      	b.n	8003690 <_printf_i+0x174>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	e7f6      	b.n	80036b4 <_printf_i+0x198>
 80036c6:	4616      	mov	r6, r2
 80036c8:	e7bd      	b.n	8003646 <_printf_i+0x12a>
 80036ca:	6833      	ldr	r3, [r6, #0]
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	1d18      	adds	r0, r3, #4
 80036d0:	6961      	ldr	r1, [r4, #20]
 80036d2:	6030      	str	r0, [r6, #0]
 80036d4:	062e      	lsls	r6, r5, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d501      	bpl.n	80036de <_printf_i+0x1c2>
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <_printf_i+0x1c8>
 80036de:	0668      	lsls	r0, r5, #25
 80036e0:	d5fb      	bpl.n	80036da <_printf_i+0x1be>
 80036e2:	8019      	strh	r1, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	4616      	mov	r6, r2
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	e7bc      	b.n	8003666 <_printf_i+0x14a>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	2100      	movs	r1, #0
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	6032      	str	r2, [r6, #0]
 80036f4:	681e      	ldr	r6, [r3, #0]
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f96b 	bl	80039d4 <memchr>
 80036fe:	b108      	cbz	r0, 8003704 <_printf_i+0x1e8>
 8003700:	1b80      	subs	r0, r0, r6
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800370e:	e7aa      	b.n	8003666 <_printf_i+0x14a>
 8003710:	4632      	mov	r2, r6
 8003712:	4649      	mov	r1, r9
 8003714:	4640      	mov	r0, r8
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d0ad      	beq.n	800367a <_printf_i+0x15e>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d413      	bmi.n	800374c <_printf_i+0x230>
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	4298      	cmp	r0, r3
 800372a:	bfb8      	it	lt
 800372c:	4618      	movlt	r0, r3
 800372e:	e7a6      	b.n	800367e <_printf_i+0x162>
 8003730:	2301      	movs	r3, #1
 8003732:	4632      	mov	r2, r6
 8003734:	4649      	mov	r1, r9
 8003736:	4640      	mov	r0, r8
 8003738:	47d0      	blx	sl
 800373a:	3001      	adds	r0, #1
 800373c:	d09d      	beq.n	800367a <_printf_i+0x15e>
 800373e:	3501      	adds	r5, #1
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9903      	ldr	r1, [sp, #12]
 8003744:	1a5b      	subs	r3, r3, r1
 8003746:	42ab      	cmp	r3, r5
 8003748:	dcf2      	bgt.n	8003730 <_printf_i+0x214>
 800374a:	e7eb      	b.n	8003724 <_printf_i+0x208>
 800374c:	2500      	movs	r5, #0
 800374e:	f104 0619 	add.w	r6, r4, #25
 8003752:	e7f5      	b.n	8003740 <_printf_i+0x224>
 8003754:	08003e21 	.word	0x08003e21
 8003758:	08003e32 	.word	0x08003e32

0800375c <__sflush_r>:
 800375c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	0716      	lsls	r6, r2, #28
 8003764:	4605      	mov	r5, r0
 8003766:	460c      	mov	r4, r1
 8003768:	d454      	bmi.n	8003814 <__sflush_r+0xb8>
 800376a:	684b      	ldr	r3, [r1, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	dc02      	bgt.n	8003776 <__sflush_r+0x1a>
 8003770:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	dd48      	ble.n	8003808 <__sflush_r+0xac>
 8003776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003778:	2e00      	cmp	r6, #0
 800377a:	d045      	beq.n	8003808 <__sflush_r+0xac>
 800377c:	2300      	movs	r3, #0
 800377e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003782:	682f      	ldr	r7, [r5, #0]
 8003784:	6a21      	ldr	r1, [r4, #32]
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	d030      	beq.n	80037ec <__sflush_r+0x90>
 800378a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	0759      	lsls	r1, r3, #29
 8003790:	d505      	bpl.n	800379e <__sflush_r+0x42>
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003798:	b10b      	cbz	r3, 800379e <__sflush_r+0x42>
 800379a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800379c:	1ad2      	subs	r2, r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037a4:	6a21      	ldr	r1, [r4, #32]
 80037a6:	47b0      	blx	r6
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	d106      	bne.n	80037bc <__sflush_r+0x60>
 80037ae:	6829      	ldr	r1, [r5, #0]
 80037b0:	291d      	cmp	r1, #29
 80037b2:	d82b      	bhi.n	800380c <__sflush_r+0xb0>
 80037b4:	4a28      	ldr	r2, [pc, #160]	@ (8003858 <__sflush_r+0xfc>)
 80037b6:	410a      	asrs	r2, r1
 80037b8:	07d6      	lsls	r6, r2, #31
 80037ba:	d427      	bmi.n	800380c <__sflush_r+0xb0>
 80037bc:	2200      	movs	r2, #0
 80037be:	6062      	str	r2, [r4, #4]
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	04d9      	lsls	r1, r3, #19
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	d504      	bpl.n	80037d2 <__sflush_r+0x76>
 80037c8:	1c42      	adds	r2, r0, #1
 80037ca:	d101      	bne.n	80037d0 <__sflush_r+0x74>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b903      	cbnz	r3, 80037d2 <__sflush_r+0x76>
 80037d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80037d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037d4:	602f      	str	r7, [r5, #0]
 80037d6:	b1b9      	cbz	r1, 8003808 <__sflush_r+0xac>
 80037d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <__sflush_r+0x8a>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff fbf3 	bl	8002fcc <_free_r>
 80037e6:	2300      	movs	r3, #0
 80037e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037ea:	e00d      	b.n	8003808 <__sflush_r+0xac>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b0      	blx	r6
 80037f2:	4602      	mov	r2, r0
 80037f4:	1c50      	adds	r0, r2, #1
 80037f6:	d1c9      	bne.n	800378c <__sflush_r+0x30>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c6      	beq.n	800378c <__sflush_r+0x30>
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d001      	beq.n	8003806 <__sflush_r+0xaa>
 8003802:	2b16      	cmp	r3, #22
 8003804:	d11d      	bne.n	8003842 <__sflush_r+0xe6>
 8003806:	602f      	str	r7, [r5, #0]
 8003808:	2000      	movs	r0, #0
 800380a:	e021      	b.n	8003850 <__sflush_r+0xf4>
 800380c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003810:	b21b      	sxth	r3, r3
 8003812:	e01a      	b.n	800384a <__sflush_r+0xee>
 8003814:	690f      	ldr	r7, [r1, #16]
 8003816:	2f00      	cmp	r7, #0
 8003818:	d0f6      	beq.n	8003808 <__sflush_r+0xac>
 800381a:	0793      	lsls	r3, r2, #30
 800381c:	bf18      	it	ne
 800381e:	2300      	movne	r3, #0
 8003820:	680e      	ldr	r6, [r1, #0]
 8003822:	bf08      	it	eq
 8003824:	694b      	ldreq	r3, [r1, #20]
 8003826:	1bf6      	subs	r6, r6, r7
 8003828:	600f      	str	r7, [r1, #0]
 800382a:	608b      	str	r3, [r1, #8]
 800382c:	2e00      	cmp	r6, #0
 800382e:	ddeb      	ble.n	8003808 <__sflush_r+0xac>
 8003830:	4633      	mov	r3, r6
 8003832:	463a      	mov	r2, r7
 8003834:	4628      	mov	r0, r5
 8003836:	6a21      	ldr	r1, [r4, #32]
 8003838:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800383c:	47e0      	blx	ip
 800383e:	2800      	cmp	r0, #0
 8003840:	dc07      	bgt.n	8003852 <__sflush_r+0xf6>
 8003842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003852:	4407      	add	r7, r0
 8003854:	1a36      	subs	r6, r6, r0
 8003856:	e7e9      	b.n	800382c <__sflush_r+0xd0>
 8003858:	dfbffffe 	.word	0xdfbffffe

0800385c <_fflush_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4605      	mov	r5, r0
 8003862:	460c      	mov	r4, r1
 8003864:	b913      	cbnz	r3, 800386c <_fflush_r+0x10>
 8003866:	2500      	movs	r5, #0
 8003868:	4628      	mov	r0, r5
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	b118      	cbz	r0, 8003876 <_fflush_r+0x1a>
 800386e:	6a03      	ldr	r3, [r0, #32]
 8003870:	b90b      	cbnz	r3, 8003876 <_fflush_r+0x1a>
 8003872:	f7ff f9a3 	bl	8002bbc <__sinit>
 8003876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f3      	beq.n	8003866 <_fflush_r+0xa>
 800387e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003880:	07d0      	lsls	r0, r2, #31
 8003882:	d404      	bmi.n	800388e <_fflush_r+0x32>
 8003884:	0599      	lsls	r1, r3, #22
 8003886:	d402      	bmi.n	800388e <_fflush_r+0x32>
 8003888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800388a:	f7ff fb8e 	bl	8002faa <__retarget_lock_acquire_recursive>
 800388e:	4628      	mov	r0, r5
 8003890:	4621      	mov	r1, r4
 8003892:	f7ff ff63 	bl	800375c <__sflush_r>
 8003896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003898:	4605      	mov	r5, r0
 800389a:	07da      	lsls	r2, r3, #31
 800389c:	d4e4      	bmi.n	8003868 <_fflush_r+0xc>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	059b      	lsls	r3, r3, #22
 80038a2:	d4e1      	bmi.n	8003868 <_fflush_r+0xc>
 80038a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038a6:	f7ff fb81 	bl	8002fac <__retarget_lock_release_recursive>
 80038aa:	e7dd      	b.n	8003868 <_fflush_r+0xc>

080038ac <__swhatbuf_r>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	460c      	mov	r4, r1
 80038b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b4:	4615      	mov	r5, r2
 80038b6:	2900      	cmp	r1, #0
 80038b8:	461e      	mov	r6, r3
 80038ba:	b096      	sub	sp, #88	@ 0x58
 80038bc:	da0c      	bge.n	80038d8 <__swhatbuf_r+0x2c>
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	2100      	movs	r1, #0
 80038c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038c6:	bf14      	ite	ne
 80038c8:	2340      	movne	r3, #64	@ 0x40
 80038ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038ce:	2000      	movs	r0, #0
 80038d0:	6031      	str	r1, [r6, #0]
 80038d2:	602b      	str	r3, [r5, #0]
 80038d4:	b016      	add	sp, #88	@ 0x58
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	466a      	mov	r2, sp
 80038da:	f000 f849 	bl	8003970 <_fstat_r>
 80038de:	2800      	cmp	r0, #0
 80038e0:	dbed      	blt.n	80038be <__swhatbuf_r+0x12>
 80038e2:	9901      	ldr	r1, [sp, #4]
 80038e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038ec:	4259      	negs	r1, r3
 80038ee:	4159      	adcs	r1, r3
 80038f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038f4:	e7eb      	b.n	80038ce <__swhatbuf_r+0x22>

080038f6 <__smakebuf_r>:
 80038f6:	898b      	ldrh	r3, [r1, #12]
 80038f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038fa:	079d      	lsls	r5, r3, #30
 80038fc:	4606      	mov	r6, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	d507      	bpl.n	8003912 <__smakebuf_r+0x1c>
 8003902:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	6123      	str	r3, [r4, #16]
 800390a:	2301      	movs	r3, #1
 800390c:	6163      	str	r3, [r4, #20]
 800390e:	b003      	add	sp, #12
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003912:	466a      	mov	r2, sp
 8003914:	ab01      	add	r3, sp, #4
 8003916:	f7ff ffc9 	bl	80038ac <__swhatbuf_r>
 800391a:	9f00      	ldr	r7, [sp, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	4639      	mov	r1, r7
 8003920:	4630      	mov	r0, r6
 8003922:	f7ff fbbd 	bl	80030a0 <_malloc_r>
 8003926:	b948      	cbnz	r0, 800393c <__smakebuf_r+0x46>
 8003928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800392c:	059a      	lsls	r2, r3, #22
 800392e:	d4ee      	bmi.n	800390e <__smakebuf_r+0x18>
 8003930:	f023 0303 	bic.w	r3, r3, #3
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	e7e2      	b.n	8003902 <__smakebuf_r+0xc>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	9b01      	ldr	r3, [sp, #4]
 800394a:	6020      	str	r0, [r4, #0]
 800394c:	b15b      	cbz	r3, 8003966 <__smakebuf_r+0x70>
 800394e:	4630      	mov	r0, r6
 8003950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003954:	f000 f81e 	bl	8003994 <_isatty_r>
 8003958:	b128      	cbz	r0, 8003966 <__smakebuf_r+0x70>
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	f023 0303 	bic.w	r3, r3, #3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	431d      	orrs	r5, r3
 800396a:	81a5      	strh	r5, [r4, #12]
 800396c:	e7cf      	b.n	800390e <__smakebuf_r+0x18>
	...

08003970 <_fstat_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	2300      	movs	r3, #0
 8003974:	4d06      	ldr	r5, [pc, #24]	@ (8003990 <_fstat_r+0x20>)
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	602b      	str	r3, [r5, #0]
 800397e:	f7fc ff54 	bl	800082a <_fstat>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d102      	bne.n	800398c <_fstat_r+0x1c>
 8003986:	682b      	ldr	r3, [r5, #0]
 8003988:	b103      	cbz	r3, 800398c <_fstat_r+0x1c>
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	bd38      	pop	{r3, r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	200002d4 	.word	0x200002d4

08003994 <_isatty_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4d05      	ldr	r5, [pc, #20]	@ (80039b0 <_isatty_r+0x1c>)
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	f7fc ff48 	bl	8000834 <_isatty>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_isatty_r+0x1a>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_isatty_r+0x1a>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	200002d4 	.word	0x200002d4

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	@ (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fc ff3c 	bl	800083c <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	200002d4 	.word	0x200002d4

080039d4 <memchr>:
 80039d4:	4603      	mov	r3, r0
 80039d6:	b510      	push	{r4, lr}
 80039d8:	b2c9      	uxtb	r1, r1
 80039da:	4402      	add	r2, r0
 80039dc:	4293      	cmp	r3, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	d101      	bne.n	80039e6 <memchr+0x12>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e003      	b.n	80039ee <memchr+0x1a>
 80039e6:	7804      	ldrb	r4, [r0, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	428c      	cmp	r4, r1
 80039ec:	d1f6      	bne.n	80039dc <memchr+0x8>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
